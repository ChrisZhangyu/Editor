业务功能逻辑：在t_user表中查询用户名等于输入参数的用户，在t_message_user表中查询receive_user_id等于用户id的消息分页信息，存放在根据输入参数创建的分页对象中；从分页对象中获取消息ID列表，如果为空则response赋值为null，如果不为空，在在t_message表中查询对应的消息记录message，返回分页消息，其中title、content和send_user_name从message中获取，并对创建时间进行格式化；response的total属性等于分页消息的长度，list属性是分页消息.

需要检查的代码：
```java
// MessagePageRequest.java
package com.example.entity;


import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class MessagePageRequest {
    private String userName;
    private int pageIndex;
    private int pageSize;
}

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ApiResponse<T> {
    private int code;
    private String message;
    private T response;
}
```
```java
// MessageUserRepository.java
package com.example.entity;


import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class MessagePageRequest {
    private String userName;
    private int pageIndex;
    private int pageSize;
}

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ApiResponse<T> {
    private int code;
    private String message;
    private T response;
}
import com.example.entity.User;

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;

import java.util.List;

@Mapper
public interface MessageUserRepository {
    List<MessageUser> findByReceiveUserId(@Param("receiveUserId") int receiveUserId, @Param("pageIndex") int pageIndex, @Param("pageSize") int pageSize);
}

@Mapper
public interface MessageRepository {
    List<Message> findByIds(List<Integer> messageIds);
}

@Mapper
public interface UserRepository {
    User findByUserName(String userName);
}
```
```java
// User.java
package com.example.entity;


import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class MessagePageRequest {
    private String userName;
    private int pageIndex;
    private int pageSize;
}

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ApiResponse<T> {
    private int code;
    private String message;
    private T response;
}
import com.example.entity.User;

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;

import java.util.List;

@Mapper
public interface MessageUserRepository {
    List<MessageUser> findByReceiveUserId(@Param("receiveUserId") int receiveUserId, @Param("pageIndex") int pageIndex, @Param("pageSize") int pageSize);
}

@Mapper
public interface MessageRepository {
    List<Message> findByIds(List<Integer> messageIds);
}

@Mapper
public interface UserRepository {
    User findByUserName(String userName);
}

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.Date;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class User {
    private int id;
    private String userUuid;
    private String userName;
    private String password;
    private String realName;
    private int age;
    private int sex;
    private Date birthDay;
    private int userLevel;
    private String phone;
    private int role;
    private int status;
    private String imagePath;
    private Date createTime;
    private Date modifyTime;
    private Date lastActiveTime;
    private boolean deleted;
    private String wxOpenId;
}

@Data
@NoArgsConstructor
@AllArgsConstructor
public class MessageUser {
    private int id;
    private int messageId;
    private int receiveUserId;
    private String receiveUserName;
    private String receiveRealName;
    private boolean readed;
    private Date createTime;
    private Date readTime;
}

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Message {
    private int id;
    private String title;
    private String content;
    private Date createTime;
    private int sendUserId;
    private String sendUserName;
    private String sendRealName;
    private int receiveUserCount;
    private int readCount;
}
```

```java
// MessageService.java
package com.example.service;

import com.example.entity.MessagePageRequest;

import java.util.List;

public interface MessageService {
    List<Message> getMessagePage(MessagePageRequest request);
}
```

```java
// MessageServiceImpl.java
package com.example.service.impl;

import com.example.entity.User;
import com.example.service.MessageService;
import com.example.entity.MessagePageRequest;
import com.example.entity.MessageUserRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class MessageServiceImpl implements MessageService {

    private final UserRepository userRepository;
    private final MessageUserRepository messageUserRepository;
    private final MessageRepository messageRepository;

    @Autowired
    public MessageServiceImpl(UserRepository userRepository, MessageUserRepository messageUserRepository, MessageRepository messageRepository) {
        this.userRepository = userRepository;
        this.messageUserRepository = messageUserRepository;
        this.messageRepository = messageRepository;
    }

    @Override
    public List<Message> getMessagePage(MessagePageRequest request) {
        User user = userRepository.findByUserName(request.getUserName());
        if (user == null) {
            return null;
        }

        List<MessageUser> messageUsers = messageUserRepository.findByReceiveUserId(user.getId(), request.getPageIndex(), request.getPageSize());
        if (messageUsers.isEmpty()) {
            return null;
        }

        List<Integer> messageIds = messageUsers.stream().map(MessageUser::getMessageId).collect(Collectors.toList());
        List<Message> messages = messageRepository.findByIds(messageIds);

        return messages;
    }
}
```

```java
// MessageController.java
package com.example.controller;

import com.example.service.MessageService;
import com.example.entity.MessagePageRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class MessageController {

    private final MessageService messageService;

    @Autowired
    public MessageController(MessageService messageService) {
        this.messageService = messageService;
    }

    @PostMapping("/api/student/user/message/page")
    public ApiResponse<List<Message>> getMessagePage(@RequestBody MessagePageRequest request) {
        List<Message> messages = messageService.getMessagePage(request);
        if (messages == null) {
            return new ApiResponse<>(0, "用户不存在或没有消息", null);
        } else {
            return new ApiResponse<>(1, "成功", messages);
        }
    }
}
```


```xml
<!-- MessageUserRepository.xml -->

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- MessageUserRepository.xml -->
<mapper namespace="com.example.repository.MessageUserRepository">
    <select id="findByReceiveUserId" resultType="com.example.entity.MessageUser">
        SELECT * FROM t_message_user WHERE receive_user_id = #{receiveUserId} LIMIT #{pageIndex}, #{pageSize}
    </select>
</mapper>

<!-- MessageRepository.xml -->
<mapper namespace="com.example.repository.MessageRepository">
    <select id="findByIds" resultType="com.example.entity.Message">
        SELECT * FROM t_message WHERE id IN
        <foreach collection="messageIds" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>
</mapper>

<!-- UserRepository.xml -->
<mapper namespace="com.example.repository.UserRepository">
    <select id="findByUserName" resultType="com.example.entity.User">
        SELECT * FROM t_user WHERE user_name = #{userName}
    </select>
</mapper>

```

代码执行的错误信息：
```运行错误
D:\迅雷下载\xzs-project_test\user_message_page_system\src\main\java\com\example\entity\MessageUserRepository.java:25
java: 需要class, interface或enum
D:\迅雷下载\xzs-project_test\user_message_page_system\src\main\java\com\example\controller\MessageController.java:22:12
java: 找不到符号
  符号:   类 ApiResponse
  位置: 类 com.example.controller.MessageController
```
```功能错误
分页功能不完整
```