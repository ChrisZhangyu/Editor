业务功能逻辑：
在tb_user表中查询用户，查询条件是user_id等于输入参数，如果用户不存在，返回(-1002, "用户不存在", null)；分页查询tb_address表中的记录，查询条件是tb_address.user_id等于输入参数，结果按照is_default字段降序排列；返回data设置为{tb_address记录}.

需要检查的代码：
```java
// ApiResponse.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ApiResponse<T> {
    private int code;
    private String message;
    private T data;
}
```

```java
// TbAddress.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import javax.persistence.*;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "tb_address")
public class TbAddress {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "address_id")
    private Integer addressId;

    @Column(name = "user_id")
    private Integer userId;

    private String consignee;

    private Long phone;

    private String city;

    private String address;

    @Column(name = "street_number")
    private String streetNumber;

    @Column(name = "is_default")
    private Boolean isDefault;
}
```

```java
// TbUser.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import javax.persistence.*;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "tb_user")
public class TbUser {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "user_id")
    private Integer userId;

    @Column(name = "user_name", length = 30)
    private String userName;

    @Column(name = "pass_word", length = 30)
    private String passWord;

    private Long phone;

    @Column(length = 6)
    private String sex;

    private String avatar;

    @Column(name = "nick_name", length = 10)
    private String nickName;
}
```

```java
// AddressService.java
package com.example.service;

import com.example.entity.TbAddress;

import java.util.List;

public interface AddressService {
    List<TbAddress> getAddressByUserId(int userId, int page, int rows);
}
```

```java
// UserService.java
package com.example.service;

import com.example.entity.TbUser;

public interface UserService {
    TbUser getUserById(int userId);
}
```

```java
// AddressController.java
package com.example.controller;

import entity.TbAddress;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import service.AddressService;

import java.util.List;

@RestController
@RequestMapping("/user/v1/user")
public class AddressController {
    private final AddressService addressService;

    @Autowired
    public AddressController(AddressService addressService) {
        this.addressService = addressService;
    }

    @GetMapping("/{userId}/address")
    public ApiResponse<List<TbAddress>> getAddressByUserId(@PathVariable int userId, int page, int rows) {
        List<TbAddress> addressList = addressService.getAddressByUserId(userId, page, rows);
        return new ApiResponse<>(100, "成功", addressList);
    }
}
```

```java
// UserController.java
package com.example.controller;

import entity.TbUser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import service.UserService;

@RestController
@RequestMapping("/user/v1/user")
public class UserController {
    private final UserService userService;

    @Autowired
    public UserController(UserService userService) {
        this.userService = userService;
    }

    @GetMapping("/{userId}")
    public ApiResponse<User> getUserById(@PathVariable int userId) {
        TbUser user = userService.getUserById(userId);
        if (user == null) {
            return new ApiResponse<>(-1002, "用户不存在", null);
        }
        return new ApiResponse<>(100, "成功", user);
    }
}
```

```java
// AddressMapper.java
package com.example.mapper;

import com.example.entity.TbAddress;
import org.apache.ibatis.annotations.Param;

import java.util.List;

public interface AddressMapper {
    List<TbAddress> getAddressByUserId(@Param("userId") int userId, @Param("page") int page, @Param("rows") int rows);
}
```

```java
// UserMapper.java
package com.example.mapper;

import com.example.entity.TbUser;

import org.apache.ibatis.annotations.Param;

public interface UserMapper {
    TbUser getUserById(@Param("userId") int userId);
}
```

```xml
<!-- AddressMapper.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.AddressMapper">
    <select id="getAddressByUserId" parameterType="map" resultType="entity.TbAddress">
        SELECT * FROM tb_address WHERE user_id = #{userId} ORDER BY is_default DESC LIMIT #{page}, #{rows}
    </select>
</mapper>
```

```xml
<!-- UserMapper.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapper.UserMapper">
    <select id="getUserById" parameterType="int" resultType="entity.TbUser">
        SELECT * FROM tb_user WHERE user_id = #{userId}
    </select>
</mapper>
```

代码执行的错误信息：
```运行错误
AddressController.java:3:14
java: 程序包entity不存在
AddressController.java:9:15
java: 程序包service不存在
AddressController.java:16:19
java: 找不到符号
  符号:   类 AddressService
  位置: 类 com.example.controller.AddressController
AddressController.java:19:30
java: 找不到符号
  符号:   类 AddressService
  位置: 类 com.example.controller.AddressController
AddressController.java:24:12
java: 找不到符号
  符号:   类 ApiResponse
  位置: 类 com.example.controller.AddressController
AddressController.java:24:29
java: 找不到符号
  符号:   类 TbAddress
  位置: 类 com.example.controller.AddressController
UserController.java:3:14
java: 程序包entity不存在
UserController.java:9:15
java: 程序包service不存在
UserController.java:14:19
java: 找不到符号
  符号:   类 UserService
  位置: 类 com.example.controller.UserController
UserController.java:17:27
java: 找不到符号
  符号:   类 UserService
  位置: 类 com.example.controller.UserController
UserController.java:22:12
java: 找不到符号
  符号:   类 ApiResponse
  位置: 类 com.example.controller.UserController
UserController.java:22:24
java: 找不到符号
  符号:   类 TbUser
  位置: 类 com.example.controller.UserController
Parameter 0 of constructor in com.example.controller.AddressController required a bean of type 'com.example.service.AddressService' that could not be found.
Error creating bean with name 'userMapper' defined in file [UserMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [E:\NBICCProjects\Year-2023\LLM\tbs\get_all_address\target\classes\mapper\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'entity.TbAddress'.  Cause: java.lang.ClassNotFoundException: Cannot find class: entity.TbAddress
Error creating bean with name 'addressController' defined in file [AddressController.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userService' defined in file [UserService.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'userMapper' defined in file [E:\NBICCProjects\Year-2023\LLM\tbs\get_all_address\target\classes\com\example\mapper\UserMapper.class]: Unsatisfied dependency expressed through bean property 'sqlSessionFactory'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'sqlSessionFactory' defined in class path resource [org/mybatis/spring/boot/autoconfigure/MybatisAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.ibatis.session.SqlSessionFactory]: Factory method 'sqlSessionFactory' threw exception; nested exception is org.springframework.core.NestedIOException: Failed to parse mapping resource: 'file [AddressMapper.xml]'; nested exception is org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is 'file [E:\NBICCProjects\Year-2023\LLM\tbs\get_all_address\target\classes\mapper\AddressMapper.xml]'. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias 'entity.TbAddress'.  Cause: java.lang.ClassNotFoundException: Cannot find class: entity.TbAddress
```

```功能错误
多生成了UserController类，在功能描述中是没有用到的.
tb_address表分页查询中的LIMIT计算错误，没有从结果集的第(page-1)*rows行开始返回.
```