业务功能逻辑：实现批量发货功能，首先更新数据库中的订单状态为已发货，并记录了每个发货操作的操作历史记录，最后返回成功发货的订单数量。返回参数{"code","message","data"}。

需要检查的代码：
```java
// ApiResponse.java
package com.example.entity;


import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ApiResponse {
    private String code;
    private String message;
    private Object data;
}
```
```java
// DeliveryRequest.java
package com.example.entity;


import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ApiResponse {
    private String code;
    private String message;
    private Object data;
}

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class DeliveryRequest {
    private Long orderId;
    private String deliveryCompany;
    private String deliverySn;
}
```
```java
// OmsOrder.java
package com.example.entity;


import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ApiResponse {
    private String code;
    private String message;
    private Object data;
}

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class DeliveryRequest {
    private Long orderId;
    private String deliveryCompany;
    private String deliverySn;
}

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;
import java.sql.Timestamp;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class OmsOrder {
    private Long id;
    private Long memberId;
    private Long couponId;
    private String orderSn;
    private Timestamp createTime;
    private String memberUsername;
    private BigDecimal totalAmount;
    private BigDecimal payAmount;
    private BigDecimal freightAmount;
    private BigDecimal promotionAmount;
    private BigDecimal integrationAmount;
    private BigDecimal couponAmount;
    private BigDecimal discountAmount;
    private Integer payType;
    private Integer sourceType;
    private Integer status;
    private Integer orderType;
    private String deliveryCompany;
    private String deliverySn;
    private Integer autoConfirmDay;
    private Integer integration;
    private Integer growth;
    private String promotionInfo;
    private Integer billType;
    private String billHeader;
    private String billContent;
    private String billReceiverPhone;
    private String billReceiverEmail;
    private String receiverName;
    private String receiverPhone;
    private String receiverPostCode;
    private String receiverProvince;
    private String receiverCity;
    private String receiverRegion;
    private String receiverDetailAddress;
    private String note;
    private Integer confirmStatus;
    private Integer deleteStatus;
    private Integer useIntegration;
    private Timestamp paymentTime;
    private Timestamp deliveryTime;
    private Timestamp receiveTime;
    private Timestamp commentTime;
    private Timestamp modifyTime;
}
```

```java
// OmsOrderService.java
package com.example.service;

import com.example.entity.DeliveryRequest;

import com.example.model.DeliveryRequest;

public interface OmsOrderService {
    int updateDelivery(DeliveryRequest request);
}
```

```java
// OmsOrderServiceImpl.java
package com.example.service.impl;

import com.example.service.OmsOrderService;
import com.example.entity.DeliveryRequest;
import com.example.mapper.OmsOrderMapper;

import com.example.mapper.OmsOrderMapper;
import com.example.model.DeliveryRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class OmsOrderServiceImpl implements OmsOrderService {
    private final OmsOrderMapper orderMapper;

    @Autowired
    public OmsOrderServiceImpl(OmsOrderMapper orderMapper) {
        this.orderMapper = orderMapper;
    }

    @Override
    public int updateDelivery(DeliveryRequest request) {
        return orderMapper.updateDelivery(request);
    }
}
```

```java
// OmsOrderController.java
package com.example.controller;

import com.example.service.OmsOrderService;
import com.example.entity.DeliveryRequest;
import com.example.entity.ApiResponse;

import com.example.model.ApiResponse;
import com.example.model.DeliveryRequest;
import com.example.service.OmsOrderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/order")
public class OmsOrderController {
    private final OmsOrderService orderService;

    @Autowired
    public OmsOrderController(OmsOrderService orderService) {
        this.orderService = orderService;
    }

    @PostMapping("/update/delivery")
    public ApiResponse updateDelivery(@RequestBody DeliveryRequest request) {
        int count = orderService.updateDelivery(request);
        return new ApiResponse("200", "Success", count);
    }
}
```

```java
// OmsOrderMapper.java
package com.example.mapper;

import com.example.entity.DeliveryRequest;

import org.apache.ibatis.annotations.Mapper;

@Mapper
public interface OmsOrderMapper {
    int updateDelivery(DeliveryRequest request);
}
```

```xml
<!-- OmsOrderMapper.xml -->

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.OmsOrderMapper">
    <update id="updateDelivery">
        UPDATE oms_order
        SET status = 2, deliveryCompany = #{deliveryCompany}, deliverySn = #{deliverySn}
        WHERE id = #{orderId}
    </update>
</mapper>

```

代码执行的错误信息：
```运行错误
D:\迅雷下载\xzs-project_test\order_delivery_system\src\main\java\com\example\entity\OmsOrder.java:17
java: 需要class, interface或enum
D:\迅雷下载\xzs-project_test\order_delivery_system\src\main\java\com\example\entity\OmsOrder.java:18
java: 需要class, interface或enum
D:\迅雷下载\xzs-project_test\order_delivery_system\src\main\java\com\example\entity\OmsOrder.java:19
java: 需要class, interface或enum
D:\迅雷下载\xzs-project_test\order_delivery_system\src\main\java\com\example\entity\OmsOrder.java:30
java: 需要class, interface或enum
D:\迅雷下载\xzs-project_test\order_delivery_system\src\main\java\com\example\entity\OmsOrder.java:31
java: 需要class, interface或enum
D:\迅雷下载\xzs-project_test\order_delivery_system\src\main\java\com\example\entity\OmsOrder.java:32
java: 需要class, interface或enum
D:\迅雷下载\xzs-project_test\order_delivery_system\src\main\java\com\example\entity\OmsOrder.java:34
java: 需要class, interface或enum
D:\迅雷下载\xzs-project_test\order_delivery_system\src\main\java\com\example\entity\OmsOrder.java:35
java: 需要class, interface或enum
D:\迅雷下载\xzs-project_test\order_delivery_system\src\main\java\com\example\controller\OmsOrderController.java:7:25
java: 程序包com.example.model不存在
```
```功能错误
未对数据库进行判空处理，直接空值也会覆盖掉了

```