```java
// ApiResponse.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ApiResponse {
    private int code;
    private String message;
    private Object data;
}
```

```java
// TbAddress.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import javax.persistence.*;
import java.util.Date;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "tb_address")
public class TbAddress {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "address_id")
    private Integer addressId;

    @Column(name = "user_id")
    private Integer userId;

    private String consignee;

    private Long phone;

    private String city;

    private String address;

    @Column(name = "street_number")
    private String streetNumber;

    @Column(name = "is_default")
    private Boolean isDefault;
}
```

```java
// AddressService.java
package com.example.service;

import com.example.entity.TbAddress;
import com.example.entity.ApiResponse;

public interface AddressService {
    ApiResponse deleteAddress(int userId, int addressId, TbAddress address);
}
```

```java
// AddressServiceImpl.java
package com.example.service.impl;

import com.example.entity.TbAddress;
import com.example.entity.ApiResponse;
import com.example.mapper.AddressMapper;
import com.example.service.AddressService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class AddressServiceImpl implements AddressService {
    private final AddressMapper addressMapper;

    @Autowired
    public AddressServiceImpl(AddressMapper addressMapper) {
        this.addressMapper = addressMapper;
    }
    @Override
    public ApiResponse deleteAddress(int userId, int addressId, TbAddress address) {
        // 实现删除地址的逻辑
        TbAddress existingAddress = addressMapper.selectAddressById(address.getAddressId());
        if (existingAddress == null || existingAddress.getUserId() != address.getUserId()) {
            return new ApiResponse(-1002, "收货地址不存在", null);
        }

        // 如果删除的是默认地址， 选该用户的一个id最大的地址为默认地址, 如果没有其他地址，就不用
        if (address.getIsDefault() == true) {
            TbAddress addressOther = addressMapper.selectMaxAddressByUserId(address.getUserId(), address.getAddressId());

            // 如果该用户有其他的地址
            if (null != addressOther) {
                addressOther.setIsDefault(true);
                this.addressMapper.updateAddressDefault(addressOther.getUserId(), addressOther.getAddressId());
            }
        }

        this.addressMapper.deleteAddress(address.getAddressId());
        return new ApiResponse(100, "成功", null);
    }
}
```

```java
// AddressController.java
package com.example.controller;

import com.example.entity.ApiResponse;
import com.example.entity.TbAddress;
import com.example.service.AddressService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/user/v1/user")
public class AddressController {
    private final AddressService addressService;

    @Autowired
    public AddressController(AddressService addressService) {
        this.addressService = addressService;
    }

    @DeleteMapping("/{userId}/address/{addressId}")
    public ApiResponse deleteAddress(@PathVariable int userId, @PathVariable int addressId, @RequestBody TbAddress address) {
        address.setUserId(userId);
        address.setAddressId(addressId);
        return addressService.deleteAddress(userId, addressId, address);
    }
}
```

```java
// AddressMapper.java
package com.example.mapper;

import com.example.entity.TbAddress;
import org.apache.ibatis.annotations.Param;

import java.util.List;

public interface AddressMapper {
    TbAddress selectAddressById(int addressId);
    void updateAddressDefault(@Param("userId") int userId, @Param("addressId") int addressId);

    void deleteAddress(int addressId);
    TbAddress selectMaxAddressByUserId(@Param("userId") int userId, @Param("addressId") int addressId);
}
```

```xml
<!-- AddressMapper.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.AddressMapper">
    <select id="selectAddressById" parameterType="int" resultType="com.example.entity.TbAddress">
        SELECT * FROM tb_address WHERE address_id = #{addressId}
    </select>

    <update id="updateAddressDefault" parameterType="map">
        UPDATE tb_address SET is_default = true WHERE user_id = #{userId} AND address_id = #{addressId}
    </update>

    <delete id="deleteAddress" parameterType="int">
        DELETE FROM tb_address WHERE address_id = #{addressId}
    </delete>

    <select id="selectMaxAddressByUserId" parameterType="int" resultType="com.example.entity.TbAddress">
        SELECT * FROM tb_address WHERE user_id = #{userId} AND address_id != #{addressId} ORDER BY address_id DESC LIMIT 1
    </select>
</mapper>
```