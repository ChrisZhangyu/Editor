```java
// ApiResponse.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ApiResponse {
    private int code;
    private String message;
    private Object data;
}
```

```java
// TbAddress.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import javax.persistence.*;
import java.util.Date;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "tb_address")
public class TbAddress {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "address_id")
    private Integer addressId;

    @Column(name = "user_id")
    private Integer userId;

    private String consignee;

    private Long phone;

    private String city;

    private String address;

    @Column(name = "street_number")
    private String streetNumber;

    @Column(name = "is_default")
    private Boolean isDefault;
}
```

```java
// AddressService.java
package com.example.service;

import com.example.entity.ApiResponse;
import com.example.entity.TbAddress;

import java.util.List;

public interface AddressService {
    TbAddress getAddressById(int addressId);
    ApiResponse updateAddress(TbAddress address);
}
```

```java
// AddressServiceImpl.java
package com.example.service.impl;

import com.example.entity.ApiResponse;
import com.example.entity.TbAddress;
import com.example.mapper.AddressMapper;
import com.example.service.AddressService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class AddressServiceImpl implements AddressService {
    private final AddressMapper addressMapper;

    @Autowired
    public AddressServiceImpl(AddressMapper addressMapper) {
        this.addressMapper = addressMapper;
    }

    @Override
    public TbAddress getAddressById(int addressId) {
        return addressMapper.getAddressById(addressId);
    }

    @Override
    public ApiResponse updateAddress(TbAddress address) {
        TbAddress existingAddress = addressMapper.getAddressById(address.getAddressId());
                if (existingAddress == null || existingAddress.getUserId() != address.getUserId()) {
                    return new ApiResponse(-1002, "收货地址不存在", null);
                }

        if (address.getConsignee() != null) {
            existingAddress.setConsignee(address.getConsignee());
        }
        if (address.getPhone() != 0) {
            existingAddress.setPhone(address.getPhone());
        }
        if (address.getCity() != null) {
            existingAddress.setCity(address.getCity());
        }
        if (address.getAddress() != null) {
            existingAddress.setAddress(address.getAddress());
        }
        if (address.getStreetNumber() != null) {
            existingAddress.setStreetNumber(address.getStreetNumber());
        }
        if (address.getIsDefault() != existingAddress.getIsDefault()) {
            existingAddress.setIsDefault(address.getIsDefault());
            if (address.getIsDefault()) {
                List<TbAddress> addressList = addressMapper.getAddressListByUserId(address.getUserId());
                for (TbAddress addr : addressList) {
                    addr.setIsDefault(false);
                    addressMapper.updateAddress(addr);
                }
            }
        }

        addressMapper.updateAddress(existingAddress);
        return new ApiResponse(100, "成功", existingAddress);
    }
}
```

```java
// AddressController.java
package com.example.controller;

import com.example.entity.TbAddress;
import com.example.entity.ApiResponse;
import com.example.service.AddressService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/user/v1/user/{userId}/address")
public class AddressController {
    private final AddressService addressService;

    @Autowired
    public AddressController(AddressService addressService) {
        this.addressService = addressService;
    }

    @GetMapping("/{addressId}")
    public TbAddress getAddressById(@PathVariable int userId, @PathVariable int addressId) {
        return addressService.getAddressById(addressId);
    }

    @PostMapping("/{addressId}")
    public ApiResponse updateAddress(@PathVariable int userId, @PathVariable int addressId, @RequestBody TbAddress address) {
        address.setUserId(userId);
        address.setAddressId(addressId);
        return addressService.updateAddress(address);
    }
}
```

```java
// AddressMapper.java
package com.example.mapper;

import com.example.entity.TbAddress;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;

import java.util.List;

@Mapper
public interface AddressMapper {
    TbAddress getAddressById(int addressId);
    List<TbAddress> getAddressListByUserId(int userId);
    void updateAddress(TbAddress address);
}
```

```xml
<!-- AddressMapper.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.mapper.AddressMapper">
    <select id="getAddressById" parameterType="int" resultType="com.example.entity.TbAddress">
        SELECT * FROM tb_address WHERE address_id = #{addressId}
    </select>

    <select id="getAddressListByUserId" parameterType="int" resultType="com.example.entity.TbAddress">
        SELECT * FROM tb_address WHERE user_id = #{userId}
    </select>

    <update id="updateAddress" parameterType="com.example.entity.TbAddress">
        UPDATE tb_address
        SET consignee = #{consignee},
            phone = #{phone},
            city = #{city},
            address = #{address},
            street_number = #{streetNumber},
            is_default = #{isDefault}
        WHERE address_id = #{addressId}
    </update>
</mapper>
```