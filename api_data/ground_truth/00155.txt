
```java
// ApiResponse.java
package com.example.entity;


import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ApiResponse<T> {
    private Integer code;
    private String message;
    private T response;
}
```
```java
// EditUserRequest.java
package com.example.entity;




import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.Date;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class EditUserRequest {
    private Integer id;
    private String userUuid;
    private String userName;
    private String password;
    private String realName;
    private Integer role;
    private Integer status;
    private Integer age;
    private Integer sex;
    private Date birthDay;
    private String phone;
    private Integer userLevel;
}
```
```java
// User.java
package com.example.entity;


import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.Date;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class User {
    private Integer id;
    private String userUuid;
    private String userName;
    private String password;
    private String realName;
    private Integer age;
    private Integer sex;
    private Date birthDay;
    private Integer userLevel;
    private String phone;
    private Integer role;
    private Integer status;
    private String imagePath;
    private Date createTime;
    private Date modifyTime;
    private Date lastActiveTime;
    private Boolean deleted;
    private String wxOpenId;
}
```

```java
// UserService.java
package com.example.service;

import com.example.entity.ApiResponse;
import com.example.entity.EditUserRequest;
import com.example.entity.User;

public interface UserService {
    ApiResponse<User> editUser(EditUserRequest request);
}
```

```java
// UserServiceImpl.java
package com.example.service.impl;

import com.example.entity.ApiResponse;
import com.example.entity.EditUserRequest;
import com.example.entity.User;
import com.example.mapper.UserMapper;
import com.example.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.UUID;

@Service
public class UserServiceImpl implements UserService {
    private final UserMapper userMapper;

    @Autowired
    public UserServiceImpl(UserMapper userMapper) {
        this.userMapper = userMapper;
    }

    @Override
    public ApiResponse<User> editUser(EditUserRequest request) {
        // 检查必填字段
        if (request.getUserName() == null || request.getRealName() == null) {
            return new ApiResponse<>(0, "用户名不存在", null);
        }

        // 检查密码是否为空
        if (request.getPassword() == null) {
            return new ApiResponse<>(0, "密码不能为空", null);
        }

        // 根据id判断是创建新用户还是更新现有用户
        if (request.getId() == null) {
            // 创建新用户
            User user = new User();
            user.setId(request.getId());
            user.setUserUuid(request.getUserUuid());
            user.setCreateTime(new Date());
            user.setLastActiveTime(new Date());
            user.setDeleted(false);
            user.setUserName(request.getUserName());
            user.setPassword(request.getPassword());
            user.setRealName(request.getRealName());
            user.setRole(request.getRole());
            user.setStatus(request.getStatus());
            user.setAge(request.getAge());
            user.setSex(request.getSex());
            user.setBirthDay(request.getBirthDay());
            user.setPhone(request.getPhone());
            user.setUserLevel(request.getUserLevel());

            userMapper.insertUser(user);

            return new ApiResponse<>(1, "创建成功", user);
        } else {
            // 更新现有用户
            User user = userMapper.selectUserById(request.getId());

            user.setUserName(request.getUserName());
            user.setPassword(request.getPassword());
            user.setRealName(request.getRealName());
            user.setRole(request.getRole());
            user.setStatus(request.getStatus());
            user.setAge(request.getAge());
            user.setSex(request.getSex());
            user.setBirthDay(request.getBirthDay());
            user.setPhone(request.getPhone());
            user.setUserLevel(request.getUserLevel());
            user.setModifyTime(new Date());

            userMapper.updateUser(user);

            return new ApiResponse<>(1, "更新成功", user);
        }
    }
}```

```java
// UserController.java
package com.example.controller;

import com.example.entity.EditUserRequest;
import com.example.entity.ApiResponse;
import com.example.service.UserService;
import com.example.entity.User;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/admin/user")
public class UserController {
    private final UserService userService;

    @Autowired
    public UserController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping("/edit")
    public ApiResponse<User> editUser(@RequestBody EditUserRequest request) {
        return userService.editUser(request);
    }
}
```

```java
// UserMapper.java
package com.example.mapper;

import com.example.entity.User;

import org.apache.ibatis.annotations.Mapper;

@Mapper
public interface UserMapper {
    void insertUser(User user);
    void updateUser(User user);
    User selectUserById(Integer id);
}
```

```xml
<!-- UserMapper.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.UserMapper">
    <resultMap id="UserResultMap" type="com.example.entity.User">
        <id property="id" column="id"/>
        <result property="userUuid" column="user_uuid"/>
        <result property="userName" column="user_name"/>
        <result property="realName" column="real_name"/>
        <result property="password" column="password"/>
        <result property="realName" column="real_name"/>
        <result property="age" column="age"/>
        <result property="sex" column="sex"/>
        <result property="birthDay" column="birth_day"/>
        <result property="userLevel" column="user_level"/>
        <result property="phone" column="phone"/>
        <result property="role" column="role"/>
        <result property="status" column="status"/>
        <result property="imagePath" column="image_path"/>
        <result property="createTime" column="create_time"/>
        <result property="modifyTime" column="modify_time"/>
        <result property="modifyTime" column="modify_time"/>
        <result property="lastActiveTime" column="last_active_time"/>
        <result property="deleted" column="deleted"/>
        <result property="wxOpenId" column="wx_open_id"/>
    </resultMap>
    <insert id="insertUser" parameterType="com.example.entity.User">
        INSERT INTO t_user (user_uuid, user_name, password, real_name, age, sex, birth_day, user_level, phone, role, status, image_path, create_time, modify_time, last_active_time, deleted, wx_open_id)
        VALUES (#{userUuid}, #{userName}, #{password}, #{realName}, #{age}, #{sex}, #{birthDay}, #{userLevel}, #{phone}, #{role}, #{status}, #{imagePath}, #{createTime}, #{modifyTime}, #{lastActiveTime}, #{deleted}, #{wxOpenId})
    </insert>

    <update id="updateUser" parameterType="com.example.entity.User">
        UPDATE t_user
        SET user_uuid = #{userUuid}, user_name = #{userName}, password = #{password}, real_name = #{realName}, age = #{age}, sex = #{sex}, birth_day = #{birthDay}, user_level = #{userLevel}, phone = #{phone}, role = #{role}, status = #{status}, image_path = #{imagePath}, create_time = #{createTime}, modify_time = #{modifyTime}, last_active_time = #{lastActiveTime}, deleted = #{deleted}, wx_open_id = #{wxOpenId}
        WHERE id = #{id}
    </update>

    <select id="selectUserById" parameterType="Integer" resultType="com.example.entity.User" resultMap="UserResultMap">
        SELECT *
        FROM t_user
        WHERE id = #{id}
    </select>
</mapper>

```