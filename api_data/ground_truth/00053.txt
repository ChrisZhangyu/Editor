
```java
// Store.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class Store {
    private Integer id;
    private String category;
    private String number;
    private String level;
    private String page;
    private Integer status;
}
```
```java
// StoreRequest.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class StoreRequest {
    private Integer id;
    private String category;
    private String number;
    private String level;
    private String page;
    private Integer status;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public String getNumber() {
        return number;
    }

    public void setNumber(String number) {
        this.number = number;
    }

    public String getLevel() {
        return level;
    }

    public void setLevel(String level) {
        this.level = level;
    }

    public String getPage() {
        return page;
    }

    public void setPage(String page) {
        this.page = page;
    }

    public Integer getStatus() {
        return status;
    }

    public void setStatus(Integer status) {
        this.status = status;
    }
}
```
```java
// StoreResponse.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class StoreResponse {
    private boolean success;
}
```

```java
// StoreService.java
package com.example.service;

import com.example.entity.StoreRequest;
import com.example.entity.StoreResponse;

public interface StoreService {
    StoreResponse save(StoreRequest request);
}
```

```java
// StoreServiceImpl.java
package com.example.service.impl;

import com.example.entity.Store;
import com.example.entity.StoreRequest;
import com.example.entity.StoreResponse;
import com.example.mapper.StoreMapper;
import com.example.service.StoreService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class StoreServiceImpl implements StoreService {
    private final StoreMapper storeMapper;

    @Autowired
    public StoreServiceImpl(StoreMapper storeMapper) {
        this.storeMapper = storeMapper;
    }

    @Override
    public StoreResponse save(StoreRequest request) {
        StoreResponse response = new StoreResponse();

        // 根据传入的参数检查其在表ssm_store中是否有相同的number或者level是否小于1
        Store existingStore = storeMapper.findByNumber(request.getNumber());
        if (existingStore != null || Integer.parseInt(request.getLevel()) < 1) {
            response.setSuccess(false);
            return response;
        }

        // 根据传入的参数检查表ssm_store中id是否存在
        Store existingStoreById = storeMapper.findById(request.getId());
        if (existingStoreById == null) {
            // id不存在，则插入新商店信息
            Store newStore = new Store(request.getId(), request.getCategory(), request.getNumber(),
                    request.getLevel(), request.getPage(), request.getStatus());
            storeMapper.insert(newStore);
        } else {
            // id存在，则更新现有商店信息
            existingStoreById.setCategory(request.getCategory());
            existingStoreById.setNumber(request.getNumber());
            existingStoreById.setLevel(request.getLevel());
            existingStoreById.setPage(request.getPage());
            existingStoreById.setStatus(request.getStatus());
            storeMapper.update(existingStoreById);
        }

        response.setSuccess(true);
        return response;
    }
}```

```java
// StoreController.java
package com.example.controller;

import com.example.service.StoreService;
import com.example.entity.StoreResponse;
import com.example.entity.StoreRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/store")
public class StoreController {
    private final StoreService storeService;
    
    @Autowired
    public StoreController(StoreService storeService) {
        this.storeService = storeService;
    }
    
    @PostMapping("/save")
    public StoreResponse save(@RequestBody StoreRequest request) {
        return storeService.save(request);
    }
}
```

```java
// StoreMapper.java
package com.example.mapper;

import com.example.entity.Store;

import org.apache.ibatis.annotations.Mapper;

@Mapper
public interface StoreMapper {
    // 根据id查询商店信息
    Store findById(Integer id);
    
    // 插入新商店信息
    void insert(Store store);
    
    // 更新商店信息
    void update(Store store);


    Store findByNumber(String number);
}
```

```xml
<!-- StoreMapper.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.StoreMapper">
    <resultMap id="storeResultMap" type="com.example.entity.Store">
        <id property="id" column="id"/>
        <result property="category" column="category"/>
        <result property="number" column="number"/>
        <result property="level" column="level"/>
        <result property="page" column="page"/>
        <result property="status" column="status"/>
    </resultMap>
    
    <select id="findById" resultMap="storeResultMap">
        SELECT * FROM ssm_store WHERE id = #{id}
    </select>
    <select id="findByNumber" resultMap="storeResultMap">
        SELECT * FROM ssm_store WHERE number = #{number}
    </select>
    
    <insert id="insert">
        INSERT INTO ssm_store (category, number, level, page, status)
        VALUES (#{category}, #{number}, #{level}, #{page}, #{status})
    </insert>
    
    <update id="update">
        UPDATE ssm_store
        SET category = #{category}, number = #{number}, level = #{level}, page = #{page}, status = #{status}
        WHERE id = #{id}
    </update>
</mapper>

```
