```java
// ApiResponse.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ApiResponse {
    private int code;
    private String message;
    private Object data;
}
```

```java
// Cart.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import javax.persistence.*;
import java.util.Date;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "tb_cart")
public class Cart {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "cart_id")
    private Integer cartId;

    @Column(name = "user_id")
    private Integer userId;

    @Column(name = "amount")
    private Double amount;
}
```

```java
// CartDetail.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import javax.persistence.*;
import java.util.Date;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "tb_cart_detail")
public class CartDetail {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "cart_detail_id")
    private Long cartDetailId;

    @Column(name = "cart_id")
    private Long cartId;

    @Column(name = "good_id")
    private Integer goodId;

    @Column(name = "count")
    private Integer count;
}
```

```java
// Good.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import javax.persistence.*;
import java.util.Date;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "tb_good")
public class Good {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "good_id")
    private Integer goodId;

    @Column(name = "category_second_id")
    private Integer categorySecondId;

    @Column(name = "good_name", length = 20)
    private String goodName;

    @Column(name = "image", length = 100)
    private String image;

    @Column(name = "price", precision = 10, scale = 2)
    private Double price;

    @Column(name = "original_price", precision = 10, scale = 2)
    private Double originalPrice;

    @Column(name = "inventory")
    private Integer inventory;

    @Column(name = "sold_count")
    private Integer soldCount;

    @Column(name = "spec", length = 20)
    private String spec;

    @Column(name = "origin", length = 10)
    private String origin;
}
```

```java
// CartService.java
package com.example.service;

import com.example.entity.ApiResponse;

public interface CartService {
    ApiResponse updateCart(int userId, int cartId, int goodId, int count);
}
```

```java
// CartServiceImpl.java
package com.example.service.impl;

import com.example.entity.Cart;
import com.example.entity.CartDetail;
import com.example.mapper.CartMapper;
import com.example.entity.ApiResponse;
import com.example.mapper.GoodMapper;
import com.example.entity.Good;
import com.example.mapper.CartDetailMapper;
import com.example.service.CartService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
@Transactional
public class CartServiceImpl implements CartService {

    private final CartMapper cartMapper;
    private final GoodMapper goodMapper;
    private final CartDetailMapper cartDetailMapper;

    @Autowired
    public CartServiceImpl(CartMapper cartMapper, GoodMapper goodMapper, CartDetailMapper cartDetailMapper) {
        this.cartMapper = cartMapper;
        this.goodMapper = goodMapper;
        this.cartDetailMapper = cartDetailMapper;
    }

    @Override
    public ApiResponse updateCart(int userId, int cartId, int goodId, int count) {
        // 根据cartId在tb_cart表中查询记录
        Cart cart = cartMapper.selectCartById(cartId);
        if (cart == null) {
            return new ApiResponse(-1002, "购物车不存在", null);
        }

        // 判断tb_cart.user_id是否等于userId
        if (cart.getUserId() != userId) {
            return new ApiResponse(-1010, "没有操作权限", null);
        }

        // 根据goodId在tb_good表中查询商品
        Good good = goodMapper.selectGoodById(goodId);
        if (good == null) {
            return new ApiResponse(-1002, "商品不存在", null);
        }

        // 判断tb_good.inventory+count是否小于0
        if (good.getInventory() + count < 0) {
            return new ApiResponse(-1004, "商品库存不足", null);
        }

        // 根据goodId和tb_cart.cart_id在tb_cart_detail表中查询列表
        List<CartDetail> cartDetails = cartDetailMapper.selectCartDetailsByCartId(cart.getCartId(), goodId);
        if (cartDetails.isEmpty() && count <= 0) {
            return new ApiResponse(100, "成功", null);
        }

        // 如果列表为空且输入count大于0，则在表中插入一条记录
        if (cartDetails.isEmpty()) {
            CartDetail newCartDetail = new CartDetail();
            newCartDetail.setCartId(Long.valueOf(cart.getCartId()));
            newCartDetail.setGoodId(good.getGoodId());
            newCartDetail.setCount(count);
            cartDetailMapper.insertCartDetail(newCartDetail);
            cart.setAmount(cart.getAmount() + good.getPrice() * count);
            cartMapper.updateCartAmount(cartId, cart.getAmount());
        } else {
            // 如果列表不为空，则获取列表的第一条记录
            CartDetail cartDetail = cartDetails.get(0);
            // 判断tb_cart_detail.count+count是否小于等于0
            if (cartDetail.getCount() + count <= 0) {
                cart.setAmount(cart.getAmount() - cartDetail.getCount() * good.getPrice());
                cartMapper.updateCartAmount(cartId, cart.getAmount());
                cartDetailMapper.deleteCartDetailById(cartDetail.getCartDetailId());
            } else {
                cartDetail.setCount(cartDetail.getCount() + count);
                cartDetailMapper.updateCartDetailCount(cartDetail.getCartDetailId(), cartDetail.getCount());
                cart.setAmount(cart.getAmount() + good.getPrice() * count);
                cartMapper.updateCartAmount(cartId, cart.getAmount());
            }
        }

        // 返回结果
        List<CartDetail> updatedCartDetails = cartDetailMapper.selectCartDetailsByCartId(cartId, goodId);
        Map<String, Object> resultMap = new HashMap<>();
        resultMap.put("cartId", cart.getCartId());
        resultMap.put("userId", userId);
        resultMap.put("amount", cart.getAmount());
        resultMap.put("goods",updatedCartDetails);
        return new ApiResponse(100, "成功", resultMap);
    }
}
```

```java
// CartController.java
package com.example.controller;

import com.example.entity.ApiResponse;
import com.example.service.CartService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/user/v1/user/{userId}/cart")
public class CartController {

    private final CartService cartService;

    @Autowired
    public CartController(CartService cartService) {
        this.cartService = cartService;
    }

    @PatchMapping("/{cartId}")
    public ApiResponse updateCart(@PathVariable int userId, @PathVariable int cartId, @RequestParam int goodId, @RequestParam int count) {
        return cartService.updateCart(userId, cartId, goodId, count);
    }
}
```

```java
// CartDetailMapper.java
package com.example.mapper;

import com.example.entity.CartDetail;

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;

import java.util.List;

@Mapper
public interface CartDetailMapper {
    List<CartDetail> selectCartDetailsByCartId(@Param("cartId") int cartId, @Param("goodId") int goodId);
    void insertCartDetail(CartDetail cartDetail);
    void updateCartDetailCount(@Param("cartDetailId") long cartDetailId, @Param("count") int count);
    void deleteCartDetailById(@Param("cartDetailId") long cartDetailId);
}
```

```java
// CartMapper.java
package com.example.mapper;

import com.example.entity.Cart;

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;

@Mapper
public interface CartMapper {
    Cart selectCartById(@Param("cartId") int cartId);
    void updateCartAmount(@Param("cartId") int cartId, @Param("amount") double amount);
}
```

```java
// GoodMapper.java
package com.example.mapper;

import com.example.entity.Good;

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;

@Mapper
public interface GoodMapper {
    Good selectGoodById(@Param("goodId") int goodId);
    void updateGoodInventory(@Param("goodId") int goodId, @Param("inventory") int inventory);
}
```

```xml
<!-- CartDetailMapper.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.mapper.CartDetailMapper">

    <select id="selectCartDetailsByCartId" resultType="com.example.entity.CartDetail">
        SELECT * FROM tb_cart_detail WHERE cart_id = #{cartId} AND good_id = #{goodId}
    </select>

    <insert id="insertCartDetail" parameterType="com.example.entity.CartDetail">
        <selectKey keyProperty="cartDetailId" resultType="long" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        INSERT INTO tb_cart_detail (cart_id, good_id, count) VALUES (#{cartId}, #{goodId}, #{count})
    </insert>

    <update id="updateCartDetailCount" parameterType="com.example.entity.CartDetail">
        UPDATE tb_cart_detail SET count = #{count} WHERE cart_detail_id = #{cartDetailId}
    </update>

    <delete id="deleteCartDetailById" parameterType="long">
        DELETE FROM tb_cart_detail WHERE cart_detail_id = #{cartDetailId}
    </delete>

</mapper>
```

```xml
<!-- CartMapper.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.mapper.CartMapper">

    <select id="selectCartById" resultType="com.example.entity.Cart">
        SELECT * FROM tb_cart WHERE cart_id = #{cartId}
    </select>

    <update id="updateCartAmount" parameterType="com.example.entity.Cart">
        UPDATE tb_cart SET amount = #{amount} WHERE cart_id = #{cartId}
    </update>

</mapper>
```

```xml
<!-- GoodMapper.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.mapper.GoodMapper">

    <select id="selectGoodById" resultType="com.example.entity.Good">
        SELECT * FROM tb_good WHERE good_id = #{goodId}
    </select>

    <update id="updateGoodInventory" parameterType="com.example.entity.Good">
        UPDATE tb_good SET inventory = #{inventory} WHERE good_id = #{goodId}
    </update>

</mapper>
```