
```java
// ApiResponse.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ApiResponse {
    private int code;
    private String message;
    private int response;


}
```
```java
// User.java
package com.example.entity;


import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.Date;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class User {
    private int id;
    private String userUuid;
    private String userName;
    private String password;
    private String realName;
    private Integer age;
    private Integer sex;
    private Date birthDay;
    private Integer userLevel;
    private String phone;
    private Integer role;
    private Integer status;
    private String imagePath;
    private Date createTime;
    private Date modifyTime;
    private Date lastActiveTime;
    private Boolean deleted;
    private String wxOpenId;
}
```
```java
// UserStatusChangeRequest.java
package com.example.entity;




import lombok.Data;

@Data
public class UserStatusChangeRequest {
    private int id;
}
```

```java
// UserService.java
package com.example.service;

import com.example.entity.ApiResponse;
import com.example.entity.User;

public interface UserService {
    User getUserById(int id);
    ApiResponse changeStatus(int id);
}
```

```java
// UserServiceImpl.java
package com.example.service.impl;

import com.example.entity.ApiResponse;
import com.example.entity.User;
import com.example.mapper.UserMapper;
import com.example.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;

@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private UserMapper userMapper;

    @Override
    public User getUserById(int id) {
        return userMapper.getUserById(id);
    }

    @Override
    public ApiResponse changeStatus(int id) {
        User user = userMapper.getUserById(id);
        if (user == null) {
            return new ApiResponse(0, "用户不存在", 0);
        }

        int currentStatus = user.getStatus();
        int newStatus = currentStatus == 1 ? 2 : 1;

        user.setStatus(newStatus);
        user.setModifyTime(new Date());

        userMapper.updateUser(user);

        return new ApiResponse(1, "成功", newStatus);
    }
}```

```java
// UserController.java
package com.example.controller;

import com.example.entity.ApiResponse;
import com.example.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/api/admin/user")
public class UserController {
    private final UserService userService;
    @Autowired
    public UserController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping("/changeStatus/{id}")
    public ApiResponse changeStatus(@PathVariable int id) {
        return userService.changeStatus(id);
    }

}
```

```java
// UserMapper.java
package com.example.mapper;

import com.example.entity.User;

public interface UserMapper {
    User getUserById(int id);
    void updateUser(User user);
}
```

```xml
<!-- UserMapper.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.UserMapper">
    <resultMap id="BaseResultMap" type="com.example.entity.User">
        <id column="id" property="id" />
        <result column="user_uuid" property="userUuid" />
        <result column="user_name" property="userName" />
        <result column="password" property="password" />
        <result column="real_name" property="realName" />
        <result column="age" property="age" />
        <result column="sex" property="sex" />
        <result column="birth_day" property="birthDay" />
        <result column="user_level" property="userLevel" />
        <result column="phone" property="phone" />
        <result column="role" property="role" />
        <result column="status" property="status" />
        <result column="image_path" property="imagePath" />
        <result column="create_time" property="createTime" />
        <result column="modify_time" property="modifyTime" />
        <result column="last_active_time" property="lastActiveTime" />
        <result column="deleted" property="deleted" />
        <result column="wx_open_id" property="wxOpenId" />
    </resultMap>
    <select id="getUserById" resultType="com.example.entity.User" resultMap="BaseResultMap">
        SELECT * FROM t_user WHERE id = #{id}
    </select>
    
    <update id="updateUser">
        UPDATE t_user
        SET user_uuid = #{userUuid},
            user_name = #{userName},
            password = #{password},
            real_name = #{realName},
            age = #{age},
            sex = #{sex},
            birth_day = #{birthDay},
            user_level = #{userLevel},
            phone = #{phone},
            role = #{role},
            status = #{status},
            image_path = #{imagePath},
            create_time = #{createTime},
            modify_time = #{modifyTime},
            last_active_time = #{lastActiveTime},
            deleted = #{deleted},
            wx_open_id = #{wxOpenId}
        WHERE id = #{id}
    </update>
</mapper>

```

代码执行的错误信息：
```运行错误

```
```功能错误

```