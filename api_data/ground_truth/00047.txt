```java
// ApiResponse.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ApiResponse {
    private int code;
    private String message;
    private Object data;
}
```

```java
// Comment.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import java.util.Date;

@Entity
@Table(name = "bms_comment")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class Comment {
    @Id
    @Column(name = "id", length = 20)
    private String id;

    @Column(name = "content", length = 1000)
    private String content;

    @Column(name = "user_id", length = 20)
    private String userId;

    @Column(name = "topic_id", length = 20)
    private String topicId;

    @Column(name = "create_time")
    private Date createTime;

    @Column(name = "modify_time")
    private Date modifyTime;
}
```

```java
// CommentDTO.java
package com.example.entity;

import lombok.Data;

@Data
public class CommentDTO {
    private String topic_id;
    private String content;
}
```

```java
// UmsUser.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.util.Date;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class UmsUser {
    /**
     * 用户ID
     */
    private String id;

    /**
     * 用户名
     */
    private String username;

    /**
     * 别名
     */
    private String alias;

    /**
     * 密码
     */
    private String password;

    /**
     * 头像
     */
    private String avatar;

    /**
     * 邮箱
     */
    private String email;

    /**
     * 手机号码
     */
    private String mobile;

    /**
     * 积分
     */
    private int score;

    /**
     * 令牌
     */
    private String token;

    /**
     * 个人简介
     */
    private String bio;

    /**
     * 是否激活
     */
    private boolean active;

    /**
     * 状态
     */
    private boolean status;

    /**
     * 角色ID
     */
    private String roleId;

    /**
     * 创建时间
     */
    private Date createTime;

    /**
     * 修改时间
     */
    private Date modifyTime;
}
```

```java
// CommentService.java
package com.example.service;

import com.example.entity.CommentDTO;

public interface CommentService {
    void addComment(String username, CommentDTO commentDTO);
}
```

```java
// CommentServiceImpl.java
package com.example.service.impl;

import com.example.entity.Comment;
import com.example.entity.CommentDTO;
import com.example.entity.UmsUser;
import com.example.mapper.BmsUserMapper;
import com.example.mapper.CommentMapper;
import com.example.service.CommentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.UUID;

@Service
public class CommentServiceImpl implements CommentService {
    private final BmsUserMapper bmsUserMapper;
    private final CommentMapper commentMapper;

    @Autowired
    public CommentServiceImpl(BmsUserMapper bmsUserMapper, CommentMapper commentMapper) {
        this.bmsUserMapper = bmsUserMapper;
        this.commentMapper = commentMapper;
    }

    @Override
    public void addComment(String username, CommentDTO commentDTO) {
        UmsUser user = bmsUserMapper.getUserByUsername(username);
        if (user != null) {
            Comment comment = new Comment();
            comment.setId(UUID.randomUUID().toString().replace("-", "").substring(0,19));
            comment.setUserId(user.getId());
            comment.setTopicId(commentDTO.getTopic_id());
            comment.setContent(commentDTO.getContent());
            comment.setCreateTime(new Date());
            commentMapper.addComment(comment.getId(), Long.parseLong(user.getId()), commentDTO, comment.getCreateTime());
        }
    }
}
```

```java
// CommentController.java
package com.example.controller;

import com.example.entity.ApiResponse;
import com.example.entity.CommentDTO;
import com.example.service.CommentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Date;

@RestController
@RequestMapping("/comment")
public class CommentController {
    private final CommentService commentService;

    @Autowired
    public CommentController(CommentService commentService) {
        this.commentService = commentService;
    }

    @PostMapping("/add_comment")
    public ResponseEntity<ApiResponse> addComment(@RequestHeader("userName") String userName, @RequestBody CommentDTO commentDTO) {
        commentService.addComment(userName, commentDTO);
        ApiResponse response = new ApiResponse(200, "操作成功", null);
        return new ResponseEntity<>(response, HttpStatus.OK);
    }
}
```

```java
// BmsUserMapper.java
package com.example.mapper;

import com.example.entity.UmsUser;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;

@Mapper
public interface BmsUserMapper {
    @Select("SELECT * FROM ums_user WHERE username = #{username}")
    UmsUser getUserByUsername(@Param("username") String username);
}
```

```java
// CommentMapper.java
package com.example.mapper;

import com.example.entity.CommentDTO;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;

import java.util.Date;

@Mapper
public interface CommentMapper {
    @Insert("INSERT INTO bms_comment (id, user_id, topic_id, content, create_time) VALUES (#{id}, #{userId}, #{commentDTO.topic_id}, #{commentDTO.content}, #{createTime})")
    void addComment(@Param("id") String id, @Param("userId") long userId, @Param("commentDTO") CommentDTO commentDTO, @Param("createTime") Date createTime);
}
```