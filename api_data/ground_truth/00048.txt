```java
// ApiResponse.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ApiResponse {
    private int code;
    private String message;
    private Object data;
}
```

```java
// BmsPostTag.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.*;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "bms_post_tag")
public class BmsPostTag {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;

    @Column(name = "tag_id", length = 20)
    private String tagId;

    @Column(name = "topic_id", length = 20)
    private String topicId;
}
```

```java
// BmsTag.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.*;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "bms_tag")
public class BmsTag {
    @Id
    @Column(name = "id", length = 20)
    private String id;

    @Column(name = "name")
    private String name;

    @Column(name = "topic_count")
    private int topicCount;
}
```

```java
// Post.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.*;
import java.util.Date;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "bms_post")
public class Post {
    @Id
    @Column(name = "id", length = 20)
    private String id;

    @Column(name = "title")
    private String title;

    @Column(name = "content", columnDefinition = "longtext")
    private String content;

    @Column(name = "user_id", length = 20)
    private String userId;

    @Column(name = "comments")
    private int comments;

    @Column(name = "collects")
    private int collects;

    @Column(name = "view")
    private int view;

    @Column(name = "top")
    private boolean top;

    @Column(name = "essence")
    private boolean essence;

    @Column(name = "section_id")
    private String sectionId;

    @Column(name = "create_time")
    private Date createTime;

    @Column(name = "modify_time")
    private Date modifyTime;
}
```

```java
// PostRequest.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class PostRequest {
    private String title;
    private String content;
    private String[] tags;
}
```

```java
// UmsUser.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.util.Date;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class UmsUser {
    private String id;
    private String username;
    private String alias;
    private String password;
    private String avatar;
    private String email;
    private String mobile;
    private int score;
    private String token;
    private String bio;
    private boolean active;
    private boolean status;
    private String roleId;
    private Date createTime;
    private Date modifyTime;
}
```

```java
// PostService.java
package com.example.service;

import com.example.entity.ApiResponse;
import com.example.entity.Post;

public interface PostService {
    ApiResponse createPost(String userName, String title, String content, String[] tags);
    // 其他帖子相关的服务方法
}
```

```java
// PostServiceImpl.java
package com.example.service.impl;

import com.example.entity.*;
import com.example.mapper.BmsPostTagMapper;
import com.example.mapper.PostMapper;
import com.example.mapper.BmsTagMapper;
import com.example.mapper.UmsUserMapper;
import com.example.service.PostService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.Date;

@Service
public class PostServiceImpl implements PostService {

    @Autowired
    private UmsUserMapper userMapper;

    @Autowired
    private PostMapper postMapper;

    @Autowired
    private BmsTagMapper tagMapper;

    @Autowired
    private BmsPostTagMapper postTagMapper;

    @Override
    @Transactional
    public ApiResponse createPost(String userName, String title, String content, String[] tags) {
        // 在ums_user表中查询用户
        UmsUser user = userMapper.getUserByUsername(userName);
        if (user == null) {
            return new ApiResponse(400, "用户不存在", null);
        }

        // 在bms_post表中查询帖子
        Post existingPost = postMapper.getPostByTitle(title);
        if (existingPost != null) {
            return new ApiResponse(400, "话题已存在，请修改", null);
        }

        // 将ums_user.user_id、title、content插入到bms_post表中
        Post newPost = new Post();
        newPost.setId("1354872310506489251");
        newPost.setTitle(title);
        newPost.setContent(content);
        newPost.setUserId(user.getId());
        newPost.setCreateTime(new Date());
        postMapper.createPost(newPost);

        // 更新ums_user表中用户对象的积分加1
        user.setScore(user.getScore() + 1);
        userMapper.updateUser(user);

        // 判断输入tags是否为空
        if (tags != null && tags.length > 0) {
            for (String tagName : tags) {
                // 在bms_tag表中查找与name相等的记录
                BmsTag tag = tagMapper.getTagByName(tagName);
                if (tag == null) {
                    // 如果记录为空，则根据输入参数创建对象插入到bms_tag表中
                    tag = new BmsTag();
                    tag.setName(tagName);
                    tag.setId("1349631541306732556");
                    tagMapper.createTag(tag);
                } else {
                    // 如果记录不为空，更新topic_count对象加1
                    tag.setTopicCount(tag.getTopicCount() + 1);
                    tagMapper.updateTag(tag);
                }

                // 将bms_post_tag表中的记录与话题关联
                BmsPostTag postTag = new BmsPostTag();
                postTag.setTagId(tag.getId());
                postTag.setTopicId(newPost.getId());
                postTagMapper.createPostTag(postTag);
            }
        }

        return new ApiResponse(200, "操作成功", newPost);
    }

    // 其他帖子相关的服务方法的实现
}
```

```java
// PostController.java
package com.example.controller;

import com.example.entity.ApiResponse;
import com.example.entity.PostRequest;
import com.example.service.PostService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class PostController {

    @Autowired
    private PostService postService;

    @PostMapping("/post/create")
    public ApiResponse createPost(@RequestHeader("userName") String userName, @RequestBody PostRequest request) {
        return postService.createPost(userName, request.getTitle(), request.getContent(), request.getTags());
    }

    // 其他帖子相关的请求处理方法
}
```

```java
// BmsPostTagMapper.java
package com.example.mapper;

import com.example.entity.BmsPostTag;
import com.example.entity.BmsTag;

public interface BmsPostTagMapper {
   void createPostTag(BmsPostTag postTag);
}
```

```java
// BmsTagMapper.java
package com.example.mapper;

import com.example.entity.BmsTag;

public interface BmsTagMapper {
    BmsTag getTagByName(String tagName);

    void createTag(BmsTag tag);

    void updateTag(BmsTag tag);
}
```

```java
// PostMapper.java
package com.example.mapper;

import com.example.entity.Post;

public interface PostMapper {
    Post getPostByTitle(String title);
    void createPost(Post newPost);
}
```

```java
// UmsUserMapper.java
package com.example.mapper;

import com.example.entity.UmsUser;

public interface UmsUserMapper {
    UmsUser getUserByUsername(String username);

    void updateUser(UmsUser user);
}
```

```xml
<!-- BmsPostTagMapper.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.mapper.BmsPostTagMapper">

    <select id="createPostTag" parameterType="com.example.entity.BmsPostTag">
        INSERT INTO bms_post_tag (id, tag_id, topic_id)
        VALUES (#{id}, #{tagId}, #{topicId})
    </select>

</mapper>
```

```xml
<!-- BmsTagMapper.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.mapper.BmsTagMapper">

    <resultMap type="com.example.entity.BmsTag" id="ArticleResult">
        <result property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="topicCount" column="topic_count"/>
    </resultMap>

    <select id="getTagByName" resultMap="ArticleResult">
        SELECT * FROM bms_tag WHERE name = #{tagName};
    </select>

    <select id="createTag" parameterType="com.example.entity.BmsTag">
        INSERT INTO bms_tag (id, name, topic_count)
        VALUES (#{id}, #{name}, #{topicCount})
    </select>

    <update id="updateTag" parameterType="com.example.entity.BmsTag">
        UPDATE bms_tag
        SET name = #{name},
        topic_count = #{topicCount}
        WHERE id = #{id}
    </update>

</mapper>
```

```xml
<!-- PostMapper.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.mapper.PostMapper">

    <select id="getPostByTitle" parameterType="map" resultType="com.example.entity.Post">
        SELECT * FROM bms_post WHERE title = #{title};
    </select>

    <select id="createPost" parameterType="com.example.entity.Post">
        INSERT INTO bms_post (id, title, content, user_id, comments, collects, view, top, essence, section_id, create_time, modify_time)
        VALUES (#{id}, #{title}, #{content}, #{userId}, #{comments}, #{collects}, #{view}, #{top}, #{essence}, #{sectionId}, #{createTime}, #{modifyTime})
    </select>

</mapper>
```

```xml
<!-- UmsUserMapper.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.mapper.UmsUserMapper">

    <select id="getUserByUsername" parameterType="map" resultType="com.example.entity.UmsUser">
        SELECT * FROM ums_user WHERE username = #{username};
    </select>

    <update id="updateUser" parameterType="com.example.entity.UmsUser">
        UPDATE ums_user
        SET username = #{username},
        password = #{password},
        alias = #{alias},
        avatar = #{avatar},
        email = #{email},
        mobile = #{mobile},
        score = #{score},
        token = #{token},
        bio = #{bio},
        active = #{active},
        status = #{status},
        role_id = #{roleId},
        create_time = #{createTime},
        modify_time = #{modifyTime}
        WHERE id = #{id}
    </update>

</mapper>
```