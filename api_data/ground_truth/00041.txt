```java
// ApiResponse.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ApiResponse<T> {
    private int code;
    private String message;
    private T data;
}
```

```java
// RegisterDTO.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class RegisterDTO {
    private String name;
    private String pass;
    private String checkPass;
    private String email;
}
```

```java
// UmsUser.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.util.Date;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class UmsUser {
    /**
     * 用户ID
     */
    private String id;

    /**
     * 用户名
     */
    private String username;

    /**
     * 别名
     */
    private String alias;

    /**
     * 密码
     */
    private String password;

    /**
     * 头像
     */
    private String avatar;

    /**
     * 邮箱
     */
    private String email;

    /**
     * 手机号码
     */
    private String mobile;

    /**
     * 积分
     */
    private int score;

    /**
     * 令牌
     */
    private String token;

    /**
     * 个人简介
     */
    private String bio;

    /**
     * 是否激活
     */
    private boolean active;

    /**
     * 状态
     */
    private boolean status;

    /**
     * 角色ID
     */
    private String roleId;

    /**
     * 创建时间
     */
    private Date createTime;

    /**
     * 修改时间
     */
    private Date modifyTime;
}
```

```java
// UserService.java
package com.example.service;

import com.example.entity.ApiResponse;
import com.example.entity.UmsUser;

public interface UserService {
    ApiResponse<UmsUser> registerUser(String name, String pass, String checkPass, String email);
}
```

```java
// UserServiceImpl.java
package com.example.service.impl;

import com.example.entity.ApiResponse;
import com.example.entity.UmsUser;
import com.example.mapper.UmsUserMapper;
import com.example.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private UmsUserMapper umsUserMapper;

    @Override
    public ApiResponse<UmsUser> registerUser(String name, String pass, String checkPass, String email) {
        // 在ums_user表中查询用户
        Map<String, Object> params = new HashMap<>();
        params.put("username", name);
        params.put("email", email);

        UmsUser existingUser = umsUserMapper.findByUsernameOrEmail(params);
        if (existingUser != null) {
            return new ApiResponse<>(400, "账号已存在", null);
        }
        // 对密码进行加密
        String encryptedPassword = encryptPassword(pass);

        // 创建新用户
        UmsUser newUser = new UmsUser();
        newUser.setId(UUID.randomUUID().toString().replace("-", "").substring(0,19));
        newUser.setUsername(name);
        newUser.setPassword(encryptedPassword);
        newUser.setAlias(name);
        newUser.setCreateTime(new Date());
        newUser.setStatus(true);
        newUser.setEmail(email);

        // 将新用户插入到ums_user表中
        umsUserMapper.insert(newUser);

        return new ApiResponse<>(200, "操作成功", newUser);
    }

    private String encryptPassword(String password) {
        // 使用MD5算法进行加密
        try {
            MessageDigest digest = MessageDigest.getInstance("md5");
            byte[] bs = digest.digest(password.getBytes());
            String encryptedPassword = "";
            for (byte b : bs) {
                int temp = b & 255;
                if (temp < 16 && temp >= 0) {
                    encryptedPassword = encryptedPassword + "0" + Integer.toHexString(temp);
                } else {
                    encryptedPassword = encryptedPassword + Integer.toHexString(temp);
                }
            }
            return encryptedPassword;
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }
        return "";
    }
}
```

```java
// UserController.java
package com.example.controller;

import com.example.entity.ApiResponse;
import com.example.entity.RegisterDTO;
import com.example.entity.UmsUser;
import com.example.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/ums/user")
public class UserController {

    @Autowired
    private UserService userService;

    @PostMapping("/register")
    public ApiResponse<UmsUser> registerUser(@RequestBody RegisterDTO registerDTO) {
        return userService.registerUser(registerDTO.getName(), registerDTO.getPass(), registerDTO.getCheckPass(), registerDTO.getEmail());
    }
}
```

```java
// UmsUserMapper.java
package com.example.mapper;

import com.example.entity.UmsUser;

import java.util.Map;

public interface UmsUserMapper {
    UmsUser findByUsernameOrEmail(Map<String, Object> params);
    void insert(UmsUser user);
}
```

```xml
<!-- UmsUserMapper.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.mapper.UmsUserMapper">

    <select id="findByUsernameOrEmail" parameterType="map" resultType="com.example.entity.UmsUser">
        SELECT * FROM ums_user WHERE username = #{username} OR email = #{email}
    </select>

    <insert id="insert" parameterType="com.example.entity.UmsUser">
        INSERT INTO ums_user (id, username, alias, password, email, status, create_time)
        VALUES (#{id}, #{username}, #{alias}, #{password}, #{email}, #{status}, #{createTime})
    </insert>

</mapper>
```