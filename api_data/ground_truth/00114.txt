```java
// ApiResponse.java
package com.example.entity;


import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ApiResponse<T> {
    private int code;
    private String message;
    private T response;
}
```
```java
// UpdateUserRequest.java
package com.example.entity;


import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.Date;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class UpdateUserRequest {
    private int id;
    private String userUuid;
    private String userName;
    private String realName;
    private int age;
    private int role;
    private int sex;
    private Date birthDay;
    private String phone;
    private Date lastActiveTime;
    private Date createTime;
    private Date modifyTime;
    private int status;
    private Integer userLevel;
    private String imagePath;
}
```
```java
// User.java
package com.example.entity;


import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.Date;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class User {
    private int id;
    private String userUuid;
    private String userName;
    private String password;
    private String realName;
    private int age;
    private int sex;
    private Date birthDay;
    private int userLevel;
    private String phone;
    private int role;
    private int status;
    private String imagePath;
    private Date createTime;
    private Date modifyTime;
    private Date lastActiveTime;
    private boolean deleted;
    private String wxOpenId;
}
```

```java
// UserService.java
package com.example.service;

import com.example.entity.UpdateUserRequest;
import com.example.entity.User;
import com.example.mapper.UserMapper;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class UserService {
    private final UserMapper userMapper;

    @Autowired
    public UserService(UserMapper userMapper) {
        this.userMapper = userMapper;
    }

    public int updateByIdFilter(UpdateUserRequest updateUserRequest) {
        return userMapper.updateByIdFilter(updateUserRequest);
    }
}
```


```java
// UserController.java
package com.example.controller;

import com.example.service.UserService;
import com.example.entity.UpdateUserRequest;
import com.example.entity.ApiResponse;
import com.example.entity.User;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Date;

@RestController
@RequestMapping("/api/admin/user")
public class UserController {
    private final UserService userService;

    @Autowired
    public UserController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping("/update")
    public ResponseEntity<ApiResponse<Object>> updateUser(@RequestBody UpdateUserRequest request) {
        if (request.getRealName() == null || request.getPhone() == null) {
            return ResponseEntity.badRequest().body(new ApiResponse<>(400, "realName and phone cannot be null", null));
        }

        int count = userService.updateByIdFilter(request);
        if (count == 0) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new ApiResponse<>(404, "User not found", null));
        }

        userService.updateByIdFilter(request);

        return ResponseEntity.ok(new ApiResponse<>(1, "Success", null));
    }
}
```

```java
// UserMapper.java
package com.example.mapper;

import com.example.entity.UpdateUserRequest;
import com.example.entity.User;

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;

@Mapper
public interface UserMapper {
    int updateByIdFilter(@Param("user") UpdateUserRequest updateUserRequest);
}
```

```xml
<!-- UserMapper.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.mapper.UserMapper">
    <resultMap id="BaseResultMap" type="com.example.entity.User">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="user_uuid" jdbcType="VARCHAR" property="userUuid" />
        <result column="user_name" jdbcType="VARCHAR" property="userName" />
        <result column="password" jdbcType="VARCHAR" property="password" />
        <result column="real_name" jdbcType="VARCHAR" property="realName" />
        <result column="age" jdbcType="INTEGER" property="age" />
        <result column="sex" jdbcType="INTEGER" property="sex" />
        <result column="birth_day" jdbcType="TIMESTAMP" property="birthDay" />
        <result column="user_level" jdbcType="INTEGER" property="userLevel" />
        <result column="phone" jdbcType="VARCHAR" property="phone" />
        <result column="role" jdbcType="INTEGER" property="role" />
        <result column="status" jdbcType="INTEGER" property="status" />
        <result column="image_path" jdbcType="VARCHAR" property="imagePath" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
        <result column="modify_time" jdbcType="TIMESTAMP" property="modifyTime" />
        <result column="last_active_time" jdbcType="TIMESTAMP" property="lastActiveTime" />
        <result column="deleted" jdbcType="BIT" property="deleted" />
        <result column="wx_open_id" jdbcType="VARCHAR" property="wxOpenId" />
    </resultMap>
    <update id="updateByIdFilter">
        UPDATE t_user
        SET
        user_uuid = #{user.userUuid},
        user_name = #{user.userName},
        real_name = #{user.realName},
        age = #{user.age},
        sex = #{user.sex},
        birth_day = #{user.birthDay},
        user_level = #{user.userLevel},
        phone = #{user.phone},
        role = #{user.role},
        status = #{user.status},
        image_path = #{user.imagePath},
        create_time = #{user.createTime},
        modify_time = #{user.modifyTime},
        last_active_time = #{user.lastActiveTime}
        WHERE id = #{user.id}
    </update>
</mapper>

```

