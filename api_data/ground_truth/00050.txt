```java
// ApiResponse.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ApiResponse {
    private int code;
    private String message;
    private Object data;
}
```

```java
// BmsPostTag.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import javax.persistence.*;
import java.util.Date;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "bms_post_tag")
public class BmsPostTag {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long id;

    @Column(name = "tag_id", length = 20)
    private String tagId;

    @Column(name = "topic_id", length = 20)
    private String topicId;
}
```

```java
// BmsTag.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import javax.persistence.*;
import java.util.Date;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "bms_tag")
public class BmsTag {
    @Id
    @Column(name = "id", length = 20)
    private String id;

    @Column(name = "name")
    private String name;

    @Column(name = "topic_count")
    private int topicCount;
}
```

```java
// CreateTopicDTO.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class CreateTopicDTO {
    private String title;
    private String content;
    private List<String> tags;
}
```

```java
// PostService.java
package com.example.service;

import com.example.entity.ApiResponse;
import com.example.entity.CreateTopicDTO;

public interface PostService {
    ApiResponse createPost(String postId, CreateTopicDTO createTopicDTO);
}
```

```java
// PostServiceImpl.java
package com.example.service.impl;

import com.example.entity.ApiResponse;
import com.example.entity.BmsTag;
import com.example.entity.CreateTopicDTO;
import com.example.entity.BmsPostTag;
import com.example.mapper.PostTagMapper;
import com.example.mapper.TagMapper;
import com.example.service.PostService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.UUID;

@Service
public class PostServiceImpl implements PostService {

    private final TagMapper tagMapper;
    private final PostTagMapper postTagMapper;

    @Autowired
    public PostServiceImpl(TagMapper tagMapper, PostTagMapper postTagMapper) {
        this.tagMapper = tagMapper;
        this.postTagMapper = postTagMapper;
    }

    @Override
    @Transactional
    public ApiResponse createPost(String postId, CreateTopicDTO createTopicDTO) {
        // 判断输入tags是否为空
        if (createTopicDTO.getTags() != null && !createTopicDTO.getTags().isEmpty()) {
            // 遍历tags
            for (String tagName : createTopicDTO.getTags()) {
                // 在bms_tag表中查找与name相等的记录
                BmsTag tag = tagMapper.getTagByName(tagName);
                if (tag == null) {
                    // 如果记录为空，则根据输入参数创建对象插入到bms_tag表中
                    tag = new BmsTag();
                    tag.setId(generateId());
                    tag.setName(tagName);
                    tagMapper.insertTag(tag);
                } else {
                    // 如果记录不为空，更新topic_count对象加1
                    tag.setTopicCount(tag.getTopicCount() + 1);
                    tagMapper.updateTag(tag);
                }

                // 在bms_post_tag表中进行删除操作，删除条件是topic_id与输入postId相等
                postTagMapper.deletePostTagByPostId(postId);

                // 将tag列表插入到bms_post_tag表中
                BmsPostTag postTag = new BmsPostTag();
                postTag.setTopicId(postId);
                postTag.setTagId(tag.getId());
                postTagMapper.insertPostTag(postTag);
            }
        }

        // 返回信息data设置为{bms_post_tag的记录}
        List<BmsPostTag> postTags = postTagMapper.getPostTagsByPostId(postId);
        return new ApiResponse(200, "操作成功", postTags);
    }

    private String generateId() {
        // 生成长度为19且只包含数字的字符串
        String uuid = UUID.randomUUID().toString().replaceAll("-", "");
        // 将字母映射成数字
        String numericUuid = uuid.replaceAll("[a-fA-F]", "1")
                .replaceAll("[g-zG-Z]", "2");
        String uniqueId = numericUuid.substring(0, 19);
        return uniqueId;
    }
}
```

```java
// PostController.java
package com.example.controller;

import com.example.entity.CreateTopicDTO;
import com.example.entity.ApiResponse;
import com.example.service.PostService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class PostController {

    private final PostService postService;

    @Autowired
    public PostController(PostService postService) {
        this.postService = postService;
    }

    @PostMapping("/post/create")
    public ResponseEntity<ApiResponse> createPost(
            @RequestHeader("postId") String postId,
            @RequestBody CreateTopicDTO createTopicDTO) {
        ApiResponse response = postService.createPost(postId, createTopicDTO);
        return new ResponseEntity<>(response, HttpStatus.OK);
    }
}
```

```java
// PostTagMapper.java
package com.example.mapper;

import com.example.entity.BmsPostTag;

import java.util.List;

public interface PostTagMapper {
    void deletePostTagByPostId(String postId);
    List<BmsPostTag> getPostTagsByPostId(String postId);
    void insertPostTag(BmsPostTag postTag);
    // 其他操作数据库的方法
}
```

```java
// TagMapper.java
package com.example.mapper;

import com.example.entity.BmsTag;

public interface TagMapper {
    BmsTag getTagByName(String name);
    void insertTag(BmsTag tag);
    void updateTag(BmsTag tag);
    // 其他操作数据库的方法
}
```

```xml
<!-- PostTagMapper.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.mapper.PostTagMapper">
    <!-- 其他操作数据库的SQL语句 -->

    <resultMap type="com.example.entity.BmsPostTag" id="ArticleResult">
        <result property="id" column="id"/>
        <result property="tagId" column="tag_id"/>
        <result property="topicId" column="topic_id"/>
    </resultMap>

    <select id="getPostTagsByPostId" parameterType="java.lang.String" resultMap="ArticleResult">
        SELECT * FROM bms_post_tag WHERE topic_id = #{topicId}
    </select>

    <delete id="deletePostTagByPostId" parameterType="com.example.entity.BmsPostTag">
        DELETE FROM bms_post_tag WHERE topic_id = #{topicId}
    </delete>

    <select id="insertPostTag" parameterType="com.example.entity.BmsPostTag">
        INSERT INTO bms_post_tag (id, tag_id, topic_id)
        VALUES (#{id}, #{tagId}, #{topicId})
    </select>

</mapper>
```

```xml
<!-- TagMapper.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.mapper.TagMapper">
    <!-- 其他操作数据库的SQL语句 -->

    <resultMap type="com.example.entity.BmsTag" id="ArticleResult">
        <result property="id" column="id"/>
        <result property="name" column="name"/>
        <result property="topicCount" column="topic_count"/>
    </resultMap>

    <select id="getTagByName" parameterType="java.lang.String" resultMap="ArticleResult">
        SELECT * FROM bms_tag WHERE name = #{name}
    </select>

    <select id="insertTag" parameterType="com.example.entity.BmsTag">
        INSERT INTO bms_tag (id, name, topic_count)
        VALUES (#{id}, #{name}, #{topicCount})
    </select>

    <update id="updateTag" parameterType="com.example.entity.BmsTag">
        UPDATE bms_tag
        SET name = #{name},
        topic_count = #{topicCount}
        WHERE id = #{id}
    </update>
</mapper>
```
