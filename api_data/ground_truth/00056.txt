
```java
// LoginRequest.java
package com.example.entity;


import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class LoginRequest {
    private String username;
    private String password;
}
```
```java
// LoginResponse.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class LoginResponse {
    private boolean success;
    private String message;
    private Integer id;
    private String userName;
}
```
```java
// User.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class User {
    private Integer id;
    private String userName;
    private String password;
    private String roleName;
}
```

```java
// UserService.java
package com.example.service;

import com.example.entity.LoginResponse;
import com.example.entity.LoginRequest;

public interface UserService {
    LoginResponse login(LoginRequest request);
}
```

```java
// UserServiceImpl.java
package com.example.service.impl;

import com.example.entity.LoginRequest;
import com.example.entity.LoginResponse;
import com.example.entity.User;
import com.example.mapper.UserMapper;
import com.example.service.UserService;
import org.springframework.stereotype.Service;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

@Service
public class UserServiceImpl implements UserService {
    private final UserMapper userMapper;

    public UserServiceImpl(UserMapper userMapper) {
        this.userMapper = userMapper;
    }

    @Override
    public LoginResponse login(LoginRequest request) {
        User user = userMapper.findByUserName(request.getUsername());
        if (user == null) {
            return new LoginResponse(false, "请认真核对账号、密码！", null, null);
        }
        String encryptedPassword = encryptPassword(request.getPassword());
        if (!user.getPassword().equals(encryptedPassword)) {
            return new LoginResponse(false, "请认真核对账号、密码！", null, null);
        }
        return new LoginResponse(true, "登录成功！", user.getId(), user.getUserName());
    }

    private String encryptPassword(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] hash = md.digest(password.getBytes());
            StringBuilder sb = new StringBuilder();
            for (byte b : hash) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }
}```

```java
// UserController.java
package com.example.controller;

import com.example.service.UserService;
import com.example.entity.LoginResponse;
import com.example.entity.LoginRequest;

import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/user")
public class UserController {
    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping("/login")
    public LoginResponse login(@RequestBody LoginRequest request) {
        return userService.login(request);
    }
}
```

```java
// UserMapper.java
package com.example.mapper;

import com.example.entity.User;
import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan("com.example.mapper")
public interface UserMapper{
    User findByUserName(String userName);
}
```

```xml
<!-- UserMapper.xml -->
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.UserMapper">
    <resultMap type="com.example.entity.User" id="UserResult">
        <result property="id" column="id"/>
        <result property="userName" column="userName"/>
        <result property="password" column="password"/>
        <result property="roleName" column="roleName"/>
    </resultMap>
    <select id="findByUserName" resultType="com.example.entity.User" resultMap="UserResult">
        SELECT * FROM ssm_user WHERE userName = #{userName}
    </select>
</mapper>
```