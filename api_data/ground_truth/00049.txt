```java
// ApiResponse.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ApiResponse {
    private int code;
    private String message;
    private Object data;
}
```

```java
// CreateTopicDTO.java
package com.example.entity;

import lombok.Data;

import java.util.List;

@Data
public class CreateTopicDTO {
    private String title;
    private String content;
    private List<String> tags;
}
```

```java
// Post.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import javax.persistence.*;

import java.util.Date;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "bms_post")
public class Post {
    @Id
    @Column(name = "id", length = 20)
    private String id;

    @Column(name = "title")
    private String title;

    @Column(name = "content", columnDefinition = "longtext")
    private String content;

    @Column(name = "user_id", length = 20)
    private String userId;

    @Column(name = "comments")
    private int comments;

    @Column(name = "collects")
    private int collects;

    @Column(name = "view")
    private int view;

    @Column(name = "top")
    private boolean top;

    @Column(name = "essence")
    private boolean essence;

    @Column(name = "section_id")
    private String sectionId;

    @Column(name = "create_time")
    private Date createTime;

    @Column(name = "modify_time")
    private Date modifyTime;
}
```

```java
// UmsUser.java
package com.example.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import java.util.Date;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class UmsUser {
    /**
     * 用户ID
     */
    private String id;

    /**
     * 用户名
     */
    private String username;

    /**
     * 别名
     */
    private String alias;

    /**
     * 密码
     */
    private String password;

    /**
     * 头像
     */
    private String avatar;

    /**
     * 邮箱
     */
    private String email;

    /**
     * 手机号码
     */
    private String mobile;

    /**
     * 积分
     */
    private int score;

    /**
     * 令牌
     */
    private String token;

    /**
     * 个人简介
     */
    private String bio;

    /**
     * 是否激活
     */
    private boolean active;

    /**
     * 状态
     */
    private boolean status;

    /**
     * 角色ID
     */
    private String roleId;

    /**
     * 创建时间
     */
    private Date createTime;

    /**
     * 修改时间
     */
    private Date modifyTime;
}
```

```java
// PostService.java
package com.example.service;

import com.example.entity.Post;
import com.example.entity.UmsUser;

public interface PostService {
    UmsUser getUserByUsername(String username);
    Post getPostByTitle(String title);
    void createPost(UmsUser user, String title, String content);
    void updateUserPoints(UmsUser user);
}
```

```java
// PostServiceImpl.java
package com.example.service.impl;

import com.example.entity.UmsUser;
import com.example.entity.Post;
import com.example.mapper.UserMapper;
import com.example.mapper.PostMapper;

import com.example.service.PostService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.UUID;

@Service
public class PostServiceImpl implements PostService {

    @Autowired
    private UserMapper userMapper;

    @Autowired
    private PostMapper postMapper;

    @Override
    public UmsUser getUserByUsername(String username) {
        return userMapper.getUserByUsername(username);
    }

    @Override
    public Post getPostByTitle(String title) {
        return postMapper.getPostByTitle(title);
    }

    @Override
    public void createPost(UmsUser user, String title, String content) {
        Post post = new Post();
        post.setId(generateId());
        post.setUserId(user.getId());
        post.setTitle(title);
        post.setContent(content);
        post.setCreateTime(new Date());

        postMapper.createPost(post);
    }

    @Override
    public void updateUserPoints(UmsUser user) {
        user.setScore(user.getScore() + 1);
        userMapper.updateUser(user);
    }

    private String generateId() {
        // 生成长度为19且只包含数字的字符串
        String uuid = UUID.randomUUID().toString().replaceAll("-", "");
        // 将字母映射成数字
        String numericUuid = uuid.replaceAll("[a-fA-F]", "1")
                .replaceAll("[g-zG-Z]", "2");
        String uniqueId = numericUuid.substring(0, 19);
        return uniqueId;
    }
}
```

```java
// PostController.java
package com.example.controller;

import com.example.entity.CreateTopicDTO;
import com.example.entity.UmsUser;
import com.example.entity.Post;
import com.example.service.PostService;
import com.example.entity.ApiResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/post")
public class PostController {

    @Autowired
    private PostService postService;

    @PostMapping("/create")
    public ApiResponse createPost(@RequestHeader("userName") String userName, @RequestBody CreateTopicDTO createTopicDTO) {
        UmsUser user = postService.getUserByUsername(userName);
        if (user == null) {
            return new ApiResponse(400, "用户不存在", null);
        }

        String title = createTopicDTO.getTitle();
        Post existingPost = postService.getPostByTitle(title);
        if (existingPost != null) {
            return new ApiResponse(400, "话题已存在，请修改", null);
        }

        String content = createTopicDTO.getContent();
        postService.createPost(user, title, content);
        postService.updateUserPoints(user);

        Post newPost = postService.getPostByTitle(title);
        return new ApiResponse(200, "操作成功", newPost);
    }
}
```

```java
// PostMapper.java
package com.example.mapper;

import com.example.entity.Post;

public interface PostMapper {
    Post getPostByTitle(String title);
    void createPost(Post post);
}
```

```java
// UserMapper.java
package com.example.mapper;

import com.example.entity.UmsUser;

public interface UserMapper {
    UmsUser getUserByUsername(String username);
    void updateUser(UmsUser user);
}
```

```xml
<!-- PostMapper.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.mapper.PostMapper">
    <select id="getPostByTitle" resultType="com.example.entity.Post">
        SELECT * FROM bms_post WHERE title = #{title}
    </select>

    <insert id="createPost">
        INSERT INTO bms_post (id, user_id, title, content, create_time)
        VALUES (#{id}, #{userId}, #{title}, #{content}, #{createTime})
    </insert>
</mapper>
```

```xml
<!-- UserMapper.xml -->
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.mapper.UserMapper">
    <select id="getUserByUsername" parameterType="map" resultType="com.example.entity.UmsUser">
        SELECT * FROM ums_user WHERE username = #{username};
    </select>

    <update id="updateUser" parameterType="com.example.entity.UmsUser">
        UPDATE ums_user
        SET username = #{username},
        password = #{password},
        alias = #{alias},
        avatar = #{avatar},
        email = #{email},
        mobile = #{mobile},
        score = #{score},
        token = #{token},
        bio = #{bio},
        active = #{active},
        status = #{status},
        role_id = #{roleId},
        create_time = #{createTime},
        modify_time = #{modifyTime}
        WHERE id = #{id}
    </update>
</mapper>
```