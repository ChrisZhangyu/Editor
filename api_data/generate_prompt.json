[
  {"task": "00001", "sql_prompt": "1. 表名ssm_article; (id(int(4)),article_title(varchar(100)),article_create_date(varchar(50)),article_content(text),is_top(int(4)),add_name(varchar(50))).", "logic_prompt": "1. 文章列表: GET /article/list; application/x-www-form-urlencoded; 请求参数(page, rows, article={\"id\":\"\",\"articleTitle\":\"\",\"articleCreateDate\":\"\",\"articleContent\":\"\",\"articleClassID\":0,\"isTop\":0,\"addName\":\"\"}); ApiRespone{\"code\": 1,\"message\": \"成功\",\"response\": {}}.\n2. 如果输入page和row不为空，则创建包含page、pageSize、start属性的分页pageBean，获取start的值为pageBean的start，size的值为pageBean的pageSize；根据输入参数article在ssm_article表中查询articleList，查询条件是：判断article的articleTitle是否为空，如果不为空则根据article_title进行模糊匹配查询；判断start和size是否为空，如果不为空，则对查询结果进行分页，从start开始获取size条记录；将articleList转换为 JSON 格式赋值给response返回."},
  {"task": "00002", "sql_prompt": "1. 表名ssm_article; (id(int(4)),article_title(varchar(100)),article_create_date(varchar(50)),article_content(text),is_top(int(4)),add_name(varchar(50))).", "logic_prompt": "1. 文章保存: POST /article/save; application/json; 请求参数{\"id\":\"\",\"articleTitle\":\"\",\"articleCreateDate\":\"\",\"articleContent\":\"\",\"articleClassID\":0,\"isTop\":0,\"addName\":\"\"}; ApiRespone{\"code\":1, \"message\":\"成功\",\"response\":[{}]}.\n2. 如果参数articleTitle、articleContent不空、articleContent的长度小于50000、ssm_article表中记录少于90条则对表进行插入更新操作，并返回response为true，否则等于false；插入操作：参数id为空将输入对象的属性值插入到表中所需的字段中，更新操作：参数id不为空，查找匹配id的记录，更新article_title、article_content和add_name属性."},
  {"task": "00003", "sql_prompt": "1. 表名ssm_article; (id(int(4)),article_title(varchar(100)),article_create_date(varchar(50)),article_content(text),is_top(int(4)),add_name(varchar(50))).", "logic_prompt": "1. 文章删除: POST /article/delete; application/x-www-form-urlencoded; ids=\"\"; ApiRespone{\"code\":1, \"message\":\"成功\",\"response\":[{}]}.\n2. 按\",\"分割输入字符串ids，依次删除ssm_article表中的记录，response为true."},
  {"task": "00004", "sql_prompt": "1. 表名ssm_article; (id(int(4)),article_title(varchar(100)),article_create_date(varchar(50)),article_content(text),is_top(int(4)),add_name(varchar(50))).", "logic_prompt": "1. 文章查找: GET /article/findById; application/x-www-form-urlencoded; id=\"\"; ApiRespone{\"code\":1, \"message\":\"成功\",\"response\":[{}]}.\n2. 按参数id在ssm_article表查询，并返回所有字段信息并转换为json格式赋值给response返回."},
  {"task": "00005", "sql_prompt": "1. 表名ssm_picture; (id(int(11), AUTO_INCREMENT),path(varchar(150)),type(int(11)),time(varchar(100)),url(varchar(200)),grade(int(11))).", "logic_prompt": "1. 图片列表: POST /picture/list; application/x-www-form-urlencoded; (page=\"\", rows=\"\", picture={}); ApiRespone{\"code\": 1,\"message\": \"成功\",\"response\": [{}]}.\n2. 创建包含page和rows分页对象，根据输入参数对ssm_picture表进行查询操作，查询条件是：当url参数不为空且不为空字符串，则进行模糊匹配；如果type参数不为空且不为空字符串，则进行进行匹配；如果 grade参数不为空且不为空字符串，则进行匹配；如果 start和size参数都不为空，则从start开始获取size条记录；如果number参数不为空，则从获取number条记录；将查询结果转成JSON格式赋值给response返回."},
  {"task": "00006", "sql_prompt": "1. 表名ssm_picture; (id(int(11), AUTO_INCREMENT),path(varchar(150)),type(int(11)),time(varchar(100)),url(varchar(200)),grade(int(11))).", "logic_prompt": "1. 图片保存: POST /picture/save; application/json; PictureRequest{\"id\":\"\",\"path\":\"\",\"type\":\"\",\"time\":\"\",\"url\":\"\",\"grade\":\"\"}; ApiRespone{\"code\": 1,\"message\": \"成功\",\"response\": [{}]}.\n2. 如果参数id为空，则time设置为当前日期的字符串表示形式，进行插入操作；如果不为空，则进行更新操作；如果参数path为空或ssm_picture表中记录数(统计符合特定条件url、type、grade的记录总数)大于90或参数path的长度大于100或参数url的长度大于100则返回0，否则在ssm_picture表中做插入或更新操作；其中更新操作：参数id不为空，查找匹配id的记录，更新属性."},
  {"task": "00007", "sql_prompt": "1. 表名ssm_picture; (id(int(11), AUTO_INCREMENT),path(varchar(150)),type(int(11)),time(varchar(100)),url(varchar(200)),grade(int(11))).", "logic_prompt": "1. 图片删除: POST /picture/delete; application/x-www-form-urlencoded; ids=\"\"; ApiRespone{\"code\":1, \"message\":\"成功\",\"response\":[{}]}.\n2. 按\",\"分割输入字符串ids，依次删除ssm_picture表中的记录，respone为true."},
  {"task": "00008", "sql_prompt": "1. 表名ssm_picture; (id(int(11), AUTO_INCREMENT),path(varchar(150)),type(int(11)),time(varchar(100)),url(varchar(200)),grade(int(11))).", "logic_prompt": "1. 图片查询: GET /picture/findById; application/x-www-form-urlencoded; id=\"\"; ApiRespone{\"code\":1, \"message\":\"成功\",\"response\":[{}]}.\n2. 按参数id在ssm_picture表查询，并返回所有字段信息并转换为json格式赋值给response返回."},
  {"task": "00009", "sql_prompt": "1. 表名ssm_book; (id(int(11),AUTO_INCREMENT),isbn(varchar(15)),path(varchar(150)),title(varchar(200)),subtitle(varchar(200)),original_title(varchar(200)),market_price(varchar(10)),intro(text),binding(varchar(20)),pages(varchar(10)),author(varchar(200)),publisher(varchar(100)),catalog(text),supply(varchar(20)),status(int(11)),hot(int(11))).", "logic_prompt": "1. 书本列表: GET /book/listAll; x-www-form-urlencoded; (page=\"\", rows=\"\", book=Book); ApiRespone{\"code\":1, \"message\":\"成功\",\"response\":[{}]}.\n2. 根据输入参数对ssm_book表进行查询操作，查询条件是：参数book的author不为空且部位空字符串，则进行模糊匹配；参数book的title不为空且不为空字符串，则进行模糊匹配；参数book的isbn不为空且不为空字符串，则进行精确匹配；查询获取的劣币根据表中的id字段进行降序排序，并根据参数page和row进行分页查询。最终获取的结果转换为JSON格式赋值给response进行返回."},
  {"task": "00010", "sql_prompt": "1. 表名bms_billboard; (id(auto_increment),content,create_time,`show`(tinyint(1))).", "logic_prompt": "1. 公告列表: GET /billboard/show; ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 在bms_billboard中查询对象列表，查询条件是：`show`为1；返回信息data设置为{\"billboards\":[{\"id\":0,\"content\":\"\",\"create_time\":\"\",\"show\":1}]}."},
  {"task": "00011", "sql_prompt": "1. 表名book; (book_id(int)、name(string)、number(int)).", "logic_prompt": "1. 获取书籍列表，GET /book/list ;请求格式：URL参数传递，请求参数{\"offset\":\"查询的起始位\",\"limit\":\"查询的结果数量限制\"}；请求示例：请求示例：/book/list?offset=0&limit=10；ApiResponse{\"code\": 200,\"message\": \"获取成功\",\"book_id\":\"\",\"name\":\"\",\"number\":\"\"}.\n2. 首先检查传入的offset和limit参数，如果均大于0，则从表book中来查询指定范围内的图书列表，如果查询成功，则返回查询到的图书列表信息，以JSON格式返回给客户端；如果至少有一个小于0，返回一个失败的JSON响应，提示\"参数不能小于0！\"."},
  {"task": "00012", "sql_prompt": "1. 表名book; (book_id(int)、name(string)、number(int)).", "logic_prompt": "1. .获取书籍详情: GET  /book/{bookId}/detail; URL参数传递; bookId; ApiResponse{\"code\": 200,\"message\": \"获取成功\",\"book_id\":\"\",\"name\":\"\",\"number\":\"\"}.\n2. 根据请求路径中传入的参数bookId检查其在数据库表book中是否存在，如果在表book中不存在，则返回一个失败的响应，提示\"书籍id不存在，请重新查询\"；则返回一个包含图书信息的JSON响应并提示\"书籍详情获取成功！\"；如果传入的bookId为无效字符，则返回一个失败的响应，提示\"bookId参数无效\"."},
  {"task": "00013", "sql_prompt": "1. 表名book; (book_id(int)、name(string)、number(int)).", "logic_prompt": "1. 预约书籍: POST /book/{bookId}/appoint; application/json; {\"studentId\"：\"\"}; ApiResponse{\"success\": true,\"data\": {\"book_id\": 1,\"student_id\": 12345,\"appointTime\": \"2023-10-11T14:30:00Z\",\"state\": \"SUCCESS\", \"stateInfo\": \"预约成功\"}}.\n2. 根据请求路径中的bookId从表book中获取对应的图书信息，同时根据传入的请求参数studentId来检查学生ID是否为空，如果为空则返回\"学号不能为空\"的错误信息；如果不为空，则从表book中获取指定的bookId，然后将获取的图书id更新到表appointment中,同时将当前的预约时间和输入的studentId参数更新到表appointment中，如果执行成功，表示书籍预约成功，返回包含预约信息的JSON响应；如果获取的书籍id在表book中不存在，则返回一个失败的JSON响应，提示\"书籍不存在\"."},
  {"task": "00014", "sql_prompt": "1. 表名tbl_dept; (dept_id,dept_name,dept_leader).", "logic_prompt": "1. 删除部门，DELETE    /hrms/dept/delDept/{deptId}; 响应示例{ \"success\": false, \"error\": { \"del_dept_error\": \"删除异常\"}}.\n2. 根据部门ID删除部门信息：根据请求路径中传入的参数deptId在表tbl_dept中删除指定deptId的部门信息，如果从数据库表中成功删除指定的部门id，返回\"删除成功\"的JSON响应，并将已删除的部门信息更新到数据库中;如果获取的部门id不存在，则返回\"id不存在\"的JSON响应."},
  {"task": "00015", "sql_prompt": "1. 表名tbl_dept; (dept_id,dept_name,dept_leader).", "logic_prompt": "1. 新增部门: PUT /hrms/dept/addDept; application/json; {\"deptId\":\"\",\"deptLeader\":\"\",\"deptName\":\"\"}; 响应示例{ \"success\": false, \"error\": {\"add_dept_error\": \"添加异常！\"}}.\n2. 根据传入的参数检查deptId在表tbl_dept中是否存在，如果存在，则返回\"添加异常\"的 JSON 响应；如果不存在，则将部门信息添加到表tbl_dep中，如果添加成功，则返回包含部门信息的JSON 响应."},
  {"task": "00016", "sql_prompt": "1. 表名tbl_dept; (dept_id,dept_name,dept_leader).", "logic_prompt": "1. 查询部门信息总页码数接口: GET /hrms/dept/getTotalPages; 响应示例{\"success\": true,\"totalPages\": [总页数]}.\n2. 获取部门总记录数，计算总页数，每页显示的记录行数默认为 5 条。返回包含总页数信息的 JSON 响应."},
  {"task": "00017", "sql_prompt": "1. 表名tbl_dept; (dept_id,dept_name,dept_leader).", "logic_prompt": "1. 通过部门ID查询部门信息接口: GET /hrms/dept/getDeptById/{deptId}; application/json; {\"deptId\":\"\"}; 响应成功{ \"success\": true, \"department\": [部门对象]}，响应失败：{ \"success\": false, \"error\": {\"get_dept_error\": \"无部门信息\"}}.\n2. 根据部门ID查询部门信息业务逻辑。首先检查传递的 deptId 是否大于 0。调用 departmentService 的getDeptById 方法，该方法根据 deptId 获取部门信息。如果找到部门信息，则返回包含部门信息的 JSON 响应，否则返回无部门信息的 JSON 响应."},
  {"task": "00018", "sql_prompt": "1. 表名tbl_dept; (dept_id,dept_name,dept_leader).", "logic_prompt": "1. 分页查询部门信息接口: GET /hrms/dept/getDeptList; application/json; {\"pageNo\":\"\"}; 响应格式:呈现包含部门信息和分页详细信息的JSON响应。\n2. 分页查询部门信息。计算总记录数和总页数。根据传递的页数和每页记录数获取对应的部门列表，\n返回部门列表信息，包括部门列表、总记录数、总页数和当前页数添加到 ModelAndView 中，用于在视图中渲染部门列表页面."},
  {"task": "00019", "sql_prompt": "1. 表名tbl_dept; (dept_id,dept_name,dept_leader).", "logic_prompt": "1. 查询所有部门名称: GET /hrms/dept/getDeptName; 响应示例{\"status\": \"success\",\"info\": {\"departmentList\": [{\"deptId\": 1,\"deptName\": \"\"},{\"deptId\": 2,\"deptName\": \"\"}]}}.\n2. 该方法获取所有部门的名称列表，如果成功获取名称列表，则返回包含名称列表的 JSON 响应，如{\"status\": \"success\",\"info\": {\"departmentList\": [{\"deptId\": 1,\"deptName\": \"\"},{\"deptId\": 2,\"deptName\": \"\"}]}}，否则返回失败的 JSON 响应."},
  {"task": "00020", "sql_prompt": "1. 表名tbl_dept; (dept_id,dept_name,dept_leader).", "logic_prompt": "1. 更新部门信息: PUT /hrms/dept/updateDept/{deptId}; 通过URL参数传递; 响应示例：{ \"success\": false, \"error\": { \"update_dept_error\": \"部门更新失败\"}}.\n2.从请求路径中的获取deptId参数，更新具有指定 deptId 的部门信息。检查 deptId 是否大于0，以确保传递了有效的部门ID，若deptId大于0，根据 id更新部门信息并保存到数据库表中，如果更新成功，则返回一个成功的JSON响应，提示\"更新成功\"；否则返回{ \"success\": false, \"error\": { \"update_dept_error\": \"部门更新失败\"}}."},
  {"task": "00021", "sql_prompt": "1. 表名cms_prefrence_area; (id(BIGINT),name(VARCHAR),sub_title(VARCHAR),sort(INTEGER),show_status(INTEGER)).", "logic_prompt": "1. 获取所有商品优选接口：GET /prefrenceArea/listAll; application/json; ApiResponse{distinct\", \"refid\": \"String\", \"_parameter\", \"orderByClause\" }.\n业务逻辑：\n2. 在数据库中查询优选商品列表中的所有列，支持去重，具体的排序方式将取决于传递给查询的对象的属性值。返回参数{\"id\",\"name\",\"subTitle\",\"sort\",\"showStatus\"}."},
  {"task": "00022", "sql_prompt": "1. 表名cms_subject; (id(BIGINT), category_id(BIGINT), title(VARCHAR(255)), pic(VARCHAR(255)), product_count(INTEGER), recommend_status(INTEGER), create_time(TIMESTAMP), collect_count(INTEGER), read_count(INTEGER), comment_count(INTEGER), album_pics(VARCHAR(255)), description(VARCHAR(255)), show_status(INTEGER), forward_count(INTEGER), category_name(VARCHAR(255))).", "logic_prompt": "1. 获取全部商品专题接口: GET /subject/listAll; application/json; ApiResponse{distinct\", \"refid\": \"String\", \"_parameter\", \"orderByClause\" }.\n2. 在数据库中查询所有商品专题信息，支持去重、排序，并返回查询结果。返回参数{\"id\": null,  \"categoryId\": null,  \"title\": null,  \"pic\": \"专题主图\",  \"productCount\": \"关联产品数量\",  \"recommendStatus\": null,  \"createTime\": null,  \"collectCount\": null,  \"readCount\": null,  \"commentCount\": null,  \"albumPics\": \"画册图片用逗号分割\",  \"description\": null,  \"showStatus\": \"显示状态：0->不显示；1->显示\",  \"forwardCount\": \"转发数\",  \"categoryName\": \"专题分类名称\",  \"content\": null}."},
  {"task": "00023", "sql_prompt": "1. 表名cms_subject; (id(BIGINT), category_id(BIGINT), title(VARCHAR(255)), pic(VARCHAR(255)), product_count(INTEGER), recommend_status(INTEGER), create_time(TIMESTAMP), collect_count(INTEGER), read_count(INTEGER), comment_count(INTEGER), album_pics(VARCHAR(255)), description(VARCHAR(255)), show_status(INTEGER), forward_count(INTEGER), category_name(VARCHAR(255))).", "logic_prompt": "1. 根据专题名称分页获取专题接口：GET /subject/list，请求格式application/x-www-form-urlencoded; ApiResponse{\"keyword\":\"\"(String),\"pageNum\":1(Integer),\"pageSize\":5(Integer)}.\n2. 根据关键字分页获取商品专题信息，传递关键字(keyword)、页码(pageNum)和每页大小(pageSize)作为参数。根据关键字进行分页查询，然后将分页结果封装并返回给前端。返回参数{\"id\": null,  \"categoryId\": null,  \"title\": null,  \"pic\": \"专题主图\",  \"productCount\": \"关联产品数量\",  \"recommendStatus\": null,  \"createTime\": null,  \"collectCount\": null,  \"readCount\": null,  \"commentCount\": null,  \"albumPics\": \"画册图片用逗号分割\",  \"description\": null,  \"showStatus\": \"显示状态：0->不显示；1->显示\",  \"forwardCount\": \"转发数\",  \"categoryName\": \"专题分类名称\",  \"content\": null}."},
  {"task": "00024", "sql_prompt": "1. 表名oms_company_address; (id(BIGINT), address_name(VARCHAR), send_status(INTEGER), receive_status(INTEGER), name(VARCHAR), phone(VARCHAR), province(VARCHAR), city(VARCHAR), region(VARCHAR), detail_address(VARCHAR)).", "logic_prompt": "1. 获取所有收货地址接口：GET /companyAddress/list; 请求格式application/json; ApiResponse{distinct\", \"refid\": \"String\", \"_parameter\", \"orderByClause\" }.\n2. 从数据库中查询数据库表中的所有收货地址数据并返回。返回参数{\"id\": null, \"addressName\": \"地址名称\", \"sendStatus\": \"默认发货地址：0->否；1->是\", \"receiveStatus\": \"是否默认收货地址：0->否；1->是\", \"name\": \"收发货人姓名\", \"phone\":  \"收货人电话\", \"province\": \"省/直辖市\", \"city\": \"市\", \"region\": \"区\",   \"detailAddress\": \"详细地址\"}."},
  {"task": "00025", "sql_prompt": "1. 表名ums_resource; (create_time, name,url, description, category_id).", "logic_prompt": "1. 查询所有会员等级接口：GET /memberLevel/list; application/x-www-form-urlencoded; {\"defaultStatus\"}; ApiResponse{\"id\", \"name\", \"growthPoint\", \"defaultStatus\", \"freeFreightPoint\", \"commentGrowthPoint\", \"priviledgeFreeFreight\", \"priviledgeSignIn\", \"priviledgeComment\", \"priviledgePromotion\", \"priviledgeMemberPrice\", \"priviledgeBirthday\", \"note\"}.\n2. 实现了对会员等级的查询操作，并返回符合条件的结果供前端展示。这是一个简单的RESTful API，用于管理会员等级的查询功能。返回参数{\"id\": null, \"name\": null, \"growthPoint\": null, \"defaultStatus\": \"是否为默认等级：0->不是；1->是\", \"freeFreightPoint\": \"免运费标准\", \"commentGrowthPoint\": \"每次评价获取的成长值\", \"priviledgeFreeFreight\": \"是否有免邮特权\", \"priviledgeSignIn\": \"是否有签到特权\", \"priviledgeComment\": \"是否有评论获奖励特权\", \"priviledgePromotion\": \"是否有专享活动特权\", \"priviledgeMemberPrice\": \"是否有会员价格特权\", \"priviledgeBirthday\": \"是否有生日特权\", \"note\": null}."},
  {"task": "00026", "sql_prompt": "1. 表名sms_coupon_history; (id(BIGINT), coupon_id(BIGINT), member_id(BIGINT), coupon_code(VARCHAR), member_nickname(VARCHAR), get_type(INTEGER), create_time(TIMESTAMP), use_status(INTEGER), use_time(TIMESTAMP), order_id(BIGINT), order_sn(VARCHAR)).", "logic_prompt": "1. 获取领取记录接口：GET /couponHistory/list; application/x-www-form-urlencoded; {\"couponId\",\"useStatus\",\"orderSn\",\"pageSize\",\"pageNum\"}; ApiResponse{\"id\", \"couponId\", \"memberId\", \"couponCode\", \"memberNickname\", \"getType\", \"createTime\", \"useStatus\", \"useTime\", \"orderId\", \"orderSn\"}.\n2. 实现了对数据库中优惠券领取记录的查询操作，并返回符合条件的结果进行展示。返回参数\n{\"id\": null, \"couponId\": null, \"memberId\": null, \"couponCode\": null, \"memberNickname\": \"领取人昵称\", \"getType\": \"获取类型：0->后台赠送；1->主动获取\", \"createTime\": null, \"useStatus\": \"使用状态：0->未使用；1->已使用；2->已过期\", \"useTime\": \"使用时间\", \"orderId\": \"订单编号\", \"orderSn\": \"订单号码\"}."},
  {"task": "00027", "sql_prompt": "1. 表名pms_sku_stock; (id(BIGINT), product_id(BIGINT), sku_code(VARCHAR), price(DECIMAL), stock(INTEGER), low_stock(INTEGER), pic(VARCHAR), sale(INTEGER), promotion_price(DECIMAL), lock_stock(INTEGER), sp_data(VARCHAR)).", "logic_prompt": "1. 根据商品编号及编号模糊搜索sku库存接口：GET /sku/{pid}; application/x-www-form-urlencoded; {\"pid\",\"keyword\"}; ApiResponse{\"id\",\"productId\",\"skuCode\",\"price\",\"stock\",\"lowStock\",\"pic\",\"sale\",\"promotionPrice\",\"lockStock\":,\"spData\"}.\n2. 实现用于根据商品编号和关键字模糊搜索SKU库存的接口。客户端通过GET请求传递商品编号和关键字，Controller层调用Service层的方法执行查询操作，Service层构建查询条件并调用数据访问层的Mapper查询数据，最后将查询结果返回给客户端。这样，客户端可以获取与商品相关的SKU库存信息。返回参数{\"id\":null,\"productId\":null,\"skuCode\":\"sku编码\",\"price\":null,\"stock\":\"库存\",\"lowStock\":\"预警库存\",\"pic\":\"展示图片\",\"sale\":\"销量\",\"promotionPrice\":\"单品促销价格\",\"lockStock\":\"锁定库存\",\"spData\":\"商品销售属性，json格式\"}."},
  {"task": "00028", "sql_prompt": "1. 表名pms_sku_stock; (id(BIGINT), product_id(BIGINT), sku_code(VARCHAR), price(DECIMAL), stock(INTEGER), low_stock(INTEGER), pic(VARCHAR), sale(INTEGER), promotion_price(DECIMAL), lock_stock(INTEGER), sp_data(VARCHAR)).", "logic_prompt": "1. 批量更新库存信息接口：POST /sku/update/{pid}; application/json; {\"pid\":\"\",\"skuStockList\":{\"id\":null, \"productId\":null, \"skuCode\":\"sku编码\", \"price\":null, \"stock\":\"库存\",\"lowStock\":\"预警库存\",\"pic\":\"展示图片\",\"sale\":\"销量\",\"promotionPrice\":\"单品促销价格\",\"lockStock\":\"锁定库存\",\"spData\":\"商品销售属性，json格式\"}}; ApiResponse{\"count\"}.\n2. 实现了一个接口，用于更新商品SKU库存信息。客户端通过POST请求传递商品编号和要更新的库存信息列表，Controller层调用Service层的方法执行批量更新操作，Service层调用数据访问层的Dao层进行数据库操作，最后根据更新结果返回成功或失败的响应给客户端。这样，客户端可以批量更新商品的SKU库存信息。返回{\"count\"}."},
  {"task": "00029", "sql_prompt": "1. 表名oms_order_setting; (id(BIGINT), flash_order_overtime(INTEGER), normal_order_overtime(INTEGER), confirm_overtime(INTEGER), finish_overtime(INTEGER), comment_overtime(INTEGER)).", "logic_prompt": "1. 获取指定订单设置接口: GET /orderSetting/{id}; application/json;{\"ids\"}; ApiResponse{\"code\",\"data\"}.\n2. 根据传入的id查询订单设置信息，并将其返回给调用者; 返回{\"code\",\"data\"}."},
  {"task": "00030", "sql_prompt": "1. 表名oms_order_setting; (id(BIGINT), flash_order_overtime(INTEGER), normal_order_overtime(INTEGER), confirm_overtime(INTEGER), finish_overtime(INTEGER), comment_overtime(INTEGER)).", "logic_prompt": "1. 修改指定订单设置接口: POST /orderSetting/update/{id}; application/json; {\"ids\"，{\"id\":null, \"flashOrderOvertime\":\"秒杀订单超时关闭时间(分)\", \"normalOrderOvertime\":\"正常订单超时时间(分)\", \"confirmOvertime\":\"发货后自动确认收货时间（天）\", \"finishOvertime\":\"自动完成交易时间，不能申请售后（天）\", \"commentOvertime\":\"订单完成后自动好评时间（天）\"}}; ApiResponse{\"count\"}.\n2. 实现用于修改订单设置的接口，接受一个订单设置的ID和一个新的订单设置对象作为输入，调用orderSettingService的update方法来执行实际的修改操作，然后根据修改是否成功返回相应的响应结果。如果修改成功，响应中包含修改成功的记录数，否则返回一个失败的响应; 返回{\"count\"}."},
  {"task": "00031", "sql_prompt": "1. 表名tbl_emp; (emp_id(int(11),auto_increment),emp_name(varchar(22)),emp_email,gender(char(2)),department_id(int(11))).", "logic_prompt": "1. 员工信息删除: DELETE /hrms/emp/deleteEmp/{empId}; ApiResponse{\"status\": \"success\",\"message\": \"操作成功\",\"data\": {}}.\n2. 如果empId大于0，则根据empId对tbl_emp表进行删除操作，删除成功message返回null，删除失败message返回{\"emp_del_error\": \"员工删除异常\"}."},
  {"task": "00032", "sql_prompt": "1. 表名tbl_emp; (emp_id(int(11),auto_increment),emp_name(varchar(22)),emp_email,gender(char(2)),department_id(int(11))).", "logic_prompt": "1. 员工信息更新: PUT /hrms/emp/updateEmp/{empId}; 请求参数employee=Employee; ApiResponse{\"status\": \"success\",\"message\": \"操作成功\",\"data\": {}}.\n2. 根据empId对tbl_emp表进行更新操作，更新内容是employee对象，更新成功data返回null，更新失败data返回{\"emp_update_error\": \"更改异常\"}."},
  {"task": "00033", "sql_prompt": "1. 表名tbl_emp; (emp_id(int(11),auto_increment),emp_name(varchar(22)),emp_email,gender(char(2)),department_id(int(11))).", "logic_prompt": "1. 员工信息验证: GET /hrms/emp/checkEmpExists; x-www-form-urlencoded; empName=\"\"; ApiResponse{\"status\": \"success\",\"message\": \"操作成功\",\"data\": {}}.\n2. 对参数empName进行验证，验证条件是：2-5位中文字符或6-16位英文和数字的组合；如果不符合格式，返回信息data设置为{\"name_reg_error\": \"输入姓名为2-5位中文或6-16位英文和数字组合\"}；如果符合在tbl_emp表中查询相同empName的对象，如果存在，返回信息data设置为{\"name_duplicate_error\": \"用户名重复\"}，如果不存在，返回信息data设置为null."},
  {"task": "00034", "sql_prompt": "1. 表名tbl_emp; (emp_id(int(11),auto_increment),emp_name(varchar(22)),emp_email,gender(char(2)),department_id(int(11))).", "logic_prompt": "1. 员工信息新增: POST /hrms/emp/addEmp; application/json; employee=Employee; ApiResponse{\"status\": \"success\",\"message\": \"操作成功\",\"data\": {}}.\n2. 在tbl_emp表中插入employee对象，插入失败返回信息message都设置为\"操作失败\"."},
  {"task": "00035", "sql_prompt": "1. 表名tbl_emp; (emp_id(int(11),auto_increment),emp_name(varchar(22)),emp_email,gender(char(2)),department_id(int(11))).", "logic_prompt": "1. 员工信息页数: GET /hrms/emp/getTotalPages; ApiResponse{\"status\": \"success\",\"message\": \"操作成功\",\"data\": {}}.\n2. 获取tbl_emp表中员工信息条数，计算总页数为信息条数除以5，如果总条数不能被5整除，总页数加1，返回信息data设置为{\"totalPages\": 总页数}."},
  {"task": "00036", "sql_prompt": "1. 表名tbl_emp; (emp_id(int(11),auto_increment),emp_name(varchar(22)),emp_email,gender(char(2)),department_id(int(11))).", "logic_prompt": "1. 员工信息查询: GET /hrms/emp/getEmpById/{empId}; ApiResponse{\"status\": \"success\",\"message\": \"操作成功\",\"data\": {}}.\n2. 根据empId在tbl_emp表中查询员工信息，如果没找到返回信息message都设置为\"操作失败\"；如果找到返回信息data设置为{\"employee\":{\"empId\": 1,\"empName\": \"John Doe\",\"empEmail\": \"Manager\",\"gender\": \"Sales\",\"departmentId\":101}}."},
  {"task": "00037", "sql_prompt": "1. 表名tbl_emp; (emp_id(int(11),auto_increment),emp_name(varchar(22)),emp_email,gender(char(2)),department_id(int(11))).\n2. 表名tbl_dept; (dept_id(int(11)),dept_name,dept_leader). ", "logic_prompt": "1. 员工信息获取: GET /hrms/emp/getEmpList; pageNo=1; ApiResponse{\"status\": \"success\",\"message\": \"操作成功\",\"data\": {}}.\n2. 根据pageNo计算出记录的偏移量offset=(pageNo-1)*5，根据offset和5在tbl_emp表中查询获取分页员工信息，查询条件是：在tbl_emp和tbl_dept表中检索员工信息，并将department_id与dept_id连接，然后按照员工ID升序排列；获取tbl_emp表中总的记录数totalItems和总页数totalPages(信息条数除以5，如果总条数不能被5整除，总页数加1)，返回信息data设置为 {\"employee\":[{\"empId\": 1,\"empName\": \"John Doe\",\"empEmail\": \"Manager\",\"gender\": \"Sales\",\"departmentId\":101}],\"totalItems\":totalItems,\"totalPages\":totalPages,\"curPage\":pageNo}."},
  {"task": "00038", "sql_prompt": "1. 表名lin_log; (id(int(10),auto_increment),message,user_id(int(10)),username(varchar(24)),status_code(int(11)),method(varchar(20)),path(varchar(50)),permission(varchar(100)),create_time(datetime(3)),update_time(datetime(3)),delete_time(datetime(3)),is_deleted(tinyint(1))).", "logic_prompt": "1. 日志查询: GET /cms/log; application/json; dto=QueryLogDTO{count,page,start=Date,end=Date,name,keyword};  ApiResponse{\"status\": \"success\",\"message\": \"操作成功\",\"data\": {}}.\n2. 根据dto.name、dto.page、dto.count在lin_log表中进行分页查询，其中查询的记录lin_log.is_deleted必须为0，lin_log.create_time必须在dto.start和dto.end范围内，获取的结果按lin_log.create_time降序排列，返回data设置为{lin_log记录}."},
  {"task": "00039", "sql_prompt": "1. 表名lin_log; (id(int(10),auto_increment),message,user_id(int(10)),username(varchar(24)),status_code(int(11)),method(varchar(20)),path(varchar(50)),permission(varchar(100)),create_time(datetime(3)),update_time(datetime(3)),delete_time(datetime(3)),is_deleted(tinyint(1))).", "logic_prompt": "1. 日志搜索: GET /cms/log/search; application/json; QueryLogDTO{count,page,start=Date,end=Date,name,keyword};   ApiResponse{\"status\": \"success\",\"message\": \"操作成功\",\"data\": {}}.\n2.  根据dto.name、dto.keyword、dto.page、dto.count在lin_log表中进行分页查询，其中查询的记录lin_log.is_deleted必须为0，lin_log.create_time必须在dto.start和dto.end范围内，lin_log.message必须包含dto.keyword，获取的结果按lin_log.create_time降序排列，返回data设置为{lin_log记录}."},
  {"task": "00040", "sql_prompt": "1. 表名lin_log; (id(int(10),auto_increment),message,user_id(int(10)),username(varchar(24)),status_code(int(11)),method(varchar(20)),path(varchar(50)),permission(varchar(100)),create_time(datetime(3)),update_time(datetime(3)),delete_time(datetime(3)),is_deleted(tinyint(1))).", "logic_prompt": "1. 日志用户查询: GET /cms/log/users; x-www-form-urlencoded; (page,count);   ApiResponse{\"status\": \"success\",\"message\": \"操作成功\",\"data\": {}}.\n2. 在lin_log表中进行分页查询记录返回username列，查询条件是lin_log.is_deleted必须为0，查询结果按lin_log.username列进行分组，并要求每个分组中的记录数量必须大于0，返回data设置为{[\"username\"=lin_log.username]}."},
  {"task": "00041", "sql_prompt": "1. 表名ums_user; (id(varchar(20)),username(varchar(15)),alias,password(varchar(100)),avatar(varchar(1000)),email,mobile,score(int),token,bio,active(bit(1)),status(bit(1)),role_id,create_time,modify_time).", "logic_prompt": "1. 账号注册: POST /ums/user/register；application/json; RegisterDTO{name=\"\",pass=\"\",checkPass=\"\",email=\"\"}; ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 在ums_user表中查询用户，查询条件是：username等于name或email等于email；如果用户存在，返回信息message设置\"账号已存在\"；如果用户不存在，则将输入用户插入到ums_user表中，其中password存储的是pass加密后的结果，加密方法是：使用MD5算法进行加密得到字符数组，将每个字节转换成正数并转换成对应的16进制字符串，将所有的16进制字符串拼接成最终的加密结果；返回信息data设置为{ums_user的新记录}."},
  {"task": "00042", "sql_prompt": "1. 表名ums_user; (id(varchar(20)),username(varchar(15)),alias,password(varchar(100)),avatar(varchar(1000)),email,mobile,score(int),token,bio,active(bit(1)),status(bit(1)),role_id,create_time,modify_time).", "logic_prompt": "1. 账号登录: POST /ums/user/login; application/json; RegisterDTO{name=\"\",pass=\"\",checkPass=\"\",email=\"\"}; ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 在ums_user表中查询用户，查询条件是：username等于name；如果用户存在，对pass进行md5加密后检查和password是否相同，如果相同则返回信息message设置为\"登录成功\"，如果不相等则返回信息message设置为\"登录失败\"；其中md5的加密方法是：使用MD5算法进行加密得到字符数组，将每个字节转换成正数并转换成对应的16进制字符串，将所有的16进制字符串拼接成最终的加密结果."},
  {"task": "00043", "sql_prompt": "1. 表名ums_user; (id(varchar(20)),username(varchar(15)),alias,password(varchar(100)),avatar(varchar(1000)),email,mobile,score(int),token,bio,active(bit(1)),status(bit(1)),role_id,create_time,modify_time).", "logic_prompt": "1. 账号查询：GET /ums/user/info; username=\";ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 在ums_user表中查询用户，查询条件是：username等于username；如果用户存在，回信息data设置为{ums_user的记录}；如果用户不存在，返回信息data设置为null."},
  {"task": "00044", "sql_prompt": "1. 表名ums_user; (id(varchar(20)),username(varchar(15)),alias,password(varchar(100)),avatar(varchar(1000)),email,mobile,score(int),token,bio,active(bit(1)),status(bit(1)),role_id,create_time,modify_time).\n2. 表名bms_post; (id(varchar(20)),title,content(longtext),user_id(varchar(20)),comments(int),collects(int),view(int),top(bit(1)),essence(bit(1)),section_id,create_time,modify_time).", "logic_prompt": "1. 账号分页: GET /ums/user/{username}; (pageNo,size=10); ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 在ums_user表中查询用户，查询条件是：username等于username；如果用户不存在，返回信息data设置为null；如果用户存在，在bms_post表中分页查询，查询条件是：bms_post的user_id等于ums_user的id，存放在页码为pageNo、长度等于size的分页上，返回信息data设置为{[ums_user的记录]}."},
  {"task": "00045", "sql_prompt": "1. 表名ums_user; (id(varchar(20)),username(varchar(15)),alias,password(varchar(100)),avatar(varchar(1000)),email,mobile,score(int),token,bio,active(bit(1)),status(bit(1)),role_id,create_time,modify_time).", "logic_prompt": "1. 账号更新: POST /ums/user/update; application/json; UmsUser; ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 根据输入参数更新ums_user表中的记录，返回信息data设置为{ums_user的记录}."},
  {"task": "00046", "sql_prompt": "1. 表名bms_comment; (id(varchar(20)),content(varchar(1000)),user_id(varchar(20)),topic_id(varchar(20)),create_time、modify_time).\n2. 表名ums_user; (id(varchar(20)),username(varchar(15)),alias,password(varchar(100)),avatar(varchar(1000)),email,mobile,score(int),token,bio,active(bit(1)),status(bit(1)),role_id,create_time,modify_time).", "logic_prompt": "1. 话题获取: GET /comment/get_comments; topicid=\"\"; ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 在bms_comment表中查询特定话题，查询条件是：选择bms_comment表中的所有列和ums_user表中的username列，以ums_user.id和bms_comment.user_id相等作为内连接条件，筛选出topic_id等于给定参数的记录，并按create_time对记录进行降序排列；返回信息data设置为{[{\"id\":\"\",\"content\":\"\", \"topicId\":\"\", \"userId\":\"\", \"username\":\"\",\"createTime\":\"\"}]}."},
  {"task": "00047", "sql_prompt": "1. 表名bms_comment; (id(varchar(20)),content(varchar(1000)),user_id(varchar(20)),topic_id(varchar(20)),create_time、modify_time).\n2. 表名ums_user; (id(varchar(20)),username(varchar(15)),alias,password(varchar(100)),avatar(varchar(1000)),email,mobile,score(int),token,bio,active(bit(1)),status(bit(1)),role_id,create_time,modify_time).", "logic_prompt": "1. 话题添加: POST /comment/add_comment; application/json; Header: userName=\"\"; CommentDTO{topic_id=\"\", content=\"\"}; ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 在ums_user表中查询用户，查询条件是：username等于输入userName；根据user_id和输入参数CommentDTO在bms_comment表中插入一条记录，create_time设置为创建时间，返回信息date设置为{bms_comment的记录}."},
  {"task": "00048", "sql_prompt": "1. 表名ums_user; (id(varchar(20)),username(varchar(15)),alias,password(varchar(100)),avatar(varchar(1000)),email,mobile,score(int),token,bio,active(bit(1)),status(bit(1)),role_id,create_time,modify_time).\n2. 表名bms_post; (id(varchar(20)),title,content(longtext),user_id(varchar(20)),comments(int),collects(int),view(int),top(bit(1)),essence(bit(1)),section_id,create_time,modify_time).\n3. 表名bms_tag; (id(varchar(20)),name,topic_count(int)).\n4. 表名bms_post_tag; (id(auto_increment),tag_id(varchar(20)),topic_id(varchar(20))).", "logic_prompt": "1. 帖子创建: POST /post/create; application/json; Header: userName; ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 在ums_user表中查询用户，查询条件是username等于输入Header参数；在bms_post表中查询帖子，查询条件是：bms_post.title等于输入参数title，如果已存在，则返回信息data设置为\"话题已存在，请修改\"，如果不存在，则将ums_user.user_id、title、content插入到bms_post表中，create_time设置为当前时间；更新bms_user表中用户对象的积分加1；判断输入tags是否为空，不为空则保存标签：遍历tags在bms_tag表中查找与name相等的记录，如果记录为空，则根据输入参数创建对象插入到bms_tag表中，如果记录不为空，更新topic_count对象加1；然后将bms_tags表中的记录与话题关联，根据topic_id删除bms_post_tag表中的记录，遍历bms_tag表中的记录，获取topic_id和tag_id创建对象插入到bms_post_tag表中；返回信息data设置为{bms_post的记录}."},
  {"task": "00049", "sql_prompt": "1. 表名ums_user; (id(varchar(20)),username(varchar(15)),alias,password(varchar(100)),avatar(varchar(1000)),email,mobile,score(int),token,bio,active(bit(1)),status(bit(1)),role_id,create_time,modify_time).\n2. 表名bms_post; (id(varchar(20)),title,content(longtext),user_id(varchar(20)),comments(int),collects(int),view(int),top(bit(1)),essence(bit(1)),section_id,create_time,modify_time).", "logic_prompt": "1. 帖子创建: POST /post/create; application/json; Header: userName; CreateTopicDTO{title=\"\",content=\"\",tags=list<\"\">}; ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 在ums_user表中查询用户，查询条件是username等于输入Header参数；在bms_post表中查询帖子，查询条件是：bms_post.title等于输入参数title，如果已存在，则返回信息data设置为\"话题已存在，请修改\"，如果不存在，则将ums_user.user_id、title、content插入到bms_post表中，主键id使用长度19且只包含数字的字符串，使用create_time设置为当前时间；更新ums_user表中用户对象的积分加1；返回信息data设置为{bms_post的记录}."},
  {"task": "00050", "sql_prompt": "1. 表名bms_tag; (id(varchar(20)),name,topic_count(int)).\n2. 表名bms_post_tag; (id(auto_increment),tag_id(varchar(20)),topic_id(varchar(20))).", "logic_prompt": "1. 帖子关联: POST /post/create; application/json; Header: postId; CreateTopicDTO{title=\"\",content=\"\",tags=list<\"\">}; ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 判断输入tags是否为空，不为空则遍历tags，在bms_tag表中查找与name相等的记录，如果记录为空，则根据输入参数创建对象插入到bms_tag表中，主键id使用长度19且只包含数字的字符串，如果记录不为空，更新topic_count对象加1；在bms_post_tag表中进行删除操作，删除条件是topic_id与输入postId相等；将tag列表插入到bms_post_tag表中：tag_id设置为tag.id，topic_id设置为postId；返回信息data设置为{bms_post_tag的记录}."},
  {"task": "00051", "sql_prompt": "1. 表名ssm_store; (id(int),category(string),number(string),level(string),page(string),status(int)).", "logic_prompt": "1. 按ID查找商店: GET /store/findById; URL参数传递; (id:商店ID); 响应格式{\"message\":\"查询成功\",\"id\": 1,\"number\": \"ABC123\",\"status\": 1,\"level\": 1}.\n2. 按ID查找商店，根据请求路径中提供的id查找商店,检查id是否存在，如果存在，则从表ssm_store中查询对应的商店信息，返回一个包含商店信息的JSON响应并提示\"查询成功\"，如果id不存在，则返回一个失败的JSON响应，提示\"id不存在，请重新输入！\"；如果传入的id为空，则返回\"id不能为空!\"的JSON响应."},
  {"task": "00052", "sql_prompt": "1. 表名ssm_store; (id(int),category(string),number(string),level(string),page(string),status(int)).\n2. 表名ssm_book; (id(int),isbn(string),path(string),title(string),subtitle,originalTitle,marketPrice,intro(text),binding,pages,author,publisher,catalog(text),supply(int),status,hot(int),ndate(string)).", "logic_prompt": "1. 列出商店: GET /store/list; application/json; (page:页码,rows:行数,status:状态,number:编号); 响应格式：{ \"stores\": [  // 商店对象的数组{ \"id\": 1, \"category\": \"\",\"number\": \"\",\"level\": \"\",\"page\": \"\", \"status\": 1,\"books\": [  // 关联的图书数组{\"id\": 123,\"isbn\": \"\",\"path\": \"\", \"title\": \"\",\"subtitle\": \"\", \"originalTitle\": \"\",\"marketPrice\": \"\",\"intro\": \"图书简介\",\"binding\": \"\",\"pages\": \"\", \"author\": \"\",\"publisher\": \"\", \"catalog\": \"\",\"supply\": \"\",\"status\": 1,\"hot\":1,\"indate\": \"2023-08-30 09:21:05\"}]}],\"total\": \"商店总数\"}.\n2. 根据传入的参数从数据库表ssm_store中查询商店信息。使用 page 和 rows 参数进行分页，使用 status 和 number 参数进行筛选；每个商店都关联到其包含的图书列表，对于每个商店，还要从表ssm_book中检索关联的图书列表；然后将结果组装成JSON响应对象，包括商店对象列表和总数，以及每个商店的关联图书列表，若查询失败返回一个失败的响应."},
  {"task": "00053", "sql_prompt": "1. 表名ssm_store; (id(int),category(string),number(string),level(string),page(string),status(int)).", "logic_prompt": "1. 更新商店: POST /store/save; application/json; {\"id\": 1,\"category\":\"\", \"number\": \"\",\"page\":\"\",\"status\": 1}; 响应格式{\"success\": true}.\n2. 根据传入的参数检查表ssm_store中是否有相同的number或者表中的level是否小于1，如果至少满足其中一个条件，发送一个失败响应，将 \"success\" 键设置为false；否则，根据传入的参数检查表ssm_store中id是否存在，如果id不存在，则插入新商店信息；如果id存在，则更新现有商店信息；操作成功后返回{\"success\", true}；否则，返回{\"success\", false}."},
  {"task": "00054", "sql_prompt": "1. 表名ssm_store; (id(int),category(string),number(string),level(string),page(string),status(int)).", "logic_prompt": "1. 删除商店: POST /store/delete; application/x-www-form-urlencoded; (ids:以逗号分隔的商店id列表); 响应格式{\"success\": true}.\n2. 根据请求路径中传入的ids从数据库表ssm_store删除对应的商店信息,多个ids时，以逗号分隔，对每个商店执行删除操作；如果成功删除商店，则设置JSON响应中的\"success\"字段为true，且提示\"删除成功\"的信息，否则设置为false，提示\"删除失败\"；如果传入的ids为空，则返回\"ids不能为空!\"的响应，如果传入的ids不为整数，则返回\"字符串无效，请重新输入！\"的响应."},
  {"task": "00055", "sql_prompt": "1. 表名score; (id,change_type,create_time,score(int),user_id).", "logic_prompt": "1. 查询用户积分列表: GET  /score/queryLimit; text/html; {\"offset\":\"查询的起始位\",\"limit\":\"查询的结果数量限制\"}; 响应示例[{\"id\": 1,\"change_type\": \"加积分\",\"create_time\": \"2023-10-09T14:00:00Z\",\"score\": 10,\"user_id\": 12345},{\"id\": 2,\"change_type\": \"减积分\",\"create_time\": \"2023-10-08T10:30:00Z\",\"score\": -5,\"user_id\": 12345}].\n2. 根据传入的offset和limit参数从表score中来查询指定范围内的积分列表，如果查询成功，则返回查询到的积分列表信息，以JSON格式返回给客户端，否则返回一个失败的JSON响应，提示\"查询失败\"."},
  {"task": "00056", "sql_prompt": "1. 表名ssm_user; (id,userName,password,roleName).", "logic_prompt": "1. 用户登录接口：POST /user/login; application/json; {\"username\": \"\",\"password\": \"\"}; 成功响应{''message\":\"登录成功！\",id\": 1,\"userName\": \"\",}；失败响应：{\"error\": \"请认真核对账号、密码！\"}.\n2. 根据请求参数中传入的用户名和密码与数据库表ssm_user中的数据进行比对，检查传入的用户名是否存在，如果该用户名存在，对用户输入的密码进行MD5哈希算法加密处理，检查其与表中的password是否相同，如果相同，则返回的响应中success设为true,返回:{''success\":true,id\": 1,\"userName\": \"\",};否则返回{\"success\":false,\"error\": \"请认真核对账号、密码！\"}."},
  {"task": "00057", "sql_prompt": "1. 表名score; (id,change_type,create_time,score(int),user_id).\n2. 表名user; (id(int),account,avatar,pay_money(int),country,create_time、score(int),latitude,longitude,province,sex,password).", "logic_prompt": "1. 更新用户积分接口: GET /score/updateScore; text/html; {\"id\":123,\"scoreCount\":\"更新的分数\"}; 响应示例{\"id\": 12345,\"account\": \"example_user\",\"avatar\": \"\",\"pay_money\": 500,\"country\": \"\",\"create_time\": \"2023-10-10T12:00:00Z\",\"score\": 110, // 更新后的积分\"latitude\": 40.7128,\"longitude\": -74.0060,\"province\": \"\",\"sex\": \"\",\"password\": \"\"}.\n2. 接收id和scoreCount两个参数，根据传入的用户id查询数据库表user中的用户信息，根据获取到的用户信息和scoreCount来更新表score中的积分，将更新后的用户信息以JSON格式返回."},
  {"task": "00058", "sql_prompt": "1. 表名ssm_store; (id(int),category(string),number(string),level(string),page(string),status(int)).\n2. 表名ssm_storebook; (id(int),isbn(string),storeId(int),number(int),inDate(string)).\n3. 表名ssm_book; (id(int),isbn(string),path(string),title(string),subtitle、originalTitle、marketPrice,intro(text),binding,pages,uthor,publisher,catalog(text),supply(int),status,hot(int),indate(string)).", "logic_prompt": "1. 店铺书籍出库接口: POST /storeBook/outWarehouse; URL参数传递; (ids:以逗号分隔的店铺图书ID列表); 响应格式{\"success\": true}.\n2. 根据请求路径中传入的参数ids从表ssm_storebook中获取指定id的书籍库存信息，多个ids时，以逗号分隔，迭代处理每个指定的书籍库存。从数据库表ssm_storebook中获取指定id的书籍库存信息对象；检查该对象是否为空，如果不为空，则执行下面的操作：在表ssm_storebook中检查number属性的值是否大于1；如果number大于1，将number减去1，然后更新表中的书籍信息；否则删除表ssm_storebook中的这本书籍；每个库存书籍对象还关联着表ssm_book根据库存书籍的id从表ssm_book中获取相关的书籍信息，如果书籍的供应数量大于0，则将书籍的供应数量减1，表示销售了一本书籍；如果书籍的供应数量小于1，将书籍的状态属性设置为 \"0\"，并将结果保存到对应的表中，如果操作成功，则返回{\"success\": true}，否则返回{\"success\": false}."},
  {"task": "00059", "sql_prompt": "1. 表名ssm_storebook; (id(int),isbn(string),storeId(int),number(int),inDate(string)).\n2. 表名ssm_book; (id(int),isbn(string),path(string),title(string),subtitle、originalTitle、marketPrice,intro(text),binding,pages,uthor,publisher,catalog(text),supply(int),status,hot(int),indate(string)).", "logic_prompt": "1. 清空店铺书籍库存: POST /storeBook/emptyWarehouse; URL参数传递; (ids:以逗号分隔的店铺图书ID列表); 响应格式{\"success\": true}.\n2. 根据请求路径中传入的ids从数据库表ssm_storebook中清空对应的库存书籍信息列表，对于每个库存书籍对象列表，还要从表ssm_book中删除关联的图书列表,当多个ids时，以逗号分隔，对每个库存书籍和其关联的图书列表执行删除操作，然后更新相关的库存书籍信息列表和图书列表,删除后，两个表都需要相应的更新number的数量。操作成功后，返回响应{\"success\": true,\"message\":\"清除成功\"}."},
  {"task": "00060", "sql_prompt": "1. 表名t_exam_paper_answer; (id(int),exam_paper_id(int),paper_name(varchar),paper_type(int),subject_id(int),system_score(int),user_score(int),paper_score(int),question_correct(int),question_count(int),do_time(int),status(int),create_user(int),create_time(datatime),task_exam_id(int)).\n2. 表名t_user; (id(int),user_uuid(varchar),user_name(varchar),password(varchar),real_name(varchar),age(int),sex(int,1.男 2女),birth_day(datetime),user_level(int),phone(varchar),role(int,1.学生 3.管理员),status(int,1.启用 2禁用),image_path(varchar),create_time(datetime),modify_time(datetime),last_active_time(datetime),deleted(bit),wx_open_id(varchar)).\n3. 表名t_subject; (id(int),name(varchar),level(int),level_name(varchar),item_order(int),deleted(bit)).", "logic_prompt": "1. 答卷分页接口：POST  /api/admin/examPaperAnswer/page;application/json; {\"subjectId\": null,  \"pageIndex\": 1,\"pageSize\": 10}; ApiResponse{ \"code\": 1, \"message\": \"成功\",\"response\": {\"total\": 4,\"list\": [{\"id\": 64,\"createTime\": \"\", \"userScore\": \"\",  \"subjectName\": \"\",  \"subjectId\": 1, \"questionCount\": 5,  \"questionCorrect\": 4,  \"paperScore\": \"\",  \"doTime\": \"\",  \"paperType\": 4, \"systemScore\": \"2\", \"status\": 2, \"paperName\": \"\",   \"userName\": \"\" }]}}.\n2. 根据传入的参数在表t_exam_paper_answer中查询答卷分页信息，同时从表t_user中获取参数user_name的值,从表t_subject中获取学科名称name。如果获取成功，返回ApiResponse；否则，返回失败的JSON响应，提示\"获取失败\"."},
  {"task": "00061", "sql_prompt": "1. 表名ums_user; (id(varchar(20)),username(varchar(15)),alias,password(varchar(100)),avatar(varchar(1000)),email,mobile,score(int),token,bio,active(bit(1)),status(bit(1)),role_id,create_time,modify_time).\n2. 表名bms_post; (id(varchar(20)),title,content(longtext),user_id(varchar(20)),comments(int),collects(int),view(int),top(bit(1)),essence(bit(1)),section_id,create_time,modify_time).\n3. 表名bms_tag; (id(varchar(20)),name,topic_count(int)).", "logic_prompt": "1. 帖子列表: GET /post/list; (tab=\"latest\"，pageNo=1，pageSize=10); ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 创建对象PostVO{id=\"\",userId=\"\",avatar=\"\",alias=\"\",username=\"\",title=\"\",comments=\"\",top=\"\",essence=bool,collects=int,tags=list<bms_tag>,view=int,createTime,modifyTime}；分页查询帖子列表，选择条件是：在bms_post和ums_user表中选择PostVO需要返回的字段，以bms_post.user_id与ums_user.id匹配为条件将两表连接，查询条件为传入的参数tab的值不等于 'hot'，按 create_time字段进行降序排序，如果tab的值等于 'hot'，按view字段降序排序，然后按create_time字段降序排序；查询后的结果映射到PostVO中，返回data为{[PostVO]}."},
  {"task": "00062", "sql_prompt": "1. 表名bms_tag; (id(varchar(20)),name,topic_count(int)).\n2. 表名bms_post_tag; (id(auto_increment),tag_id(varchar(20)),topic_id(varchar(20))).", "logic_prompt": "1. 帖子列表标签: GET /post/tag/list; application/json; PostVO{id=\"\",userId=\"\",avatar=\"\",alias=\"\",username=\"\",title=\"\",comments=\"\",top=\"\",essence=bool,collects=int,tags=list<bms_tag>,view=int,createTime,modifyTime}=list; ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 遍历输入参数，在bms_post_tag表中查询话题标签列表，查询条件是bms_post_tag.topic_id等于输入列表的PostVO.id；如果话题标签列表不为空，获取tag_id列表，并在bms_tag表中获取对应的记录，PostVO.tags设置为{bms_tags}；返回参数data设置为{[PostVO]}."},
  {"task": "00063", "sql_prompt": "1. 表名ums_user; (id(varchar(20)),username(varchar(15)),alias,password(varchar(100)),avatar(varchar(1000)),email,mobile,score(int),token,bio,active(bit(1)),status(bit(1)),role_id,create_time,modify_time).\n2. 表名bms_post; (id(varchar(20)),title,content(longtext),user_id(varchar(20)),comments(int),collects(int),view(int),top(bit(1)),essence(bit(1)),section_id,create_time,modify_time).\n3. 表名bms_tag; (id(varchar(20)),name,topic_count(int)).\n4. 表名bms_post_tag; (id(auto_increment),tag_id(varchar(20)),topic_id(varchar(20))).", "logic_prompt": "1. 帖子列表: GET /post/list; (tab=\"latest\"，pageNo=1，pageSize=10); ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 创建对象PostVO{id=\"\",userId=\"\",avatar=\"\",alias=\"\",username=\"\",title=\"\",comments=\"\",top=\"\",essence=bool,collects=int,tags=list<bms_tag>,view=int,createTime,modifyTime}；分页查询帖子列表，选择条件是：在bms_post和ums_user表中选择PostVO需要返回的字段，以bms_post.user_id与ums_user.id匹配为条件将两表连接，查询条件为传入的参数tab的值不等于 'hot'，按 create_time字段进行降序排序，如果tab的值等于 'hot'，按view字段降序排序，然后按create_time字段降序排序；查询后的结果映射到PostVO中；遍历PostVO，在bms_post_tag表中查询话题标签列表，查询条件是bms_post_tag.topic_id等于输入列表的PostVO.id；如果话题标签列表不为空，获取tag_id列表，并在bms_tag表中获取对应的记录，PostVO.tags设置为{bms_tags}；返回参数data设置为{[PostVO]}."},
  {"task": "00064", "sql_prompt": "1. 表名bms_post; (id(varchar(20)),title,content(longtext),user_id(varchar(20)),comments(int),collects(int),view(int),top(bit(1)),essence(bit(1)),section_id,create_time,modify_time).", "logic_prompt": "1. 帖子查询: POST /post; x-www-form-urlencoded; id=\"\"; ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 在bms_post表中查询话题，查询条件是id等于输入参数，如果不存在，返回信息data设置为“当前话题不存在，或已被作者删除”；如果存在，更新bms_post表：view加1；返回data设置为{bms_post记录}."},
  {"task": "00065", "sql_prompt": "1. 表名bms_tag; (id(varchar(20)),name,topic_count(int)).\n2. 表名bms_post_tag; (id(auto_increment),tag_id(varchar(20)),topic_id(varchar(20))).", "logic_prompt": "1. 帖子标签查询: POST /post/tag_list; x-www-form-urlencoded; id=\"\"; ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 在bms_post_tag表中查询tag_id列表，查询条件是topic_id等于输入参数；遍历tag_id列表，在bms_tag表中查询与id相等的记录列表；返回data设置为{bms_tag的记录}."},
  {"task": "00066", "sql_prompt": "1. 表名bms_post; (id(varchar(20)),title,content(longtext),user_id(varchar(20)),comments(int),collects(int),view(int),top(bit(1)),essence(bit(1)),section_id,create_time,modify_time).\n2. 表名ums_user; (id(varchar(20)),username(varchar(15)),alias,password(varchar(100)),avatar(varchar(1000)),email,mobile,score(int),token,bio,active(bit(1)),status(bit(1)),role_id,create_time,modify_time).\n3. 表名bms_follow; (id(auto_increment),parent_id(varchar(20)),follower_id(varchar(20))).", "logic_prompt": "1. 帖子用户查询: POST /post/uername; x-www-form-urlencoded; id=\"\"; ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 在bms_post表中查询话题，查询条件是id等于输入参数；在ums_user表中查询用户，查询条件是id等于bms_post.user_id；在bms_post表中查询user_id等于bms_post.user_id的记录数量topic_count，在bms_follow表中查询粉丝数，查询条件是parent_id等于bms_post.user_id；返回信息data设置为{\"username\":ums_user.username,\"count\":topic_count, \"followers\":粉丝数}."},
  {"task": "00067", "sql_prompt": "1. 表名bms_post; (id(varchar(20)),title,content(longtext),user_id(varchar(20)),comments(int),collects(int),view(int),top(bit(1)),essence(bit(1)),section_id,create_time,modify_time).\n2. 表名bms_post_tag; (id(auto_increment),tag_id(varchar(20)),topic_id(varchar(20))).\n3. 表名bms_tag; (id(varchar(20)),name,topic_count(int)).\n4. 表名ums_user; (id(varchar(20)),username(varchar(15)),alias,password(varchar(100)),avatar(varchar(1000)),email,mobile,score(int),token,bio,active(bit(1)),status(bit(1)),role_id,create_time,modify_time).\n5. 表名bms_follow; (id(auto_increment),parent_id(varchar(20)),follower_id(varchar(20))).", "logic_prompt": "1. 帖子查询: POST /post; x-www-form-urlencoded; id=\"\"; ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 在bms_post表中查询话题，查询条件是id等于输入参数，如果不存在，返回信息data设置为“当前话题不存在，或已被作者删除”；如果存在，更新bms_post表：view加1；在bms_post_tag表中查询tag_id列表，查询条件是topic_id等于输入参数；遍历tag_id列表，在bms_tag表中查询与id相等的记录列表；在ums_user表中查询用户，查询条件是id等于bms_post.user_id；在bms_post表中查询user_id等于bms_post.user_id的记录数量topic_count，在bms_follow表中查询粉丝数，查询条件是parent_id等于bms_post.user_id；返回信息data设置为{\"topic\":{bms_post记录}, \"tags\":{bms_tag记录},\"user\":{\"username\":ums_user.username,\"count\":topic_count, \"followers\":粉丝数}}."},
  {"task": "00068", "sql_prompt": "1. 表名bms_post; (id(varchar(20)),title,content(longtext),user_id(varchar(20)),comments(int),collects(int),view(int),top(bit(1)),essence(bit(1)),section_id,create_time,modify_time).", "logic_prompt": "1. 帖子推荐: POST /post/recommend; x-www-form-urlencoded; id=\"\"; ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 在bms_post表中选择出10条id不等于输入参数的随机记录，并按照 view 的值进行排序."},
  {"task": "00069", "sql_prompt": "1. 表名ums_user; (id(varchar(20)),username(varchar(15)),alias,password(varchar(100)),avatar(varchar(1000)),email,mobile,score(int),token,bio,active(bit(1)),status(bit(1)),role_id,create_time,modify_time).\n2. 表名bms_post; (id(varchar(20)),title,content(longtext),user_id(varchar(20)),comments(int),collects(int),view(int),top(bit(1)),essence(bit(1)),section_id,create_time,modify_time).", "logic_prompt": "1. 帖子更新: POST /post/update; application/json; Header:userName, bmsPost=Post; ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 在ums_user表中查询用户，查询条件是username等于输入参数；判断ums_user.id是否等于bmsPost.userId，如果不相等，返回data设置为\"非本人无权修改\"；如果相等，bmsPost.modifyTime设置为当前时间，并更新bms_post表中的记录，返回data设置为{bms_post记录}."},
  {"task": "00070", "sql_prompt": "1. 表名ums_user; (id(varchar(20)),username(varchar(15)),alias,password(varchar(100)),avatar(varchar(1000)),email,mobile,score(int),token,bio,active(bit(1)),status(bit(1)),role_id,create_time,modify_time).\n2. 表名bms_post; (id(varchar(20)),title,content(longtext),user_id(varchar(20)),comments(int),collects(int),view(int),top(bit(1)),essence(bit(1)),section_id,create_time,modify_time).", "logic_prompt": "1. 帖子删除: DELETE /post/delete/{id}; x-www-form-urlencoded; Header: userName; ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 在ums_user表中查询用户，查询条件是username等于输入参数；在bms_post表中查询帖子，查询条件是id等于输入参数，如果不存在，返回data设置为\"来晚一步，话题已不存在\"；判断ums_user.id是否等于bms_post.user_id，如果不相等，返回data设置为\"你为什么可以删除别人的话题？？？\"；在bms_post表中删除该帖子，返回data设置为\"删除成功\"."},
  {"task": "00071", "sql_prompt": "1. 表名oms_order_return_apply; (id, order_id, company_address_id, product_id, order_sn, create_time, member_username, return_amount(DECIMAL(10, 2)), return_name, return_phone, status, handle_time, product_pic, product_name, product_brand, product_attr, product_count, product_price(DECIMAL(10, 2)), product_real_price(DECIMAL(10, 2)), reason, description, proof_pics, handle_note, handle_man, receive_man, receive_time, receive_note).\n2. 表名oms_company_address; (id(BIGINT), address_name(VARCHAR), send_status(INTEGER), receive_status(INTEGER), name(VARCHAR), phone(VARCHAR), province(VARCHAR), city(VARCHAR), region(VARCHAR), detail_address(VARCHAR)).", "logic_prompt": "1. 分页查询退货申请接口：GET /returnApply/list; application/x-www-form-urlencoded; ApiResponse{{\"id\":\"服务单号\",\"receiverKeyword\":\"收货人姓名/号码\",\"status\":\"申请状态：0->待处理；1->退货中；2->已完成；3->已拒绝\",\"createTime\":\"申请时间\",\"handleMan\":\"处理人员\",\"handleTime\":\"处理时间\"}，\"pageSize\"：\"5\"，\"pageNum\"：\"1\"}; {\"pageNum\",\"pageSize\",\"totalPage\",\"total\"}.\n2. 实现获取分页查询退货申请相关的信息并遍历当前页的数据。返回{\"pageNum\",\"pageSize\",\"totalPage\",\"total\"}."},
  {"task": "00072", "sql_prompt": "1. 表名oms_order_return_apply; (id, order_id, company_address_id, product_id, order_sn, create_time, member_username, return_amount(DECIMAL(10, 2)), return_name, return_phone, status, handle_time, product_pic, product_name, product_brand, product_attr, product_count, product_price(DECIMAL(10, 2)), product_real_price(DECIMAL(10, 2)), reason, description, proof_pics, handle_note, handle_man, receive_man, receive_time, receive_note).\n2. 表名oms_company_address; (id(BIGINT), address_name(VARCHAR), send_status(INTEGER), receive_status(INTEGER), name(VARCHAR), phone(VARCHAR), province(VARCHAR), city(VARCHAR), region(VARCHAR), detail_address(VARCHAR)).", "logic_prompt": "1. 批量删除申请接口: POST /returnApply/delete; application/x-www-form-urlencoded; {\"ids\"}; ApiResponse{\"count\"}.\n2. 根据商品id号和状态条件，批量删除数据库中符合条件的退货申请记录。返回{\"count\"}."},
  {"task": "00073", "sql_prompt": "1. 表名oms_order_return_apply; (id, order_id, company_address_id, product_id, order_sn, create_time, member_username, return_amount(DECIMAL(10, 2)), return_name, return_phone, status, handle_time, product_pic, product_name, product_brand, product_attr, product_count, product_price(DECIMAL(10, 2)), product_real_price(DECIMAL(10, 2)), reason, description, proof_pics, handle_note, handle_man, receive_man, receive_time, receive_note).\n2. 表名oms_company_address; (id(BIGINT), address_name(VARCHAR), send_status(INTEGER), receive_status(INTEGER), name(VARCHAR), phone(VARCHAR), province(VARCHAR), city(VARCHAR), region(VARCHAR), detail_address(VARCHAR)).", "logic_prompt": "1. 获取退货申请详情接口: GET /returnApply/{id}; application/json; {\"ids\"}; ApiResponse{\"OmsCompanyAddress\"：\"公司收货地址\"}.\n2. 根据退货申请的ID获取退货申请的详细信息，并将该信息封装成一个包含公司收货地址的数据传输对象（DTO）。客户端可以通过访问/api/returnApply/{id}路径来获取特定退货申请的详细信息，包括基本信息和公司收货地址。返回{\"OmsCompanyAddress\"：\"公司收货地址\"}."},
  {"task": "00074", "sql_prompt": "1. 表名oms_order_return_apply; (id, order_id, company_address_id, product_id, order_sn, create_time, member_username, return_amount(DECIMAL(10, 2)), return_name, return_phone, status, handle_time, product_pic, product_name, product_brand, product_attr, product_count, product_price(DECIMAL(10, 2)), product_real_price(DECIMAL(10, 2)), reason, description, proof_pics, handle_note, handle_man, receive_man, receive_time, receive_note).\n2. 表名oms_company_address; (id(BIGINT), address_name(VARCHAR), send_status(INTEGER), receive_status(INTEGER), name(VARCHAR), phone(VARCHAR), province(VARCHAR), city(VARCHAR), region(VARCHAR), detail_address(VARCHAR)).", "logic_prompt": "1. 修改申请状态接口: POST /returnApply/update/status/{id}; application/json; {\"ids\"，{\"id\":\"服务单号\",\"companyAddressId\":\"收货地址关联id\",\"returnAmount\":\"确认退款金额\",\"handleNote\":\"处理备注\",\"handleMan\":\"处理人\",\"receiveNote\":\"收货备注\",\"receiveMan\":\"收货人\",\"status\":\"申请状态：1->退货中；2->已完成；3->已拒绝\"}}; ApiResponse{\"count\"}.\n2. 根据传入的参数修改退货申请的状态，根据不同的状态值，进行相应的操作：如果状态是1（表示确认退货），则设置退货申请的状态为1，同时更新相关信息，如退款金额、收货地址关联ID、处理时间、处理人和处理备注。如果状态是2（表示完成退货），则设置退货申请的状态为2，同时更新相关信息，如收货时间、收货人和收货备注。如果状态是3（表示拒绝退货），则设置退货申请的状态为3，同时更新相关信息，如处理时间、处理人和处理备注。如果状态不是1、2或3，则返回0，表示未进行任何更新操作。返回{\"count\"}."},
  {"task": "00075", "sql_prompt": "1. 表名oms_order；(id(BIGINT), memberId(BIGINT), couponId(BIGINT), orderSn(VARCHAR), createTime(TIMESTAMP), memberUsername(VARCHAR), totalAmount(DECIMAL), payAmount(DECIMAL), freightAmount(DECIMAL), promotionAmount(DECIMAL), integrationAmount(DECIMAL), couponAmount(DECIMAL), discountAmount(DECIMAL), payType(INTEGER), sourceType(INTEGER), status(INTEGER), orderType(INTEGER), deliveryCompany(VARCHAR), deliverySn(VARCHAR), autoConfirmDay(INTEGER), integration(INTEGER), growth(INTEGER), promotionInfo(VARCHAR), billType(INTEGER), billHeader(VARCHAR), billContent(VARCHAR), billReceiverPhone(VARCHAR), billReceiverEmail(VARCHAR), receiverName(VARCHAR), receiverPhone(VARCHAR), receiverPostCode(VARCHAR), receiverProvince(VARCHAR), receiverCity(VARCHAR), receiverRegion(VARCHAR), receiverDetailAddress(VARCHAR), note(VARCHAR), confirmStatus(INTEGER), deleteStatus(INTEGER), useIntegration(INTEGER), paymentTime(TIMESTAMP), deliveryTime(TIMESTAMP), receiveTime(TIMESTAMP), commentTime(TIMESTAMP), modifyTime(TIMESTAMP)).\n2. 表名oms_order_operate_history; (id(BIGINT), order_id(BIGINT), operate_man(VARCHAR(255), create_time(TIMESTAMP), order_status(INTEGER), note(VARCHAR(255)).", "logic_prompt": "1. 查询订单接口: GET /order/list; application/x-www-form-urlencoded; {\"orderSn\": \"订单编号\",   \"receiverKeyword\": \"收货人姓名/号码\",   \"status\": \"订单状态：0->待付款；1->待发货；2->已发货；3->已完成；4->已关闭；5->无效订单\",   \"orderType\": \"订单类型：0->正常订单；1->秒杀订单\",   \"sourceType\": \"订单来源：0->PC订单；1->app订单\",   \"createTime\": \"订单提交时间\"}.\n2. 充当订单查询的API接口，接受查询参数，执行订单查询操作，然后返回查询结果。可以根据订单编号、收货人姓名号码、订单状态、订单类型、订单来源、订单提交时间等条件查询订单，并且支持分页查询。返回参数{\"pageNum\",\"pageSize\",\"totalPage\",\"total\"}."},
  {"task": "00076", "sql_prompt": "1. 表名oms_order；(id(BIGINT), memberId(BIGINT), couponId(BIGINT), orderSn(VARCHAR), createTime(TIMESTAMP), memberUsername(VARCHAR), totalAmount(DECIMAL), payAmount(DECIMAL), freightAmount(DECIMAL), promotionAmount(DECIMAL), integrationAmount(DECIMAL), couponAmount(DECIMAL), discountAmount(DECIMAL), payType(INTEGER), sourceType(INTEGER), status(INTEGER), orderType(INTEGER), deliveryCompany(VARCHAR), deliverySn(VARCHAR), autoConfirmDay(INTEGER), integration(INTEGER), growth(INTEGER), promotionInfo(VARCHAR), billType(INTEGER), billHeader(VARCHAR), billContent(VARCHAR), billReceiverPhone(VARCHAR), billReceiverEmail(VARCHAR), receiverName(VARCHAR), receiverPhone(VARCHAR), receiverPostCode(VARCHAR), receiverProvince(VARCHAR), receiverCity(VARCHAR), receiverRegion(VARCHAR), receiverDetailAddress(VARCHAR), note(VARCHAR), confirmStatus(INTEGER), deleteStatus(INTEGER), useIntegration(INTEGER), paymentTime(TIMESTAMP), deliveryTime(TIMESTAMP), receiveTime(TIMESTAMP), commentTime(TIMESTAMP), modifyTime(TIMESTAMP)).\n2. 表名oms_order_operate_history; (id(BIGINT), order_id(BIGINT), operate_man(VARCHAR(255), create_time(TIMESTAMP), order_status(INTEGER), note(VARCHAR(255)).", "logic_prompt": "1. 批量发货接口：POST /order/update/delivery; application/json; {\"orderId\"：\"订单id\",\"deliveryCompany\"：\"物流公司\"，\"deliverySn\"：\"物流单号\"}.\n2. 实现批量发货功能，首先更新数据库中的订单状态为已发货，并记录了每个发货操作的操作历史记录，最后返回成功发货的订单数量。返回参数{\"code\",\"message\",\"data\"}."},
  {"task": "00077", "sql_prompt": "1. 表名oms_order；(id(BIGINT), memberId(BIGINT), couponId(BIGINT), orderSn(VARCHAR), createTime(TIMESTAMP), memberUsername(VARCHAR), totalAmount(DECIMAL), payAmount(DECIMAL), freightAmount(DECIMAL), promotionAmount(DECIMAL), integrationAmount(DECIMAL), couponAmount(DECIMAL), discountAmount(DECIMAL), payType(INTEGER), sourceType(INTEGER), status(INTEGER), orderType(INTEGER), deliveryCompany(VARCHAR), deliverySn(VARCHAR), autoConfirmDay(INTEGER), integration(INTEGER), growth(INTEGER), promotionInfo(VARCHAR), billType(INTEGER), billHeader(VARCHAR), billContent(VARCHAR), billReceiverPhone(VARCHAR), billReceiverEmail(VARCHAR), receiverName(VARCHAR), receiverPhone(VARCHAR), receiverPostCode(VARCHAR), receiverProvince(VARCHAR), receiverCity(VARCHAR), receiverRegion(VARCHAR), receiverDetailAddress(VARCHAR), note(VARCHAR), confirmStatus(INTEGER), deleteStatus(INTEGER), useIntegration(INTEGER), paymentTime(TIMESTAMP), deliveryTime(TIMESTAMP), receiveTime(TIMESTAMP), commentTime(TIMESTAMP), modifyTime(TIMESTAMP)).\n2. 表名oms_order_operate_history; (id(BIGINT), order_id(BIGINT), operate_man(VARCHAR(255), create_time(TIMESTAMP), order_status(INTEGER), note(VARCHAR(255)).", "logic_prompt": "1. 批量关闭订单接口：POST /order/update/close; application/x-www-form-urlencoded; {\"ids\",\"note\"}.\n2. 实现批量关闭订单，首先更新数据库中满足条件的订单状态为已关闭，然后记录每个订单的关闭操作历史，包括操作时间、操作人、订单状态和关闭备注等信息。最后返回成功关闭的订单数量。返回参数{\"count\"}."},
  {"task": "00078", "sql_prompt": "1. 表名oms_order；(id, memberId, couponId, orderSn, createTime, memberUsername, totalAmount, payAmount, freightAmount, promotionAmount, integrationAmount, couponAmount, discountAmount, payType, sourceType, status, orderType, deliveryCompany, deliverySn, autoConfirmDay, integration, growth, promotionInfo, billType, billHeader, billContent, billReceiverPhone, billReceiverEmail, receiverName, receiverPhone, receiverPostCode, receiverProvince, receiverCity, receiverRegion, receiverDetailAddress, note, confirmStatus, deleteStatus, useIntegration, paymentTime(TIMESTAMP), deliveryTime, receiveTime, commentTime, modifyTime).\n2. 表名oms_order_operate_history; (id(BIGINT), order_id(BIGINT), operate_man(VARCHAR(255), create_time, order_status(INTEGER), note(VARCHAR(255)).", "logic_prompt": "1. 批量删除订单接口：POST /order/delete; application/x-www-form-urlencoded; {\"ids\"}; ApiResponse{\"count\"}.\n2. 实现批量删除订单，将表oms_order中deleteStatus值设置为1，表示订单已删除。创建订单操作历史记录：为每个删除的订单创建一条操作历史记录，记录了创建时间为当前操作时间、操作人(后台管理员)、订单状态变更为0，以及订单删除的备注信息。将订单操作历史记录批量插入到数据库。最后返回成功删除的订单数量。返回参数{\"count\"}."},
  {"task": "00079", "sql_prompt": "1. 表名oms_order；(id, memberId, couponId, orderSn, createTime, memberUsername, totalAmount, payAmount, freightAmount, promotionAmount, integrationAmount, couponAmount, discountAmount, payType, sourceType, status, orderType, deliveryCompany, deliverySn, autoConfirmDay, integration, growth, promotionInfo, billType, billHeader, billContent, billReceiverPhone, billReceiverEmail, receiverName, receiverPhone, receiverPostCode, receiverProvince, receiverCity, receiverRegion, receiverDetailAddress, note, confirmStatus, deleteStatus, useIntegration, paymentTime(TIMESTAMP), deliveryTime, receiveTime, commentTime, modifyTime).\n2. 表名oms_order_operate_history; (id(BIGINT), order_id(BIGINT), operate_man(VARCHAR(255), create_time(TIMESTAMP), order_status(INTEGER), note(VARCHAR(255)).", "logic_prompt": "1. 获取订单详情接口:订单信息、商品信息、操作记录：GET /order/{id}; 请求参数{\"id\"}; ApiResponse{{\"id\": 123, \"memberId\": 456, \"couponId\": 789, \"orderSn\": \"ABC123\", \"createTime\": \"2023-10-09 14:30:00\", \"memberUsername\": \"john_doe\", \"totalAmount\": 100.00, \"payAmount\": 90.00, \"freightAmount\": 10.00, \"promotionAmount\": 5.00, \"integrationAmount\": 8.00, \"couponAmount\": 15.00, \"discountAmount\": 2.00, \"payType\": 1, \"sourceType\": 2, \"status\": 3, \"orderType\": 1, \"deliveryCompany\": \"ExpressShip\", \"deliverySn\": \"XYZ987\", \"autoConfirmDay\": 7, \"integration\": 50, \"growth\": 25, \"promotionInfo\": \"Discount coupon applied\", \"billType\": 1, \"billHeader\": \"John Doe\", \"billContent\": \"Purchase invoice\", \"billReceiverPhone\": \"555-123-4567\", \"billReceiverEmail\": \"john@example.com\", \"receiverName\": \"Jane Doe\", \"receiverPhone\": \"555-987-6543\", \"receiverPostCode\": \"12345\", \"receiverProvince\": \"California\", \"receiverCity\": \"Los Angeles\", \"receiverRegion\": \"Downtown\", \"receiverDetailAddress\": \"123 Main St\", \"note\": \"Please deliver to the front desk\", \"confirmStatus\": 2, \"deleteStatus\": 0, \"useIntegration\": 20, \"paymentTime\": \"2023-10-09 15:45:00\", \"deliveryTime\": \"2023-10-09 16:30:00\", \"receiveTime\": \"2023-10-09 17:15:00\", \"commentTime\": \"2023-10-09 18:00:00\", \"modifyTime\": \"2023-10-09 19:30:00\"}}.\n2. 实现获取订单详情信息，返回订单商品列表和订单操作记录列表信息。返回参数{{\"id\": 123, \"memberId\": 456, \"couponId\": 789, \"orderSn\": \"ABC123\", \"createTime\": \"2023-10-09 14:30:00\", \"memberUsername\": \"john_doe\", \"totalAmount\": 100.00, \"payAmount\": 90.00, \"freightAmount\": 10.00, \"promotionAmount\": 5.00, \"integrationAmount\": 8.00, \"couponAmount\": 15.00, \"discountAmount\": 2.00, \"payType\": 1, \"sourceType\": 2, \"status\": 3, \"orderType\": 1, \"deliveryCompany\": \"ExpressShip\", \"deliverySn\": \"XYZ987\", \"autoConfirmDay\": 7, \"integration\": 50, \"growth\": 25, \"promotionInfo\": \"Discount coupon applied\", \"billType\": 1, \"billHeader\": \"John Doe\", \"billContent\": \"Purchase invoice\", \"billReceiverPhone\": \"555-123-4567\", \"billReceiverEmail\": \"john@example.com\", \"receiverName\": \"Jane Doe\", \"receiverPhone\": \"555-987-6543\", \"receiverPostCode\": \"12345\", \"receiverProvince\": \"California\", \"receiverCity\": \"Los Angeles\", \"receiverRegion\": \"Downtown\", \"receiverDetailAddress\": \"123 Main St\", \"note\": \"Please deliver to the front desk\", \"confirmStatus\": 2, \"deleteStatus\": 0, \"useIntegration\": 20, \"paymentTime\": \"2023-10-09 15:45:00\", \"deliveryTime\": \"2023-10-09 16:30:00\", \"receiveTime\": \"2023-10-09 17:15:00\", \"commentTime\": \"2023-10-09 18:00:00\", \"modifyTime\": \"2023-10-09 19:30:00\"}}."},
  {"task": "00080", "sql_prompt": "1. 表名oms_order；(id, memberId, couponId, orderSn, createTime, memberUsername, totalAmount, payAmount, freightAmount, promotionAmount, integrationAmount, couponAmount, discountAmount, payType, sourceType, status, orderType, deliveryCompany, deliverySn, autoConfirmDay, integration, growth, promotionInfo, billType, billHeader, billContent, billReceiverPhone, billReceiverEmail, receiverName, receiverPhone, receiverPostCode, receiverProvince, receiverCity, receiverRegion, receiverDetailAddress, note, confirmStatus, deleteStatus, useIntegration, paymentTime(TIMESTAMP), deliveryTime, receiveTime, commentTime, modifyTime).\n2. 表名oms_order_operate_history; (id(BIGINT), order_id(BIGINT), operate_man(VARCHAR(255), create_time(TIMESTAMP), order_status(INTEGER), note(VARCHAR(255)).", "logic_prompt": "1. 修改收货人信息接口：POST /order/update/receiverInfo; 请求格式application/json; {\"orderId\":\"订单ID\",\"receiverName\":\"收货人姓名\",\"receiverPhone\":\"收货人电话\",\"receiverPostCode\":\"收货人邮编\",\"receiverDetailAddress\":\"详细地址\",\"receiverProvince\":\"省份/直辖市\",\"receiverCity\":\"城市\",\"receiverRegion\":\"区\",\"status\":\"订单状态：0->待付款；1->待发货；2->已发货；3->已完成；4->已关闭；5->无效订单\"}; ApiResponse{\"count\"}.\n2. 通过输入参数在oms_order表中，更新数据库中的订单记录。包括订单ID、操作历史的创建时间、操作人（在这里是\"后台管理员\"）、订单状态以及一条操作备注，说明了操作的目的，即\"修改收货人信息\"。实现更新订单的收货人信息，并在数据库中记录订单操作历史，用于追踪订单的修改记录。返回参数{\"count\"}."},
  {"task": "00081", "sql_prompt": "1. 表名bms_promotion; (id(auto_increment),title,link,description).", "logic_prompt": "1. 推广获取: GET /promotion/all; ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 遍历bms_promotion表的所有对象记录，返回data设置为{[bms_promotion的记录]}."},
  {"task": "00082", "sql_prompt": "1. 表名ums_user; (id(varchar(20)),username(varchar(15)),alias,password(varchar(100)),avatar(varchar(1000)),email,mobile,score(int),token,bio,active(bit(1)),status(bit(1)),role_id,create_time,modify_time).\n2. 表名bms_follow; (id(auto_increment),parent_id(varchar(20)),follower_id(varchar(20))).", "logic_prompt": "1. 关注操作: GET /relationship/subscribe/{userId}; application/json; Header: userName; ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 在ums_user表中查询用户，查询条件是username等于输入参数；判断ums_user.id是否等于输入参数，如果不相等，返回data为验证\"您脸皮太厚了，怎么可以关注自己呢 \uD83D\uDE2E\"；在bms_follow表中查询对象，查询条件是parent_id等于ums_user.id、follower_id等于输入参数，如果对象不为空，返回data为\"已关注\"；在bms_follow表中插入对象，插入条件是parent_id等于ums_user.id、follower_id等于输入参数，返回data为\"关注成功\"."},
  {"task": "00083", "sql_prompt": "1. 表名ums_user; (id(varchar(20)),username(varchar(15)),alias,password(varchar(100)),avatar(varchar(1000)),email,mobile,score(int),token,bio,active(bit(1)),status(bit(1)),role_id,create_time,modify_time).\n2. 表名bms_follow; (id(auto_increment),parent_id(varchar(20)),follower_id(varchar(20))).", "logic_prompt": "1. 关注取消: GET /relationship/unsubscribe/{userId}; application/json; Header: userName；ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 在ums_user表中查询用户，查询条件是username等于输入参数；在bms_follow表中查询对象，查询条件是parent_id等于输入参数、follower_id等于ums_user.id，如果对象为空，返回data为\"未关注！\"；在bms_follow表中删除对象，删除条件是parent_id等于ums_user.id、follower_id等于输入参数，返回data为\"取关成功\"."},
  {"task": "00084", "sql_prompt": "1. 表名ums_user; (id(varchar(20)),username(varchar(15)),alias,password(varchar(100)),avatar(varchar(1000)),email,mobile,score(int),token,bio,active(bit(1)),status(bit(1)),role_id,create_time,modify_time).\n2. 表名bms_follow; (id(auto_increment),parent_id(varchar(20)),follower_id(varchar(20))).", "logic_prompt": "1. 关注验证: GET /relationship/validate/{topicUserId}; application/json; Header: userName；ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 在ums_user表中查询用户，查询条件是username等于输入参数；如果用户为空，返回data为{\"hasFollow\":false}；如果用户不为空，在bms_follow表中查"},
  {"task": "00085", "sql_prompt": "1. 表名ums_user; (id(varchar(20)),username(varchar(15)),alias,password(varchar(100)),avatar(varchar(1000)),email,mobile,score(int),token,bio,active(bit(1)),status(bit(1)),role_id,create_time,modify_time).\n2. 表名bms_post; (id(varchar(20)),title,content(longtext),user_id(varchar(20)),comments(int),collects(int),view(int),top(bit(1)),essence(bit(1)),section_id,create_time,modify_time).\n3. 表名bms_post_tag; (id(auto_increment),tag_id(varchar(20)),topic_id(varchar(20))).\n4. 表名bms_tag; (id(varchar(20)),name,topic_count(int)).", "logic_prompt": "1. 帖子搜索: GET /search; x-www-form-urlencoded; (keyword=\"\",pageNum=0,pageSize=0); ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 创建对象PostVO{id=\"\",userId=\"\",avatar=\"\",alias=\"\",username=\"\",title=\"\",comments=\"\",top=\"\",essence=bool,collects=int,tags=list<bms_tag>,view=int,createTime,modifyTime}；分页查询帖子列表，选择条件是：在bms_post和ums_user表中选择PostVO需要返回的字段，以bms_post.user_id与ums_user.id匹配为条件将两表连接，查询条件是bms_post.title以keyword开头、或以keyword结尾、或包含keyword，按view字段降序排序，然后按create_time字段降序排序；查询后的结果映射到PostVO中；遍历PostVO，在bms_post_tag表中查询话题标签列表，查询条件是bms_post_tag.topic_id等于输入列表的PostVO.id；如果话题标签列表不为空，获取tag_id列表，并在bms_tag表中获取对应的记录，PostVO.tags设置为{bms_tags}；返回参数data设置为{[PostVO]}."},
  {"task": "00086", "sql_prompt": "1. 表名bms_tag; (id(varchar(20)),name,topic_count(int)).\n2. 表名bms_post_tag; (id(auto_increment),tag_id(varchar(20)),topic_id(varchar(20))).\n3. 表名bms_post; (id(varchar(20)),title,content(longtext),user_id(varchar(20)),comments(int),collects(int),view(int),top(bit(1)),essence(bit(1)),section_id,create_time,modify_time).", "logic_prompt": "1. 标签管理: GET /tag/{name}; x-www-form-urlencoded; (pageNum=1, pageSize=10); ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 在bms_tag表中查询标签，查询条件是bms_tag.name等于输入参数，如果不存在，返回data为\"话题不存在，或已被管理员删除\"；如果存在，在bms_post_tag表中查询topic_id列表，查询条件是bms_post_tag.tag_id等于bms_tag.id；分页查询bms_post表中的记录，查询条件是id等于bms_post_tag.topic_id列表；分页查询bms_tag表中的记录，查询条件是bms_tag.name不等于输入参数，按照bms_tag.topic_count列进行降序排序，最后以每页10条的方式返回第1页的结果；返回data设置为{\"topic\"={bms_post记录},\"hotTags\"={bms_tag记录}}."},
  {"task": "00087", "sql_prompt": "1. 表名bms_tip; (id(auto_increment),content(varchar(1000)),author(varchar(50)),type(tinyint)).", "logic_prompt": "1. 提示获取: GET /tip/today; ApiResponse{\"code\": 200,\"message\": \"操作成功\",\"data\": {}}.\n2. 从bms_tip表中随机选择一条记录，返回data设置为{bms_tip记录}."},
  {"task": "00088", "sql_prompt": "1. 表名tb_user; (user_id(int(8),auto_increment),user_name(varchar(30)),pass_word(varchar(30)),phone(bigint(12)),sex(varchar(6)),avatar(varchar(100)),nick_name(varchar(10))).\n2. 表名tb_address; (address_id(int(10),auto_increment),user_id(int(8)),consignee(varchar(10)),phone(bigint(12)),city(varchar(20)),address(varcahr(30)),street_number(varchar(20)),is_default(tinyint(1))).", "logic_prompt": "1. 地址获取: GET /user/v1/user/{userId}/address; x-www-form-urlencoded; (page=0,rows=0); ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 在tb_user表中查询用户，查询条件是user_id等于输入参数，如果用户不存在，返回(-1002, \"用户不存在\", null)；分页查询tb_address表中的记录，查询条件是tb_address.user_id等于输入参数，结果按照is_default字段降序排列；返回data设置为{tb_address记录}."},
  {"task": "00089", "sql_prompt": "1. 表名tb_address; (address_id(int(10),auto_increment),user_id(int(8)),consignee(varchar(10)),phone(bigint(12)),city(varchar(20)),address(varcahr(30)),street_number(varchar(20)),is_default(tinyint(1))).", "logic_prompt": "1. 地址获取: GET GET /user/v1/user/{userId}/address/{addressId}; ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 在tb_address表中查询地址，查询条件是address_id等于输入参数，如果地址为空或者tb_address.user_id不等于输入参数，返回(-1002, \"收货地址不存在\", null)；否则返回data设置为{address_id.address}."},
  {"task": "00090", "sql_prompt": "1. 表名tb_user; (user_id(int(8),auto_increment),user_name(varchar(30)),pass_word(varchar(30)),phone(bigint(12)),sex(varchar(6)),avatar(varchar(100)),nick_name(varchar(10))).\n2. 表名tb_address; (address_id(int(10),auto_increment),user_id(int(8)),consignee(varchar(10)),phone(bigint(12)),city(varchar(20)),address(varcahr(30)),street_number(varchar(20)),is_default(tinyint(1))).", "logic_prompt": "1. 地址添加: POST /user/v1/user/{userId}/address; application/json; TbAddress{address}; ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 判断输入参数的属性是否为空，如果为空，返回(-1004, \"字段不能为空\", null)；在tb_user表中查询用户，查询条件是user_id等于address.userId，如果用户不存在，返回(-1002, \"用户不存在\", null)；如果address.IsDefault为空则设置为false；如果address.IsDefault等于true，根据address.userId查询tb_address表中地址列表，并将is_default设置为false；将输入参数address插入到tb_address表中，返回data设置为{tb_address表的记录}."},
  {"task": "00091", "sql_prompt": "1. 表名tb_address; (address_id(int(10),auto_increment),user_id(int(8)),consignee(varchar(10)),phone(bigint(12)),city(varchar(20)),address(varcahr(30)),street_number(varchar(20)),is_default(tinyint(1))).", "logic_prompt": "1. 地址修改: POST /user/v1/user/{userId}/address/{addressId}; application/json; TbAddress{address}; ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 在tb_address表中查询地址，查询条件是：address_id等于输入参数；如果获取的地址为空或tb_address.user_id不等于输入参数address.userID，返回(-1002, \"收货地址不存在\", null)；如果address.consignee、address.phone、address.city、address.address、address.street_number不为空，则分别更新tb_address表中获取的地址字段；如果address.IsDefault不为空，根据address.userId查询tb_address表中地址列表，并将is_default设置为false，再更新表中的字段is_default为address.IsDefault，返回data设置为{tb_address表的记录}."},
  {"task": "00092", "sql_prompt": "1. 表名t_subject; (id(int),name(varchar),level(int),level_name(varchar),item_order(int),eleted(bit)).", "logic_prompt": "1. 学科列表接口: POST /api/admin/education/subject/list; 返回格式{\"code\": 1, \"message\": \"成功\",\n \"response\": [{\"id\": 64,  \"name\": \"\",  \"level\": 1,  \"levelName\": \"\", \"itemOrder\": null,  \"deleted\": false }]}.\n2. 该接口用来获取所有学科的列表信息，从表t_subject中检索学科列表；然后将结果组装成JSON响应对象；如果获取成功，则返回{\"code\": 1, \"message\": \"成功\",\n \"response\": [{\"id\": 64,  \"name\": \"\",  \"level\": 1,  \"levelName\": \"\", \"itemOrder\": null,  \"deleted\": false }]}。否则返回失败的响应，提示\"获取失败\"."},
  {"task": "00093", "sql_prompt": "1. 表名t_subject; (id(int),name(varchar),level(int),level_name(varchar),item_order(int),eleted(bit)).", "logic_prompt": "1. 学科分页接口: POST /api/admin/education/subject/page; application/json; {\"id\":\"\",\"level\": null, \"pageIndex\": 1,\"pageSize\": 10}；返回格式{\"code\": 1,\"message\": \"成功\",\"response\": { \"total\": 2,\"list\": [{\"id\": 64,\"name\": \"数学\",   \"level\": 1,  \"levelName\": \"一年级\"  }]}}.\n2. 获取分页的学科信息。根据传入的参数id、level返回与指定id和指定level匹配的学科，默认情况下，返回第一页，每页显示10个学科。如果返回成功，提示\"成功\"，状态码为1，且响应对象中包含符合筛选条件的学科总数 total 和学科列表组成的JSON响应对象，否则返回失败的响应，提示\"获取失败\"."},
  {"task": "00094", "sql_prompt": "1. 表名t_subject; (id(int),name(varchar),level(int),level_name(varchar),item_order(int),eleted(bit)).", "logic_prompt": "1. 学科查询接口: POST /api/admin/education/subject/select/{id}; application/json; {\"id\": \"\"}; {\"code\": 1, \"message\": \"成功\", \"response\": {\"id\": 64, \"name\": \"数学\", \"level\": 1, \"levelName\": \"一年级\"}}.\n2. 根据请求路径中传入的参数id在表t_subject中查询指定id的学科信息；如果查询成功，返回{\"code\": 1, \"message\": \"成功\", \"response\": {\"id\": 64, \"name\": \"数学\", \"level\": 1, \"levelName\": \"一年级\"}}.如果传入的id为负数，则返回\"id无效!\"的响应."},
  {"task": "00095", "sql_prompt": "1. 表名t_subject; (id(int),name(varchar),level(int),level_name(varchar),item_order(int),eleted(bit)).", "logic_prompt": "1. 学科编辑接口: POST /api/admin/education/subject/edit; application/json; {\"id\": 64, \"name\": \"数学\", \"level\": 2, \"levelName\": \"二年级\"}; ApiResponse{\"code\": 1, \"message\": \"成功\", \"response\": {\"id\": 64, \"name\": \"\", \"level\": 1, \"levelName\": \"\"}}.\n2. 根据输入参数id查询表t_subject中是否存在该id；如果表中不存在该id设置deleted为false并将输入参数插入表中，如果存在该id则根据输入参数更新数据库表；如果编辑成功，返回{\"code\": 1, \"message\": \"编辑成功\", \"response\": {\"id\": 64, \"name\": \"\", \"level\": 1, \"levelName\": \"\"}}，否则返回一个编辑失败的JSON响应."},
  {"task": "00096", "sql_prompt": "1. 表名t_subject; (id(int),name(varchar),level(int),level_name(varchar),item_order(int),eleted(bit)).", "logic_prompt": "1. 学科删除接口: POST /api/admin/education/subject/delete/{id}; URL参数传递; (\"id\": ); ApiResponse{\"code\": 1, \"message\": \"成功\", \"response\": null}.\n2. 根据输入参数id设置表t_subject中deleted字段为true并将结果更新到数据库表；如果删除成功，返回{\"code\": 1, \"message\": \"删除成功\", \"response\": null}."},
  {"task": "00097", "sql_prompt": "1. 表名t_exam_paper; (id(int), name(varchar), subject_id(int), paper_type(int), grade_level(int), score(int), question_count(int), suggest_time(int), limit_start_time(datetime), limit_end_time(datetime), frame_text_content_id(int), create_user(int), create_time(datetime), deleted(bit), task_exam_id(int)).", "logic_prompt": "1. 试卷分页接口: POST /api/admin/exam/paper/page; application/json; {\"id\": null, \"level\": null, \"subjectId\": null, \"pageIndex\": 1, \"pageSize\": 10}; 返回参数{\"code\": 1, \"message\": \"成功\", \"response\": {\"total\": 9, \"list\": [{\"id\": 64, \"name\": \"中级任务二\", \"questionCount\": 5, \"score\": 180, \"createTime\": \"2021-01-21 11:49:31\", \"createUser\": 2, \"subjectId\": 1, \"paperType\": 6, \"frameTextContentId\": 13}]}}.\n2. 根据输入参数在表t_exam_paper中查询试卷分页信息并根据id字段降序排列；如果查询成功，返回{\"code\": 1, \"message\": \"成功\", \"response\": {\"total\": 9, \"list\": [{\"id\": 64, \"name\": \"中级任务二\", \"questionCount\": 5, \"score\": 180, \"createTime\": \"2021-01-21 11:49:31\", \"createUser\": 2, \"subjectId\": 1, \"paperType\": 6, \"frameTextContentId\": 13}]}}."},
  {"task": "00098", "sql_prompt": "1. 表名t_exam_paper; (id(int), name(varchar), subject_id(int), paper_type(int), grade_level(int), score(int), question_count(int), suggest_time(int), limit_start_time(datetime), limit_end_time(datetime), frame_text_content_id(int), create_user(int), create_time(datetime), deleted(bit), task_exam_id(int)).\n2. 表名t_question; (id(int),question_type(int),subject_id(int),score(int),grade_level(int),difficult(int),correct(text),info_text_content_id(int),create_user(int),status(int),create_time(datetime),deleted(bit)).", "logic_prompt": "1. 试卷查询接口：POST /api/admin/exam/paper/select/{id}；URL参数传递；返回参数{ \"code\": 1,\"message\": \"成功\",\"response\": {\"id\": 64,   \"level\": 1,  \"subjectId\": 1,   \"paperType\": 1,  \"name\": \"\", \"suggestTime\": 20,  \"limitDateTime\": null,   \"titleItems\": [{\"name\": \"\",  \"questionItems\": [ { \"id\": 64, \"questionType\": 5,   \"subjectId\": 1, \"title\": \"\",  \"gradeLevel\": 1,   \"analyze\": \"\",  \"correct\": \"\",   \"score\": \"10\",  \"difficult\": 3 } ]}], \"score\": \"\"  }}.\n2. 从路径参数中提取id，根据该id从表t_exam_paper中检索试卷信息，对于检索的试卷信息还要从表t_question中获取对应的题目信息，如果检索成功，则返回{ \"code\": 1,\"message\": \"成功\",\"response\": {\"id\": 64,   \"level\": 1,  \"subjectId\": 1,   \"paperType\": 1,  \"name\": \"\", \"suggestTime\": 20,  \"suggest_time\": null,   \"titleItems\": [{\"name\": \"\",  \"questionItems\": [ { \"id\": 64,   \"questionType\": 5,   \"subjectId\": 1,  \"gradeLevel\": 1, \"analyze\": \"\", \"correct\": \"\",   \"score\": \"10\",  \"difficult\": 3} ]}], \"score\": \"\"  }}。否则返回失败的响应，提示\"试卷id不存在\"."},
  {"task": "00099", "sql_prompt": "1. 表名t_exam_paper; (id(int), name(varchar), subject_id(int), paper_type(int), grade_level(int), score(int), question_count(int), suggest_time(int), limit_start_time(datetime), limit_end_time(datetime), frame_text_content_id(int), create_user(int), create_time(datetime), deleted(bit), task_exam_id(int)).\n2. 表名t_question; (id(int),question_type(int),subject_id(int),score(int),grade_level(int),difficult(int),correct(text),info_text_content_id(int),create_user(int),status(int),create_time(datetime),deleted(bit)).", "logic_prompt": "1. 试卷编辑接口：POST /api/admin/exam/paper/edit;application/json; { \"id\": 64, \"level\": 1, \"subjectId\": 1, \"paperType\": 6,  \"name\": \"\", \"suggestTime\": 20, \"limitDateTime\": null,  \"titleItems\": [{\"name\": \"\",  \"questionItems\": [{\"id\": 64,  \"questionType\": 2, \"subjectId\": 1, \"title\": \"\", \"gradeLevel\": 1,  \"items\": [{ \"content\": \"\",  \"score\": null }], \"analyze\": \"\",  \"correct\": \"A,C\",\"score\": \"0\", \"difficult\": 3 }]}],\"score\": \"试卷总分\" }; ApiResponse{\"code\": 1,\"message\": \"成功\",\"response\": { \"id\": 64,  \"level\": 1,  \"subjectId\": 1,  \"paperType\": 6,  \"name\": \"\",   \"suggestTime\": 20,   \"titleItems\": [{ \"name\": \"\",  \"questionItems\": [{ \"id\": 64,  \"questionType\": 2,  \"subjectId\": 1,   \"title\": \"\",   \"gradeLevel\": 1, \"items\": [{\"content\": \"\", \"score\": null }], \"analyze\": \"\",\"correct\": \"A,C\", \"score\": \"0\",  \"difficult\": 3 }]} ], \"score\": \"18\" }}.\n检查传入的请求参数是否有效，如果无效，则返回适当的错误响应；如果请求参数中的 id 字段在表 t_exam_paper中为null或未提供，则创建一个新试卷到表t_exam_paper中；如果提供了 id 字段，则更新具有指定id的现有试卷；试卷的标题项titleItems至少包含一项，如果为空，返回\"请添加试卷标题\"的消息；试卷的题目项questionItems至少包含一项，如果为空,返回\"请添加题目\"的消息；对于插入或更新的试卷信息还要根据id相应的更新表t_question中对应的题目信息，并返回给questionItem[]。如果编辑成功，返回ApiResponse对象."},
  {"task": "00100", "sql_prompt": "1. 表名t_exam_paper; (id(int), name(varchar), subject_id(int), paper_type(int), grade_level(int), score(int), question_count(int), suggest_time(int), limit_start_time(datetime), limit_end_time(datetime), frame_text_content_id(int), create_user(int), create_time(datetime), deleted(bit), task_exam_id(int)).", "logic_prompt": "1. 试卷删除接口: POST /api/admin/exam/paper/delete/{id}; application/json; ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":null}.\n2. 根据输入参数在表t_exam_paper中查询任务试卷分页信息并根据id字段降序排列；返回{\"code\":1,\"message\":\"成功\",\"response\":{\"total\":1,\"list\":[{\"id\":64,\"name\":\"任务试卷五\",\"questionCount\":2,\"score\":60,\"createTime\":\"2021-08-02 14:36:26\",\"createUser\":2,\"subjectId\":1,\"paperType\":6,\"frameTextContentId\":26}]}}."},
  {"task": "00101", "sql_prompt": "1. 表名t_question; (id(int),question_type(int),subject_id(int),score(int),grade_level(int),difficult(int),correct(text),info_text_content_id(int),create_user(int),status(int),create_time(datetime),deleted(bit)).", "logic_prompt": "1. 题目分页接口: POST  /api/admin/question/page; application/json; { \"id\": null, \"questionType\": null,\"level\": null,\"subjectId\": null,\"pageIndex\": 1,\"pageSize\": 10}；返回参数{ \"code\": 1,\"message\": \"成功\",\n\"response\": { \"total\": 7,\"list\": [{ \"id\": 64, \"questionType\": 5,  \"textContentId\": null,\"createTime\": \"2021-01-21 11:45:57\",   \"subjectId\": 1,  \"createUser\": 2,  \"score\": \"10\", \"status\": 1,   \"correct\": \"\",   \"analyzeTextContentId\": null,   \"difficult\": \"\",  \"shortTitle\": \"\" }]}}.\n2. 根据传入的请求参数在表t_question查询题目分页信息，如果查询成功，返回{ \"code\": 1,\"message\": \"成功\",\"response\": { \"total\": 7,\"list\": [{ \"id\": 64, \"questionType\": 5,  \"textContentId\": null,\"createTime\": \"2021-01-21 11:45:57\",   \"subjectId\": 1,  \"createUser\": 2,  \"score\": \"10\", \"status\": 1,   \"correct\": \"\",   \"analyzeTextContentId\": null,   \"difficult\": \"\",  \"shortTitle\": \"\" }]}}。；否则返回提示\"失败\"的JSON响应."},
  {"task": "00102", "sql_prompt": "1. 表名t_question; (id(int),question_type(int),subject_id(int),score(int),grade_level(int),difficult(int),correct(text),info_text_content_id(int),create_user(int),status(int),create_time(datetime),deleted(bit)).", "logic_prompt": "1.题目查询接口：POST /api/admin/question/select/{id}；请求参数：(id:题目ID)；请求示例：/api/admin/question/select/5；返回参数：{\"code\": 1,\"message\": \"成功\", \"response\": {\"id\": 5,  \"questionType\": 5,  \"subjectId\": 4,   \"gradeLevel\": 1,\"correct\": \"\", \"score\": \"5\",  \"difficult\": 5}}.\n2. 从请求路径中提取id，从数据库中获取具有指定id的题目来检索题目信息，若题目存在，将在响应中返回{\"code\": 1,\"message\": \"成功\",\"response\": {\"id\": 5,  \"questionType\": 5, \"subjectId\": 4,  \"gradeLevel\": \"年级\", \"correct\": \"答案1\",  \"score\": \"5\",  \"difficult\": 5}}，否则返回一个失败的响应，提示\"失败\"."},
  {"task": "00103", "sql_prompt": "1. 表名t_question; (id(int),question_type(int),subject_id(int),score(int),grade_level(int),difficult(int),correct(text),info_text_content_id(int),create_user(int),status(int),create_time(datetime),deleted(bit)).", "logic_prompt": "1. 题目删除接口：POST  /api/admin/question/delete/{id}；URL参数传递；返回参数{\"code\": 1,\"message\": \"成功\",\"response\": null}.\n2. 从请求路径中提取id，这个id用于标识要删除的题目。根据该id从数据库中获取要删除的用户信息。标记获取到的题目对象的deleted属性为true，表示用户已被删除。更新已标记为已删除的题目对象，{\"code\": 1,\"message\": \"成功\",\"response\": null}；如果找不到指定的 id，返回\"id不存在\"的JSON响应."},
  {"task": "00104", "sql_prompt": "1. 表名t_question; (id(int),question_type(int),subject_id(int),score(int),grade_level(int),difficult(int),correct(text),info_text_content_id(int),create_user(int),status(int),create_time(datetime),deleted(bit)).", "logic_prompt": "1. 题目编辑接口：POST /api/admin/question/edit; application/json; {\"id\":1 , \"questionType\": 2,\"subjectId\": 2,  \"gradeLevel\": 1, \"correct\": \"\", \"score\": 8, \"difficult\":3}；返回参数：{ \"code\": 1,\"message\": \"成功\",\"response\": null}.\n2. 根据传入的请求参数检查id是否存在,如果 id不存在，则将输入参数插到表t_question中，否则将输入参数更新到表中。在插入或更新题目时，如果操作成功，返回响应{ \"code\": 1,\"message\": \"成功\",\"response\":{\"id\": 508,  \"questionType\": 5,  \"subjectId\": 4,  \"gradeLevel\": 1,  \"correct\": \"\",   \"score\": \"\",  \"difficult\": 5}}，否则返回一个失败的响应，提示\"失败\"."},
  {"task": "00105", "sql_prompt": "1. 表名t_task_exam; (id(int),title(varchar),grade_level(int),frame_text_content_id(int)、create_user(int),create_time(datetime),deleted(bit),create_user_name(varchar)).", "logic_prompt": "1. 任务分页接口: POST /api/admin/task/page; application/json; {\"gradeLevel\": null,\"pageIndex\": 1,\"pageSize\": 10}; 返回参数{\"code\": 1,\"message\": \"成功\",\"response\": {\"total\": \"\",\"list\": [{\"id\": 64,  \"title\": \"\", \"gradeLevel\": 1,  \"createUserName\": \"\",  \"createTime\": \"\", \"deleted\": false  }]}}。\n2. 根据传入的请求参数在表t_task_exam中检索任务分页信息。返回{\"code\": 1,\"message\": \"成功\",\"response\": {\"total\": \"\",\"list\": [{\"id\": 64,  \"title\": \"\", \"gradeLevel\": 1,  \"createUserName\": \"\",  \"createTime\": \"\", \"deleted\": false  }]}}."},
  {"task": "00106", "sql_prompt": "1. 表名t_task_exam; (id(int),title(varchar),grade_level(int),frame_text_content_id(int)、create_user(int),create_time(datetime),deleted(bit),create_user_name(varchar)).", "logic_prompt": "1. 任务删除接口：POST  /api/admin/task/delete/{id}；URL参数传递; {\"id\":\"\"}; 返回参数{\"code\": 1,   \"message\": \"成功\", \"response\": null}.\n2. 根据输入参数id设置表t_task_exam中deleted字段为true并将结果更新到数据库表；如果删除成功，返回{\"code\": 1, \"message\": \"删除成功\", \"response\": null}."},
  {"task": "00107", "sql_prompt": "1. 表名t_task_exam; (id(int),title(varchar),grade_level(int),frame_text_content_id(int)、create_user(int),create_time(datetime),deleted(bit),create_user_name(varchar)).\n2. 表名t_exam_paper; (id(int), name(varchar), subject_id(int), paper_type(int), grade_level(int), score(int), question_count(int), suggest_time(int), limit_start_time(datetime), limit_end_time(datetime), frame_text_content_id(int), create_user(int), create_time(datetime), deleted(bit), task_exam_id(int)).", "logic_prompt": "1. 任务查询接口: POST   /api/admin/task/select/{id}; application/json; 返回参数{\"code\": 1,\"message\": \"\",\"response\": { \"id\": 64, \"gradeLevel\": 12,  \"title\": \"\",  \"paperItems\": [{\"id\": 64,  \"name\": \"\",  \"questionCount\": 5, \"score\": 275,  \"createTime\": \"2021-08-12 15:02:50\",  \"createUser\": 2, \"subjectId\": 46, \"paperType\": 6,\"frameTextContentId\": 2897}]}}.\n3.任务查询接口：从请求路径中提取id，根据该id从表t_task_exam中获取指定id的任务信息，仅包括id、gradeLevel、title参数信息，同时还要从表t_exam_paper中获取试卷信息，包含字段id、name、questionCount、score、createTime、createUser、subjectId、paperType、frameTextContentId，如果查询成功，返回{\"code\": 1,\"message\": \"成功\",\"response\": { \"id\": 1, \"gradeLevel\": 12,  \"title\": \"\",  \"paperItems\": [{\"id\": 1,  \"name\": \"\",  \"questionCount\": 5, \"score\": 275,  \"createTime\": \"2021-08-12 15:02:50\",  \"createUser\": 2, \"subjectId\": 46, \"paperType\": 6,\"frameTextContentId\": 2897}]}}."},
  {"task": "00108", "sql_prompt": "1. 表名t_task_exam; (id(int),title(varchar),grade_level(int),frame_text_content_id(int)、create_user(int),create_time(datetime),deleted(bit),create_user_name(varchar)).\n2. 表名t_exam_paper; (id(int), name(varchar), subject_id(int), paper_type(int), grade_level(int), score(int), question_count(int), suggest_time(int), limit_start_time(datetime), limit_end_time(datetime), frame_text_content_id(int), create_user(int), create_time(datetime), deleted(bit), task_exam_id(int)).", "logic_prompt": "1. 任务编辑接口: POST /api/admin/task/edit; application/json; {\"id\": 64,\"gradeLevel\": 1, \"title\": \"\", \"paperItems\": [{ \"id\": 64,  \"name\": \"\",   \"questionCount\": 5,   \"score\": 180,   \"createTime\": \"2021-01-21 11:49:11\",  \"createUser\": 2,  \"subjectId\": 1,  \"paperType\": 6,   \"frameTextContentId\": 12  }]}; ApiResponse{ \"code\": 1,\"message\": \"成功\",\"response\": {\"id\": 1,  \"gradeLevel\": 1,   \"title\": \"\",  \"paperItems\": [ { \"id\": 64, \"name\": \"\",   \"questionCount\": 5,  \"score\": 180,  \"createTime\": \"2021-01-21 11:49:11\",  \"createUser\": 2,  \"subjectId\": 1,  \"paperType\": 6,  \"frameTextContentId\": 12 }]}}.\n2. 编辑任务并提供更新后的信息。首先检查请求数据，确保任务的 id 在表t_task_exam中存在。检查输入的 paperItems 列表不为空，针对列表中的每个 paperItem，验证数据中是否提供了 id、name、questionCount、score、createTime、createUser、subjectId 和 frameTextContentId，并且格式有效。然后使用输入的参数 gradeLevel 和 title 更新表t_task_exam中的title、grade_level；并根据输入参数中的paperItems列表信息更新表t_exam_paper中相关字段的值。创建一个paperItems对象，用来保存根据输入对象paperItems列表更新表t_exam_paper中的试卷信息。最后返回ApiResponse."},
  {"task": "00109", "sql_prompt": "1. 表名t_message; (id,title(varchar),content(varchar),create_time(datetime),send_user_id(int),send_user_name(varchar),send_real_name(varchar),receive_user_count(int),read_count(int)).\n2. 表名t_message_user; (id(int),message_id(int),receive_user_id(int),receive_user_name(varchar)receive_real_name(varchar),readed(bit),create_time(datetime),read_time(datetime)).", "logic_prompt": "1. 消息分页接口: POST  /api/admin/message/page; application/json; {\"sendUserName\": null,\"pageIndex\": 0, \"pageSize\": 10}；ApiResponse{\"code\": 1,\"message\": \"成功\",\"response\": {\"total\": 36,\"list\": [{\"id\": 64,   \"title\": \"\", \"content\": \"\", \"sendUserName\": \"\", \"receiveUserName\":\"\",\"receiveUserCount\": 1,  \"readCount\": 1,  \"createTime\": \"\" }]}}.\n2. 根据传入的请求参数在表t_message中获取消息分页列表，创建一个ApiResponse对象，用来保存获取到的消息分页列表，并根据消息分页列表中的id从表t_message_user中获取对应的receiveUserName，并将获取到的receiveUserName参数包含在ApiResponse对象中返回。另外，如果提供了 sendUserName 查询参数，则过滤消息以仅包括由指定用户发送的消息。如果检索成功则返回ApiResponse."},
  {"task": "00110", "sql_prompt": "1. 表名t_message; (id,title(varchar),content(varchar),create_time(datetime),send_user_id(int),send_user_name(varchar),send_real_name(varchar),receive_user_count(int),read_count(int)).\n2. 表名t_message_user; (id(int),message_id(int),receive_user_id(int),receive_user_name(varchar)receive_real_name(varchar),readed(bit),create_time(datetime),read_time(datetime)).\n3. 表名t_user; (id(int),user_uuid(varchar),user_name(varchar),password(varchar),real_name(varchar),age(int),sex(int,1.男 2女),birth_day(datetime),user_level(int),phone(varchar),role(int,1.学生 3.管理员)、status(int,1.启用 2禁用),image_path(varchar),create_time(datetime),modify_time(datetime),last_active_time(datetime),deleted(bit),wx_open_id(varchar)).", "logic_prompt": "1. 消息发送接口: POST /api/admin/message/send ；application/json；请求参数：{\"title\": \"\",  \"content\": \"\", \"receiveUserIds\": [1,2]}。ApiResponse:{\"code\": 1,  \"message\": \"成功\", \"response\": null}.\n2. 根据传入的参数检查 title 和 content 是否为空，如果不为空，将其插入到表t_message中，并获取对应的id,该id对应表t_message_user中的message_id；同时 receiveUserIds 列表包含至少一个接收者的用户id;根据receiveUserIds列表从表t_user获取每个对应id的用户名和真实名,将每个对应id的用户名和真实名插入到表t_message_user中对应的receive_user_id、receive_user_name、receive_real_name；如果操作成功，返回给ApiResponse对象中的response."},
  {"task": "00111", "sql_prompt": "1. 表名t_user; (id(int), user_uuid(varchar), user_name(varchar), password(varchar), real_name(varchar), age(int), sex(int), birth_day(datetime), user_level(int), phone(varchar), role(int), status(int), image_path(varchar), create_time(datetime), modify_time(datetime), last_active_time(datetime), deleted(bit), wx_open_id(varchar)).\n2. 表名t_user_token; (id(int), token(varchar), user_id(int), wx_open_id(varchar),  create_time(timestamp), end_time(timestamp), user_name(varchar)).", "logic_prompt": "1. wx小程序账号登录接口: POST /api/wx/student/auth/bind; application/json; {\"userName\":\"student\",\"password\":\"123456\",\"code\":\"\"}; ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":null}.\n2. 在t_user表中查询用户名等于输入参数的用户对象，如果不存在则返回{\"code\":2,\"message\":\"用户名或密码错误\",\"response\":null}；如果存在则将用户名对应的密码取出并解密查看与输入密码是否匹配，如果不匹配则返回{\"code\":2,\"message\":\"用户名或密码错误\",\"response\":null}；如果用户名密码都匹配则继续查询该用户的status如果status为2则返回{\"code\":3,\"message\":\"用户被禁用\",\"response\":null}；如果status为1则继续查询wx_open_id是否为微信的OpenId如果不是则返回{\"code\":4,\"message\":\"获取微信OpenId失败\",\"response\":null}；最后根据绑定的用户更新modify_time并同时更新t_user_token表，返回{\"code\":1,\"message\":\"成功\",\"response\":null}."},
  {"task": "00112", "sql_prompt": "1. 表名t_user; (id(int), user_uuid(varchar), user_name(varchar), password(varchar), real_name(varchar), age(int), sex(int), birth_day(datetime), user_level(int), phone(varchar), role(int), status(int), image_path(varchar), create_time(datetime), modify_time(datetime), last_active_time(datetime), deleted(bit), wx_open_id(varchar)).\n2. 表名t_user_event_log; (id(int), user_id(int), user_name(varchar), real_name(varchar), content(text), create_time(datetime)).", "logic_prompt": "1. wx小程序账号注册接口: POST /api/wx/student/user/register; application/json; {\"userName\":\"student2\",\"password\":\"123456\",\"userLevel\":1}; ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":null}\n2. 在t_user表中查询用户名等于输入参数的用户对象，如果存在则返回{\"code\":2,\"message\":\"用户已存在\",\"response\":null}；根据输入参数创建一个用户对象，user_uuid自动生成，对Password进行加密后存储到数据库中，role设置为1，status设置为1，last_active_time设置为当前日期，create_time设置为当前日期，deleted设置为false，将这个用户对象插入到t_user表中；根据输入的用户id、user_name、real_name和当前日期类创建一个用户日志对象，设置content为\"欢迎 \" + user_name + \" 注册来到学之思开源考试系统\"，将这个对象更新到t_user_event_log表中，返回{\"code\":1,\"message\":\"成功\",\"response\":null}."},
  {"task": "00113", "sql_prompt": "1. 表名t_user; (id(int), user_uuid(varchar), user_name(varchar), password(varchar), real_name(varchar), age(int), sex(int), birth_day(datetime), user_level(int), phone(varchar), role(int), status(int), image_path(varchar), create_time(datetime), modify_time(datetime), last_active_time(datetime), deleted(bit), wx_open_id(varchar)).", "logic_prompt": "1. 获取当前用户信息接口：POST  /api/admin/user/current; 返回参数{\"code\": 1,\"message\": \"成功\",\n\"response\": { \"id\": 64,\"userUuid\": \"\",  \"userName\": \"admin\", \"realName\": \"\", \"age\": 30, \"role\": 3, \"sex\": 1, \n\"birthDay\": \"2019-09-07 18:56:07\",  \"phone\": null, \"lastActiveTime\": \"\",  \"createTime\": \"\",   \"modifyTime\": \"\", \n \"status\": 1, \"userLevel\": null,\"imagePath\": null }}.\n2. 接收请求后创建一个用户响应对象，从用户响应对象中获取当前的用户信息，如果成功获取，返回一个成功的响应，提示\"获取成功\"，包括响应数据 { \"id\": 64,\"userUuid\": \"\",  \"userName\": \"admin\", \"realName\": \"\", \"age\": 30, \"role\": 3, \"sex\": 1, \"birthDay\": \"2019-09-07 18:56:07\",  \"phone\": null, \"lastActiveTime\": \"\",  \"createTime\": \"\",   \"modifyTime\": \"\", \"status\": 1, \"userLevel\": null,\"imagePath\": null }}；如果获取失败，则返回一个失败的响应，提示\"获取失败\"."},
  {"task": "00114", "sql_prompt": "1. 表名t_user; (id(int), user_uuid(varchar), user_name(varchar), password(varchar), real_name(varchar), age(int), sex(int), birth_day(datetime), user_level(int), phone(varchar), role(int), status(int), image_path(varchar), create_time(datetime), modify_time(datetime), last_active_time(datetime), deleted(bit), wx_open_id(varchar)).", "logic_prompt": "1. 个人信息修改接口：POST  /api/admin/user/update；application/json; {\"id\": 64,\"userUuid\": \"\",  \"userName\": \"\",\"realName\": \"\",\"age\": 30, \"role\": 3, \"sex\": 1,  \"birthDay\": \"2021-09-07 18:56:07\", \"phone\": \"\", \"lastActiveTime\": \"\", \"createTime\": \"\", \"modifyTime\": \"\", \"status\": 1, \"userLevel\": null,  \"imagePath\": null }; 返回参数{ \"code\": 1, \"message\": \"成功\", \"response\": null}.\n2. 当发起 POST 请求到该接口时，服务器会接收到一个包含更新后用户信息的 JSON 请求体。请求体中的 realName 和 phone 字段不能为空，如果它们为空，服务器会以适当的错误消息和表示验证失败的状态码（例如，400 Bad Request）来响应；如果请求数据有效，服务器会根据当前已认证用户的 id获取要更新的用户。然后将请求体中的属性（realName 和 phone）更新到用户对象的相应字段中，用户的修改时间将被更新为当前日期和时间；使用 userService.updateByIdFilter(user) 方法来更新数据库中的用户信息；最后，返回一个表示用户信息已成功更新的响应."},
  {"task": "00115", "sql_prompt": "1. 表名t_user; (id(int), user_uuid(varchar), user_name(varchar), password(varchar), real_name(varchar), age(int), sex(int), birth_day(datetime), user_level(int), phone(varchar), role(int), status(int), image_path(varchar), create_time(datetime), modify_time(datetime), last_active_time(datetime), deleted(bit), wx_open_id(varchar)).", "logic_prompt": "1. 用户信息查询接口：POST /api/admin/user/selectByUserName；application/json; {\"userName\": \"\"}; 返回参数{\"code\": 1, \"message\": \"成功\",\"response\": [{ \"userName\": \"\", \"id\": 1，\"age\":25, }]}.\n2. 根据传入的参数查询用户信息，如果用户名存在，返回一个包含用户信息的列表，如果用户名不存，返回一个包含错误消息的响应，提示\"用户名不存在\"."},
  {"task": "00116", "sql_prompt": "1. 表名t_user_token; (id(int), token(varchar), user_id(int), wx_open_id(varchar),  create_time(timestamp), end_time(timestamp), user_name(varchar)).", "logic_prompt": "1. 检查账号绑定接口: POST /api/wx/student/auth/checkBind; application/json; {\"code\":\"\"}; ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":\"\"}.\n2. 在t_user_token表中查询wx_open_id等于输入参数的openid对象，如果为空则返回{\"code\":3,\"message\":\"获取微信OpenId失败\",\"response\":null}；根据输入参数创建一个用户登录令牌对象，在t_user_token表中查询该用户登录令牌是否存在如果不存在则返回{\"code\":2,\"message\":\"用户未绑定\",\"response\":null}；返回{\"code\":1,\"message\":\"成功\",\"response\":登录令牌}."},
  {"task": "00117", "sql_prompt": "1. 表名t_user_token; (id(int), token(varchar), user_id(int), wx_open_id(varchar),  create_time(timestamp), end_time(timestamp), user_name(varchar)).\n2. 表名t_user; (id(int), user_uuid(varchar), user_name(varchar), password(varchar), real_name(varchar), age(int), sex(int), birth_day(datetime), user_level(int), phone(varchar), role(int), status(int), image_path(varchar), create_time(datetime), modify_time(datetime), last_active_time(datetime), deleted(bit), wx_open_id(varchar)).", "logic_prompt": "1. 解绑退出接口: POST /api/wx/student/auth/unBind; application/json; {\"token\":\"\"}; ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":null}.\n2. 根据输入参数在t_user_token表中查找对应的用户id；根据用户id在t_user表中更新modify_time为当前日期，设置wx_open_id为null；在t_user_token表中删除对应id的那一行数据；返回{\"code\":1,\"message\":\"成功\",\"response\":null}."},
  {"task": "00118", "sql_prompt": "1. 表名t_exam_paper; (id(int), name(varchar), subject_id(int), paper_type(int), grade_level(int), score(int), question_count(int), suggest_time(int), limit_start_time(datetime), limit_end_time(datetime), frame_text_content_id(int), create_user(int), create_time(datetime), deleted(bit), task_exam_id(int)).\n2. 表名t_user; (id(int), user_uuid(varchar), user_name(varchar), password(varchar), real_name(varchar), age(int), sex(int), birth_day(datetime), user_level(int), phone(varchar), role(int), status(int), image_path(varchar), create_time(datetime), modify_time(datetime), last_active_time(datetime), deleted(bit), wx_open_id(varchar)).\n3. 表名t_user_token; (id(int), token(varchar), user_id(int), wx_open_id(varchar),  create_time(timestamp), end_time(timestamp), user_name(varchar)).", "logic_prompt": "1. 主页试卷列表接口: POST /api/wx/student/dashboard/index; application/json; {\"token\":\"\"}; ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":{\"fixedPaper\":[{\"id\":66,\"name\":\"aaa\",\"limitStartTime\":null,\"limitEndTime\":null}],\"timeLimitPaper\":[{\"id\":66,\"name\":\"202008705\",\"limitStartTime\":1600704000000,\"limitEndTime\":1664985600000,\"startTime\":\"2020-09-22 00:00:00\",\"endTime\":\"2022-10-06 00:00:00\"}],\"classPaper\":[{\"paperId\":21,\"paperName\":\"20200908\",\"className\":\"1班\"}]}}.\n2. 根据输入参数在t_user_token表中查找对应的用户id；根据用户id在t_user表中查找学生年级user_level；在t_exam_paper表中查询与学生年级对应的grade_level值；通过grade_level值在t_exam_paper表中查找对应的考试试卷类型paper_type；设置限定时间类考试，设置考试日期create_time为当前日期，grade_level和paper_type和上述查找到的值一致；在表t_exam_paper中设置限定时间类考试试卷名name，考试开始时间limit_start_time，考试结束时间limit_end_time；返回{\"code\":1,\"message\":\"成功\",\"response\":\n{\"fixedPaper\":[{\"id\":66,\"name\":\"aaa\",\"limitStartTime\":null,\"limitEndTime\":null}],\n\"timeLimitPaper\":[{\"id\":66,\"name\":\"202008705\",\"limitStartTime\":1600704000000,\"limitEndTime\":1664985600000,\"startTime\":\"2020-09-22 00:00:00\",\"endTime\":\"2022-10-06 00:00:00\"}],\n\"classPaper\":[{\"paperId\":21,\"paperName\":\"20200908\",\"className\":\"1班\"}]}}."},
  {"task": "00119", "sql_prompt": "1. 表名t_text_content; (id(int), content(text), create_time(datetime)).\n2. 表名t_task_exam_customer_answer; (id(int), task_exam_id(int), create_user(int), create_time(datetime), text_content_id(int)).\n3. 表名t_task_exam; (id(int), title(varchar), grade_level(int), frame_text_content_id(int), create_user(int), create_time(datetime), deleted(bit), create_user_name(varchar)).\n4. 表名t_user; (id(int), user_uuid(varchar), user_name(varchar), password(varchar), real_name(varchar), age(int), sex(int), birth_day(datetime), user_level(int), phone(varchar), role(int), status(int), image_path(varchar), create_time(datetime), modify_time(datetime), last_active_time(datetime), deleted(bit), wx_open_id(varchar)).\n5. 表名t_user_token; (id(int), token(varchar), user_id(int), wx_open_id(varchar),  create_time(timestamp), end_time(timestamp), user_name(varchar)).", "logic_prompt": "1. 任务中心接口: POST /api/wx/student/dashboard/task; application/json; {\"token\":\"\"}; ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":[{\"id\":66,\"title\":\"基础任务\",\"paperItems\":[{\"examPaperId\":19,\"examPaperName\":\"基础任务一\",\"examPaperAnswerId\":9,\"status\":2}]}]}.\n2. 根据输入参数在t_user_token表中查找对应的用户id；根据用户id在t_user表中查找学生年级user_level；在t_task_exam表中查询符合学生年级的grade_level值并记录对应任务考试id；通过任务考试id和用户id在t_task_exam_customer_answer表中查找对应的考试答卷id；并将所有结果记录在t_text_content表中的content里；返回{\"code\":1,\"message\":\"成功\",\"response\":{\"fixedPaper\":[{\"id\":66,\"name\":\"aaa\",\"limitStartTime\":null,\"limitEndTime\":null}],\"timeLimitPaper\":[{\"id\":66,\"name\":\"202008705\",\"limitStartTime\":1600704000000,\"limitEndTime\":1664985600000,\"startTime\":\"2020-09-22 00:00:00\",\"endTime\":\"2022-10-06 00:00:00\"}],\"classPaper\":[{\"paperId\":21,\"paperName\":\"20200908\",\"className\":\"1班\"}]}}."},
  {"task": "00120", "sql_prompt": "1. 表名t_exam_paper; (id(int), name(varchar), subject_id(int), paper_type(int), grade_level(int), score(int), question_count(int), suggest_time(int), limit_start_time(datetime), limit_end_time(datetime), frame_text_content_id(int), create_user(int), create_time(datetime), deleted(bit), task_exam_id(int)).\n2. 表名t_user; (id(int), user_uuid(varchar), user_name(varchar), password(varchar), real_name(varchar), age(int), sex(int), birth_day(datetime), user_level(int), phone(varchar), role(int), status(int), image_path(varchar), create_time(datetime), modify_time(datetime), last_active_time(datetime), deleted(bit), wx_open_id(varchar)).", "logic_prompt": "1. 试卷列表接口: POST /api/wx/student/exampaper/pageList; application/json; {\"paperType\":1,\"pageIndex\":1,\"pageSize\":20}; ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":{\"total\":9,\"list\":[{\"id\":66,\"name\":\"固定试卷\",\"questionCount\":1,\"score\":50,\"createTime\":\"2021-09-10 16:06:45\",\"createUser\":2,\"subjectId\":4,\"subjectName\":\"语文\",\"paperType\":1,\"frameTextContentId\":294,\"startTime\":\"\",\"endTime\":\"\",\"paperTypeStr\":\"固定试卷\",\"scoreStr\":\"5\",\"suggestTimeStr\":\"20分钟\"}]}}.\n2. 根据user_id在t_user表中查询学生年级user_level；根据传入参数在t_exam_paper表中查询对应的考试试卷分页信息；返回{\"code\":1,\"message\":\"成功\",\"response\":{\"total\":9,\"list\":[{\"id\":66,\"name\":\"固定试卷\",\"questionCount\":1,\"score\":50,\"createTime\":\"2021-09-10 16:06:45\",\"createUser\":2,\"subjectId\":4,\"subjectName\":\"语文\",\"paperType\":1,\"frameTextContentId\":294,\"startTime\":\"\",\"endTime\":\"\",\"paperTypeStr\":\"固定试卷\",\"scoreStr\":\"5\",\"suggestTimeStr\":\"20分钟\"}]}}."},
  {"task": "00121", "sql_prompt": "1. 表名tb_address; (address_id(int(10),auto_increment),user_id(int(8)),consignee(varchar(10)),phone(bigint(12)),city(varchar(20)),address(varcahr(30)),street_number(varchar(20)),is_default(tinyint(1))).", "logic_prompt": "1. 地址删除: DELETE /user/v1/user/{userId}/address/{addressId}; application/json; TbAddress{address}; ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 在tb_address表中查询地址，查询条件是：address_id等于输入参数；如果获取的地址为空或tb_address.user_id不等于输入参数address.userID，返回(-1002, \"收货地址不存在\", null)；如果address.Default为true，则在tb_address表中tb_address.user_id用户的一个address_id最大的地址设置为true，如果没有其他地址了就不用操作；在tb_address表中删除该地址，返回选择删除的是默认地址， 选该用户的一个id最大的地址为默认地址, 如果没有其他地址，返回(100, \"成功\", null)."},
  {"task": "00122", "sql_prompt": "1. 表名tb_administrator; (administrator_id(int(3),auto_increment),user_name(varchar(30)),pass_word(varchar(30)),nick_name(varchar(30)),super_level(tinyint(1)),phone(bigint(12))).", "logic_prompt": "1. 管理员获取: GET /admin/v1/admins/{adminId}; ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 判断adminId是否为空，如果为空返回(-1002, \"管理员不存在\", null)；在tb_administrator表中查询管理员，查询条件是administrator_id等于adminId，如果不存在返回(-1002, \"管理员不存在\", null)，如果存在判断super_level是否为true，如果是返回data设置为{tb_administrator记录}，否则返回(-1010, \"没有超级管理员权限\", null)."},
  {"task": "00123", "sql_prompt": "1. 表名tb_administrator; (administrator_id(int(3),auto_increment),user_name(varchar(30)),pass_word(varchar(30)),nick_name(varchar(30)),super_level(tinyint(1)),phone(bigint(12))).", "logic_prompt": "1. 管理员创建: POST /admin/v1/admins; x-www-form-urlencoded; (userName=\"\",passWord=\"\",nickName=\"\",phone=0,superLevel=false); ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 判断输入参数passWord、nickName、phone是否为空，如果为空返回(-1004, \"字段不能为空\",null)；在tb_administrator表中查询管理员列表，查询条件是user_name等于userName，如果存在返回(-1005, \"用户名已存在\",null)；在tb_administrator表中插入记录，字段属性为输入参数，如果superLevel为空则设置为false，返回data设置为{tb_administrator记录}."},
  {"task": "00124", "sql_prompt": "1. 表名tb_administrator; (administrator_id(int(3),auto_increment),user_name(varchar(30)),pass_word(varchar(30)),nick_name(varchar(30)),super_level(tinyint(1)),phone(bigint(12))).", "logic_prompt": "1. 管理员更新: Post /admin/v1/admins/{adminId}; x-www-form-urlencoded; (adminId=0,passWord=\"\",nickName=\"\",phone=0,superLevel=false); ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 在tb_administrator表中查询管理员，查询条件是administrator_id等于adminId，如果不存在返回(-1002, \"管理员不存在\", null)；在tb_administrator表中更新记录，字段属性为输入参数，返回data设置为{tb_administrator记录}."},
  {"task": "00125", "sql_prompt": "1. 表名tb_administrator; (administrator_id(int(3),auto_increment),user_name(varchar(30)),pass_word(varchar(30)),nick_name(varchar(30)),super_level(tinyint(1)),phone(bigint(12))).", "logic_prompt": "1. 管理员删除: DELETE /admin/v1/admins/{adminId}; (adminId);ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 在tb_administrator表中查询管理员，查询条件是administrator_id等于adminId，如果不存在返回(-1002, \"管理员不存在\", null)；在tb_administrator表中删除记录，返回(100, \"成功\", null)."},
  {"task": "00126", "sql_prompt": "1. 表名tb_administrator; (administrator_id(int(3),auto_increment),user_name(varchar(30)),pass_word(varchar(30)),nick_name(varchar(30)),super_level(tinyint(1)),phone(bigint(12))).", "logic_prompt": "1. 管理员登录: POST /admin/v1/tokens; x-www-form-urlencoded; (userName, passWord); ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 如果输入参数为空返回(-1004, \"字段不能为空\",null)；在tb_administrator表中查询管理员，查询条件是user_name等于userName，如果为空或pass_word不等于passWord，返回(-1001, \"用户名或密码错误\",null)，否则返回data设置为{\"administratorId\"=administrator_id}."},
  {"task": "00127", "sql_prompt": "1. 表名tb_adv_swiper; (adv_swiper_id(int(4),auto_increment),category_second_id(int(6)),category_name(varchar(10)),name(varchar(20)),image(varchar(100))).", "logic_prompt": "1. 广告获取: GET /user/v1/advs; ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 获取tb_adv_swiper表中的所有广告，其中字段image设置为(\"http://119.29.161.228/cloudimg/goods/\"+image)，返回data设置为{tb_adv_swiper列表}."},
  {"task": "00128", "sql_prompt": "1. 表名tb_adv_swiper; (adv_swiper_id(int(4),auto_increment),category_second_id(int(6)),category_name(varchar(10)),name(varchar(20)),image(varchar(100))).", "logic_prompt": "1. 广告获取: GET /user/v1/advs/{advId}; x-www-form-urlencoded; (advId); ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 如果输入参数为null返回(-1004, \"字段不能为空\",null)；在tb_adv_swiper表中查询广告，查询条件是adv_swiper_id等于输入参数，如果不为空返回data设置为{tb_adv_swiper记录}，否则返回(-1002, \"广告不存在\",null)."},
  {"task": "00129", "sql_prompt": "1. 表名tb_adv_swiper; (adv_swiper_id(int(4),auto_increment),category_second_id(int(6)),category_name(varchar(10)),name(varchar(20)),image(varchar(100))).\n2. 表名tb_category_second; (category_second_id(int(8),auto_increment),category_first_id(int(6)),category_name(varchar(10)),image(varchar(100))).", "logic_prompt": "1. 广告创建: POST /admin/v1/advs; x-www-form-urlencoded; (name,categorySecondId,image); ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 如果输入参数为nulll返回(-1004, \"字段不能为空\",null)；在tb_category_second表中查询类别，查询条件是category_second_id等于输入参数categorySecondId，如果为空返回(-1002, \"该分类不存在\",null)；在tb_adv_swiper表中插入记录，字段image、name、category_second_id设置为输入参数，category_name设置为tb_category_second.category_name，返回data设置为{tb_adv_swiper记录}."},
  {"task": "00130", "sql_prompt": "1. 表名tb_adv_swiper; (adv_swiper_id(int(4),auto_increment),category_second_id(int(6)),category_name(varchar(10)),name(varchar(20)),image(varchar(100))).\n2. 表名tb_category_second; (category_second_id(int(8),auto_increment),category_first_id(int(6)),category_name(varchar(10)),image(varchar(100))).", "logic_prompt": "1. 广告更新: POST /admin/v1/advs/{advId}; x-www-form-urlencoded; (advId,name,categorySecondId,image); ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 在tb_adv_swiper表中查询广告，查询条件是adv_swiper_id等于输入参数；在tb_category_second表中查询类别，查询条件是category_second_id等于输入参数categorySecondId，如果为空返回(-1002, \"该分类不存在\",null)；在tb_adv_swiper表中更新记录，字段image、name、category_second_id设置为输入参数，category_name设置为tb_category_second.category_name，返回data设置为{tb_adv_swiper记录}."},
  {"task": "00131", "sql_prompt": "1. 表名tb_adv_swiper; (adv_swiper_id(int(4),auto_increment),category_second_id(int(6)),category_name(varchar(10)),name(varchar(20)),image(varchar(100))).", "logic_prompt": "1. 广告删除: DELETE /admin/v1/advs/{advId}; x-www-form-urlencoded; (advId); ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 在tb_adv_swiper表中查询广告，查询条件是adv_swiper_id等于输入参数，如果为空返回(-1002, \"广告不存在\",null)；否则在tb_adv_swiper表中删除该记录，返回(100, \"成功\",null)."},
  {"task": "00132", "sql_prompt": "1. 表名tb_cart; (cart_id(bigint(12),auto_increment),(user_id(int(8)),amount(double(14,2))).\n2. 表名tb_cart_detail; (cart_detail_id(bigint(14),auto_increment),cart_id(bigint(12)),good_id(int(10)),'count'(int(5))).\n3. 表名tb_good; (good_id(int(10),auto_increment),category_second_id(int(6)),good_name(varchar(20)),image(varchar(100)),price(double(10,2)),original_price(double(10,2)),inventory(int(6)),sold_count(int(10)),spec(varchar(20)),origin(varchar(10))).", "logic_prompt": "1. 购物车获取: GET /user/v1/user/{userId}/cart; ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 在tb_cart表中查询购物车记录，查询条件是user_id等于userId，如果为空创建购物车记录，userId设置为userId，amount设置为0.0，插入到tb_cart表中；如果不为空获取列表的第一个购物车记录，在tb_cart_detail表中查询购物车详情列表，查询条件是cart_id等于tb_cart.cart_id；遍历列表，在tb_good表中查询商品，查询条件是good_id等于tb_cart_detail.good_id，返回data设置为{\"cartId\"=tb_cart.cart_id,\"amount\"=tb_cart.amount,\"good\"={tb_good记录}}."},
  {"task": "00133", "sql_prompt": "1. 表名tb_cart; (cart_id(bigint(12),auto_increment),(user_id(int(8)),amount(double(14,2))).\n2. 表名tb_cart_detail; (cart_detail_id(bigint(14),auto_increment),cart_id(bigint(12)),good_id(int(10)),'count'(int(5))).", "logic_prompt": "1. 购物车获取: GET /user/v1/user/{userId}/cartDetail/good/{goodId}; ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 在tb_cart表中查询购物车记录，查询条件是user_id等于userId，如果不为空获取列表的第一个购物车记录，如果为空返回(-1002, \"购物车不存在\",null)；在tb_cart_detail表中查询详情，查询条件是good_id等于goodId，cart_id等于tb_cart.cart_id，如果为空返回(-1002, \"购物车不存在\",null)，否则返回{tb_cart_detail记录}."},
  {"task": "00134", "sql_prompt": "1. 表名tb_cart; (cart_id(bigint(12),auto_increment),(user_id(int(8)),amount(double(14,2))).\n2. 表名tb_cart_detail; (cart_detail_id(bigint(14),auto_increment),cart_id(bigint(12)),good_id(int(10)),'count'(int(5))).\n3. 表名tb_good; (good_id(int(10),auto_increment),category_second_id(int(6)),good_name(varchar(20)),image(varchar(100)),price(double(10,2)),original_price(double(10,2)),inventory(int(6)),sold_count(int(10)),spec(varchar(20)),origin(varchar(10))).", "logic_prompt": "1. 购物车添加: POST /user/v1/user/{userId}/cart; x-www-form-urlencoded; (goodId,count); ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 在tb_good表中查询商品，查询条件是good_id等于goodId，如果不存在返回(-1002, \"商品不存在\",null)；如果tb_good.inventory小于count，返回(-1004, \"商品库存不足\", null)；在tb_cart表中查询购物车列表，查询条件是user_id等于userId，如果列表为空，则在表中插入一条记录，字段user_id设置为userId，amount设置为0.0，如果列表不为空获取第一条记录；在tb_cart_detail表中查询详情列表，查询条件是good_id等于goodId，cart_id等于tb_cart.cart_id，如果列表为空，且输入count大于0，则在表中插入一条记录，字段cart_id设置为tb_cart.id，good_id设置为tb_good.id，count设置为输入count，同时更新tb_cart表中的amount字段为(tb_cart.amount+tb_good.price*tb_cart_detail.count)，如果列表不为空则获取列表的第一条记录，并更新tb_cart和tb_cart_detail表如下：如果tb_cart_detail.count+count小于0，tb_cart_detail.count设置为0，tb_cart.amount设置为(tb_cart.amount+tb_good.price*tb_cart_detail.count*(-1))，否则tb_cart_detail.count设置为(tb_cart_detail.count+count)，tb_cart.amount设置为(tb_cart.amount+tb_good.price*count)；在tb_cart_detail表中查找记录，查找条件是tb_cart.cart_id等于tb_cart_detail.cart_id，返回date设置为{\"cartId\"=tb_cart.cart_id,\"userId\"=userId,\"amount\"=tb_cart.amount,\"good\"=[tb_cart_detail记录]}."},
  {"task": "00135", "sql_prompt": "1. 表名tb_cart; (cart_id(bigint(12),auto_increment),(user_id(int(8)),amount(double(14,2))).", "logic_prompt": "1. 购物车删除: DELETE /user/v1/user/{userId}/cart/{cartId}; ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 在tb_cart表中查询购物车列表返回第一个记录，查询条件是user_id等于userId，如果不存在返回(-1002, \"购物车不存在\",null)；在tb_cart表中删除该记录，删除条件是card_id等于cartId，返回(100, \"成功\",null)."},
  {"task": "00136", "sql_prompt": "1. 表名tb_cart; (cart_id(bigint(12),auto_increment),(user_id(int(8)),amount(double(14,2))).\n2. 表名tb_cart_detail; (cart_detail_id(bigint(14),auto_increment),cart_id(bigint(12)),good_id(int(10)),'count'(int(5))).\n3. 表名tb_good; (good_id(int(10),auto_increment),category_second_id(int(6)),good_name(varchar(20)),image(varchar(100)),price(double(10,2)),original_price(double(10,2)),inventory(int(6)),sold_count(int(10)),spec(varchar(20)),origin(varchar(10))).", "logic_prompt": "1. 购物车更新: PATCH /user/v1/user/{userId}/cart/{cartId}; x-www-form-urlencoded; (goodId,count); ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 根据cartId在tb_cart表中查询记录，不存在返回(-1002, \"购物车不存在\",null)；如果tb_cart.user_id不等于userId返回(-1010, \"没有操作权限\",null)；根据goodId在tb_good表中查询商品，如果不存在返回(-1002, \"商品不存在\",null)；如果tb_good.inventory+count小于0，返回(-1004, \"商品库存不足\", null)；根据goodId和tb_cart.cart_id在tb_cart_detail表中查询列表，如果列表为空且输入count小于等于0则返回(100, \"成功\",null)，如果不是在表中插入一条记录，字段cart_id设置为tb_cart.id，good_id设置为tb_good.id，count设置为输入count，更新tb_cart表中的amount字段为(tb_cart.amount+tb_good.price*tb_cart_detail.count)；如果列表不为空则获取列表的第一条记录，判断tb_cart_detail.count+count小于等于0则tb_cart.amount更新为(tb_cart.amount-tb_cart_detail.count*tb_good.price)，并在tb_cart_detail表中删除cart_detail_id等于tb_cart_detail.cart_detail_id的记录；否则更新tb_cart_detail表中的字段count为(tb_cart_detail.count+count)，更新tb_cart表中的字段amount为(tb_cart.amount+tb_good.price*count)；在tb_cart_detail表中查找记录，查找条件是tb_cart.cart_id等于tb_cart_detail.cart_id，返回date设置为{\"cartId\"=tb_cart.cart_id,\"userId\"=userId,\"amount\"=tb_cart.amount,\"good\"=[tb_cart_detail记录]}."},
  {"task": "00137", "sql_prompt": "1. 表名tb_category_first; (category_first_id(int(6),auto_increment),category_name(varchar(10))).\n2. 表名tb_category_second; (category_second_id(int(8),auto_increment),category_first_id(int(6)),category_name(varchar(10)),image(varchar(100))).", "logic_prompt": "1. 类别获取: GET /user/v1/category/first; x-www-form-urlencoded; (page, rows); ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 根据page和rows分页查询tb_category_first表中所有的记录列表，遍历列表，在tb_category_second表中依次查询所有的小类别，查询条件是category_first_id等于tb_category_first.category_first_id，返回data设置为{[\"categoryFirstId\"=tb_category_first,\"categoryName\"=tb_category_first.category_name,\"categorySeconds\"=[{tb_category_second记录}]]}."},
  {"task": "00138", "sql_prompt": "1. 表名tb_category_first; (category_first_id(int(6),auto_increment),category_name(varchar(10))).", "logic_prompt": "1. 类别获取: GET /user/v1/category/first/{categoryFirstId}; ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 根据categoryFirstId在tb_category_first表查询记录，返回data设置为{tb_category_first记录}."},
  {"task": "00139", "sql_prompt": "1. 表名tb_category_first; (category_first_id(int(6),auto_increment),category_name(varchar(10))).", "logic_prompt": "1. 类别增加: POST /admin/v1/category/first; x-www-form-urlencoded; (categoryName=\"\"); ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 根据categoryName在tb_category_first表中获取记录列表，如果列表不为空则获取第一条记录，如果为空返回(-1005, \"分类名称已存在\",null)；在tb_category_first表中插入记录，category_name设置为categoryName，返回data设置为{tb_category_first记录}."},
  {"task": "00140", "sql_prompt": "1. 表名tb_category_first; (category_first_id(int(6),auto_increment),category_name(varchar(10))).", "logic_prompt": "1. 类别更新: PATCH /admin/v1/category/first/{categoryFirstId}; application/json; category=CategoryFirst; ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 根据categoryFirstId在tb_category_first表中查询记录，不存在返回(-1002, \"该分类不存在\",null)；根据category.categoryName在tb_category_first表中获取记录列表，如果列表不为空则获取第一条记录，如果为空返回(-1005, \"分类名称已存在\",null)；如果获取的tb_category_first.category_first_id不等于categoryFirstId则返回(-1005, \"分类名称已存在\",null)；更新tb_category_first表中的字段为category的属性，返回data设置为{tb_category_first记录}."},
  {"task": "00141", "sql_prompt": "1. 表名tb_category_first; (category_first_id(int(6),auto_increment),category_name(varchar(10))).\n2. 表名tb_category_second; (category_second_id(int(8),auto_increment),category_first_id(int(6)),category_name(varchar(10)),image(varchar(100))).", "logic_prompt": "1. 类别删除: DELETE /admin/v1/category/first/{categoryFirstId}; ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 根据categoryFirstId在tb_category_first表中查询记录，不存在返回(-1002, \"该分类不存在\",null)；根据categoryFirstId统计tb_category_second表中记录数量，如果数量大于0返回(-1006, \"该分类下有子分类存在，不能删除该分类\",null)，否则在tb_category_first表中删除该记录，返回(-1006, \"该分类下有子分类存在，不能删除该分类\",null)."},
  {"task": "00142", "sql_prompt": "1. 表名tb_category_first; (category_first_id(int(6),auto_increment),category_name(varchar(10))).\n2. 表名tb_category_second; (category_second_id(int(8),auto_increment),category_first_id(int(6)),category_name(varchar(10)),image(varchar(100))).", "logic_prompt": "1. 子类别获取: GET /user/v1/category/second; x-www-form-urlencoded; (page, rows); ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 根据输入参数分页查询tb_category_second表记录列表；遍历列表，根据tb_category_second.category_first_id在tb_category_first表中查询类别记录，tb_category_second.category_name设置为tb_category_first.category_name，返回data设置为{[\"categorySecondId\"=tb_category_second.category_second_id,\"categoryFirstId\"=tb_category_second.category_first_id,\"categoryName\"=tb_category_second.category_name,\"image\"=tb_category_second.image,\"categoryFirstName\"=tb_category_first.category_name, \"\"]}."},
  {"task": "00143", "sql_prompt": "1. 表名tb_category_second; (category_second_id(int(8),auto_increment),category_first_id(int(6)),category_name(varchar(10)),image(varchar(100))).", "logic_prompt": "1. 子类别获取: GET /user/v1/category/second/{categoryId}; ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 根据categoryId在tb_category_second表查询记录，返回data设置为{tb_category_second记录}，如果记录为空，返回(-1002, \"该分类不存在\", null)."},
  {"task": "00144", "sql_prompt": "1. 表名tb_category_second; (category_second_id(int(8),auto_increment),category_first_id(int(6)),category_name(varchar(10)),image(varchar(100))).", "logic_prompt": "1. 子类别增加: POST /admin/v1/category/second; x-www-form-urlencoded; (categoryFirstId, categoryName, image); ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 根据categoryName在tb_category_second表中获取所有记录，如果记录不为空返回(-1005, \"分类名称已存在\",null)；在tb_category_second表中插入一条记录，字段category_first_id设置为categoryFirstId，category_name设置为categoryName，image设置为image，返回data设置为{tb_category_second新记录}."},
  {"task": "00145", "sql_prompt": "1. 表名tb_category_second; (category_second_id(int(8),auto_increment),category_first_id(int(6)),category_name(varchar(10)),image(varchar(100))).", "logic_prompt": "1. 子类别更新: POST /admin/v1/category/second/{categorySecondId}; x-www-form-urlencoded; (categoryFirstId, categoryName, image); ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 根据categorySecondId在tb_category_second表中查询记录，如果为空返回(-1002, \"该分类不存在\", null)；根据categoryName在tb_category_second表中查询记录，如果不为空且tb_category_second.category_second_id不等于categorySecondId，则返回(-1005, \"分类名称已存在\",null)；在tb_category_second表中更新记录，字段category_first_id设置为categoryFirstId，category_name设置为categoryName，image设置为image，返回data设置为{tb_category_second新记录}."},
  {"task": "00146", "sql_prompt": "1. 表名tb_category_second; (category_second_id(int(8),auto_increment),category_first_id(int(6)),category_name(varchar(10)),image(varchar(100))).\n2. 表名tb_good; (good_id(int(10),auto_increment),category_second_id(int(6)),good_name(varchar(20)),image(varchar(100)),price(double(10,2)),original_price(double(10,2)),inventory(int(6)),sold_count(int(10)),spec(varchar(20)),origin(varchar(10))).", "logic_prompt": "1. 子类别删除: DELETE /admin/v1/category/second/{categorySecondId}; ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 根据categorySecondId在tb_category_second表中查询记录，如果为空返回(-1002, \"该分类不存在\", null)；根据categorySecondId统计tb_good表中的商品数量，如果数量大于0返回(-1006, \"该分类下有商品存在，不能删除该分类\",null)；删除tb_category_second表中的记录，返回(100, \"成功\",null)."},
  {"task": "00147", "sql_prompt": "1. 表名tb_good; (good_id(int(10),auto_increment),category_second_id(int(6)),good_name(varchar(20)),image(varchar(100)),price(double(10,2)),original_price(double(10,2)),inventory(int(6)),sold_count(int(10)),spec(varchar(20)),origin(varchar(10))).\n2. 表名tb_category_second; (category_second_id(int(8),auto_increment),category_first_id(int(6)),category_name(varchar(10)),image(varchar(100))).", "logic_prompt": "1. 商品获取: GET /admin/v1/goods; x-www-form-urlencoded; (page, rows, good=Good, goodStatus); ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 根据good的goodId、goodName、categorySecondId属性在tb_good表中分页查询商品列表，其中goodStatus为false时tb_good.inventory需要等于0，goodStatus为true时tb_good.inventory需要大于0；遍历tb_good列表，在tb_category_second表中查询记录，查询条件是tb_category_second.category_second_id等于tb_good.category_second_id；返回data设置为{[\"categorySecond\"={tb_category_second记录},\"image\"=tb_good.image, \"good\"={tb_good记录}]}."},
  {"task": "00148", "sql_prompt": "1. 表名tb_good; (good_id(int(10),auto_increment),category_second_id(int(6)),good_name(varchar(20)),image(varchar(100)),price(double(10,2)),original_price(double(10,2)),inventory(int(6)),sold_count(int(10)),spec(varchar(20)),origin(varchar(10))).", "logic_prompt": "1. 商品获取: GET /user/v1/goods; application/json; (page, rows, orderBy=\"\", good=Good); ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 根据good的goodId、goodName、categorySecondId属性在tb_good表中分页查询商品列表，只获取tb_good.inventory大于0的记录，获取结果按orderBy进行排序，返回data设置为{[tb_good记录]}."},
  {"task": "00149", "sql_prompt": "1. 表名tb_good; (good_id(int(10),auto_increment),category_second_id(int(6)),good_name(varchar(20)),image(varchar(100)),price(double(10,2)),original_price(double(10,2)),inventory(int(6)),sold_count(int(10)),spec(varchar(20)),origin(varchar(10))).\n2. 表名tb_category_second; (category_second_id(int(8),auto_increment),category_first_id(int(6)),category_name(varchar(10)),image(varchar(100))).", "logic_prompt": "1. 商品获取: GET /user/v1/goods/{goodId}; ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 根据goodId在tb_good表中查询商品记录，如果为空返回(-1002, \"商品不存在\",null)；在tb_category_second表中查询记录，查询条件是tb_category_second.category_second_id等于tb_good.category_second_id，返回data设置为{tb_good记录, \"category\"={tb_category_second记录}}."},
  {"task": "00150", "sql_prompt": "1. 表名tb_good; (good_id(int(10),auto_increment),category_second_id(int(6)),good_name(varchar(20)),image(varchar(100)),price(double(10,2)),original_price(double(10,2)),inventory(int(6)),sold_count(int(10)),spec(varchar(20)),origin(varchar(10))).", "logic_prompt": "1. 商品添加: POST /admin/v1/goods; application/json; (good=Good, image); ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. good除了inventory、soldCount和originalPrice其他属性不能为空，否则返回(-1004, \"字段不能为空\",null)；根据good.goodName在tb_good表中查询记录，如果不存在返回(-1005, \"商品名称已存在\",null)；在tb_good表中插入一条记录，如果good.inventory为空则设置为0，默认good.original_price等于good.price，默认good.sold_count设置为0；返回data设置为{tb_good新记录}."},
  {"task": "00151", "sql_prompt": "1. 表名t_user_event_log; (id(int),user_id(int),user_name(varchar),real_name(varchar),content(text),create_time(datetime)).", "logic_prompt": "1. 用户日志接口: POST  /api/admin/user/event/page/list; application/json; {\"userId\": null,\"userName\": null, \"pageIndex\": 1, \"pageSize\": 10}; 返回参数{\"code\": 1,\"message\": \"成功\",\"response\": {\"total\": 68,\"list\": [{ \"id\": 64,   \"userId\": 2,  \"userName\": \"\",  \"realName\": \"\", \"content\": \"\", \"createTime\": \"2021-08-24 20:05:02\"}]}}.\n2. 根据传递的参数从表t_user_event_log中分页查询用户日志记录，返回一个包含分页日志记录的对象，该对象包括日志记录总数和日志记录列表，如果查询成功返回{\"code\": 1,\"message\": \"成功\",\"response\": {\"total\": 68,\"list\": [{ \"id\": 64,   \"userId\": 2,  \"userName\": \"\",  \"realName\": \"\", \"content\": \"\", \"createTime\": \"2021-08-24 20:05:02\"}]}}；查询失败返回{\"code\": 1,\"message\": \"失败\",\"response\": null}."},
  {"task": "00152", "sql_prompt": "1. 表名t_user; (id,user_uuid(varchar(36)),use_name,password,real_name,age,sex(int),birth_day,user_level(int),phone,role(int),status(int),image_path,create_time,modify_time,last_active_time,deleted(bit),wx_open_id).", "logic_prompt": "1. 用户分页接口: POST  /api/admin/user/page/list; application/json; {\"userName\": \"\",   \"role\": 1,   \"pageIndex\": 1, \"pageSize\": 10}；ApiResponse{\"code\": 1{\"code\": 1, \"message\": \"成功\",\"response\": { \"total\": 81,  \"list\": [{\"id\": 100,    \"userUuid\": \"\",   \"userName\": \"\",  \"realName\": null, \"age\": null,   \"role\": 1, \"sex\": null,  \"birthDay\": \"\",      \"phone\": null, \"lastActiveTime\": \"2021-06-21 20:01:26\",  \"createTime\": \"\",  \"modifyTime\": \"\",   \"status\": 1, \n\"userLevel\": 1,  \"imagePath\": null  }]}}.\n2. 根据传入的参数从数据库中查询用户列表，请求参数中的userName、role用来过滤查询条件；还有用于分页的属性，包括pageIndex（页码）和pageSize(每页记录数)。如果查询到用户数据，则返回ApiResponse；否则返回一个失败的响应，提示\"用户信息检索失败\"。"},
  {"task": "00153", "sql_prompt": "1. 表名t_user; (id,user_uuid(varchar(36)),use_name,password,real_name,age,sex(int),birth_day,user_level(int),phone,role(int),status(int),image_path,create_time,modify_time,last_active_time,deleted(bit),wx_open_id).", "logic_prompt": "1. 用户查询接口: POST /api/admin/user/select/{id}; URL参数传递; {\"id\":\"\"}; 返回参数{\"code\": 1,\"message\": \"成功\",\"response\": {\"id\": 100, \"userUuid\": \"\",   \"userName\": \"\",   \"realName\": null,  \"age\": null,  \"role\": 1, \"sex\": null, \"birthDay\": \"\", \"phone\": null,  \"lastActiveTime\": \"2021-06-21 20:01:26\", \"createTime\": \"\",  \"modifyTime\": \"\",  \"status\": 1,  \"userLevel\": 1,  \"imagePath\": null}}.\n2. 从路径参数 id 中获取用户的id,根据该id从表t_user中检索用户的信息，如果检索成功，则返回用户的信息，并提示\"查询成功\"。如果查询的id不存在，则检索失败，提示\"用户id不存在\"。"},
  {"task": "00154", "sql_prompt": "1. 表名t_user; (id,user_uuid(varchar(36)),use_name,password,real_name,age,sex(int),birth_day,user_level(int),phone,role(int),status(int),image_path,create_time,modify_time,last_active_time,deleted(bit),wx_open_id).", "logic_prompt": "1. 用户删除接口：POST  /api/admin/user/delete/{id}; URL参数传递; {\"id\":\"要删除的用户的唯一标识符\"}; 返回参数{\"code\": 1,  \"message\": \"成功\", \"response\": null}.\n2. 根据输入id查询表t_user并将表中deleted字段设为true，并将结果更新到表t_user；返回{\"code\":1,\"message\":\"成功\",\"response\":null}."},
  {"task": "00155", "sql_prompt": "1. 表名t_user; (id,user_uuid(varchar(36)),use_name,password,real_name,age,sex(int),birth_day,user_level(int),phone,role(int),status(int),image_path,create_time,modify_time,last_active_time,deleted(bit),wx_open_id).", "logic_prompt": "1. 用户编辑接口：POST  /api/admin/user/edit; application/json; { \"id\": null,\"userName\": \"testzz\",  \"password\": \"123456\",  \"realName\": \"tesx\",   \"role\": 1,  \"status\": 1, \"age\": \"\", \"sex\": \"\",  \"birthDay\": null,  \"phone\": null,  \"userLevel\": 1 }。ApiResponse{\"code\": 1,\"message\": \"成功\",\"response\": {\"id\": 109, \"userUuid\": \"\",  \"userName\": \"\", \"password\": \"\"  \"realName\": \"\",   \"age\": null,  \"sex\": null, \"birthDay\": null, \"userLevel\": 1,  \"phone\": null,  \"role\": 1, \"status\": 1,  \"imagePath\": null, \"createTime\": \"\", \"modifyTime\": \"\", \"lastActiveTime\": \"\",  \"deleted\": false, \"wxOpenId\": null }}.\n2. 该接口用于创建新用户或编辑现有用户的信息。根据输入参数检查表t_user中的id是否存在，如果id存在，则表示要更新现有用户,根据输入参数更新表t_user相关的信息，返回更新后的用户信息ApiResponse;否则将创建新用户,将输入参数插入到表t_user中，并返回创建后的用户信息ApiResponse。必填字段包括userName和realName,如果这些字段为空，将返回错误响应，提示\"用户名不存在\"。如果提供了password，对密码进行编码，并保存加密后的密码；如果密码为空，将返回错误响应，提示\"密码不能为空\"."},
  {"task": "00156", "sql_prompt": "1. 表名t_user; (id,user_uuid(varchar(36)),use_name,password,real_name,age,sex(int),birth_day,user_level(int),phone,role(int),status(int),image_path,create_time,modify_time,last_active_time,deleted(bit),wx_open_id).", "logic_prompt": "1. 用户状态修改接口: POST  /api/admin/user/changeStatus/{id}; URL参数传递; ApiResponse{\"code\": 1,\"message\":\"成功\",\"response\":2}.\n2. 切换用户帐户的状态，使其在\"启用\"和\"禁用\"之间切换，1表示启用，2表示禁用。根据路径参数id检索用户信息，获取用户的当前状态，检查当前状态是否为\"启用\"或\"禁用\"。根据当前状态，将状态代码在0和1之间切换。使用新状态更新用户的状态，并将modifyTime字段设置为当前日期和时间，然后在表t_user中更新用户的状态。最后，返回ApiResponse,ApiResponse对象中的response为更新后的状态代码."},
  {"task": "00157", "sql_prompt": "1. 表名ssm_store; (id(int),category(string),number(string),level(string),page(string),status(int)).", "logic_prompt": "1. 商店开放接口:GET /store/openStore ;URL参数传递；ApiResponse{\"code\": 1,\"success\": true}.\n2. 根据请求路径中传入的ids从数据库表ssm_store中根据id查找对象的商店信息，,多个ids时，以逗号分隔，检查每个商店对象是否存在，如果存在且status不是1，则将其状态status设置为1，并将结果更新到表ssm_store中，如果操作成功，返回ApiResponse."},
  {"task": "00158", "sql_prompt": "1. 表名ssm_store; (id(int),category(string),number(string),level(string),page(string),status(int)).", "logic_prompt": "1. 商店关闭接口: GET  /store/closeStore; URL参数传递; ApiResponse{\"code\": 1,\"success\": true}.\n2. 根据请求路径中传入的ids从数据库表ssm_store中根据id查找对象的商店信息,多个ids时，以逗号分隔，检查每个商店对象是否存在，如果存在且status不是0，则将其状态status设置为0，并将结果更新到表ssm_store中，如果操作成功，返回ApiResponse."},
  {"task": "00159", "sql_prompt": "1. 表名ssm_user; (id(int),userName(string),password(string),roleName(string)).", "logic_prompt": "1. 批量删除用户接口: POST  /user/delete ;URL参数传递; ApiResponse:{\"code\": 1,\"message\":\"成功\",\"success\": true}。\n2. 根据请求路径中的参数ids删除表ssm_user中对应id的用户信息，多个ids时，以逗号分隔，检查每个ids对应的用户对象是否存在,如果存在，则删除对应id的用户信息，返回ApiResponse；如果对应的id不存在，则返回失败的JSON响应，提示\"用户不存在\"."},
  {"task": "00160", "sql_prompt": "1. 表名ssm_storebook; (id(int),isbn(string),storeId(int),number(int),inDate(datetime)).", "logic_prompt": "1. 商店书籍列表: GET /storeBook/list;{\"storeId\":\"\",\"page\":1,\"rows\":5}; ApiResponse:{ \"code\": 1,\"message\":\"成功\",\"response\": {\"total\": 36,\"list\": [ {\"id\":1,\"isbn\":\"\",\"storeId\":102,\"number\":2,\"inDate\":\"\"}] }} .\n2. 根据传入的参数从表ssm_store中获取商店书籍分页列表,如果获取成功，返回ApiResponse."},
  {"task": "00161", "sql_prompt": "1. 表名t_question; (id(int), question_type(int), subject_id(int), score(int), grade_level(int), difficult(int), correct(text), info_text_content_id(int), create_user(int), status(int), create_time(datetime), deleted(bit)).\n2. 表名t_exam_paper; (id(int), name(varchar), subject_id(int), paper_type(int), grade_level(int), score(int), question_count(int), suggest_time(int), limit_start_time(datetime), limit_end_time(datetime), frame_text_content_id(int), create_user(int), create_time(datetime), deleted(bit), task_exam_id(int)).\n3. 表名t_exam_paper_question_customer_answer; (id (INT), question_id (INT), exam_paper_id (INT), exam_paper_answer_id (INT), question_type (INT), subject_id (INT), customer_score (INT), question_score (INT), question_text_content_id (INT), answer (VARCHAR(255)), text_content_id (INT), do_right (BIT), create_user (INT), create_time (DATETIME), item_order (INT)).", "logic_prompt": "1. 试卷查询接口: POST /api/wx/student/exampaper/select/{id}; application/json; {\"id\":\"\"}; ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":{\"id\":66,\"level\":1,\"subjectId\":4,\"paperType\":1,\"name\":\"20200912卷\",\"suggestTime\":30,\"limitDateTime\":null,\"titleItems\":[{\"name\":\"一、解答题\",\"questionItems\":[{\"id\":66,\"questionType\":1,\"subjectId\":4,\"title\":\"中华四大名著都有哪些，下列正确的是\",\"gradeLevel\":1,\"items\":[{\"prefix\":\"A\",\"content\":\"红楼梦\",\"score\":null}],\"analyze\":\"题目比较简单，自行分析\",\"correctArray\":null,\"correct\":\"A\",\"score\":\"2.5\",\"difficult\":3,\"itemOrder\":1,\"knowledgeIdList\":[8,9]}]}],\"score\":\"20\",\"classes\":null}}.\n2. 根据输入参数在t_exam_paper表、t_question表和t_exam_paper_question_customer_answer表中查询试卷题目所有信息；返回{\"code\":1,\"message\":\"成功\",\"response\":{\"id\":66,\"level\":1,\"subjectId\":4,\"paperType\":1,\"name\":\"20200912卷\",\"suggestTime\":30,\"limitDateTime\":null,\"titleItems\":[{\"name\":\"一、解答题\",\"questionItems\":[{\"id\":66,\"questionType\":1,\"subjectId\":4,\"title\":\"中华四大名著都有哪些，下列正确的是\",\"gradeLevel\":1,\"items\":[{\"prefix\":\"A\",\"content\":\"红楼梦\",\"score\":null}],\"analyze\":\"题目比较简单，自行分析\",\"correctArray\":null,\"correct\":\"A\",\"score\":\"2.5\",\"difficult\":3,\"itemOrder\":1,\"knowledgeIdList\":[8,9]}]}],\"score\":\"20\",\"classes\":null}}."},
  {"task": "00162", "sql_prompt": "1. 表名t_message_user; (id,message_id,receive_user_id,receive_user_name,receive_real_name,readed(bit),create_time,read_time).", "logic_prompt": "1. 消息标记已读接口: POST /api/student/user/message/read/{id}; x-www-form-urlencoded; (id=0); ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":null}.\n2. 在t_message_user中查询消息id等于输入参数的消息对象，如果对象不存在，则返回{\"code\":2,\"message\":\"消息不存在\",\"response\":null}；如果对象存在，则设置已读并更新数据表，返回{\"code\":1,\"message\":\"成功\",\"response\":null}."},
  {"task": "00163", "sql_prompt": "1. 表名t_user; (id,user_uuid(varchar(36)),use_name,password,real_name,age,sex(int),birth_day,user_level(int),phone,role(int),status(int),image_path,create_time,modify_time,last_active_time,deleted(bit),wx_open_id).\n2. 表名t_message_user; (id,message_id,receive_user_id,receive_user_name,receive_real_name,readed(bit),create_time,read_time).", "logic_prompt": "1. 未读消息数量获取接口: POST /api/student/user/message/unreadCount; x-www-form-urlencoded; (userName=\"\"); ApiResponse{\"code\":1,\"message\":\"成功\"\"response\":0}.\n2. 在t_user表中查询用户名等于输入参数的用户对象，获取对象ID；在t_message_user表中查询receive_user_id等于用户id的消息对象，并计算未读消息的数量num，返回 {\"code\":1,\"message\":\"成功\"\"response\":num}."},
  {"task": "00164", "sql_prompt": "1. 表名t_user; (id,user_uuid(varchar(36)),use_name,password,real_name,age,sex(int),birth_day,user_level(int),phone,role(int),status(int),image_path,create_time,modify_time,last_active_time,deleted(bit),wx_open_id).", "logic_prompt": "1. 当前用户信息: POST /api/student/user/current; x-www-form-urlencoded; (userName=\"\"); ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":{}}.\n2. 在t_user表中查询用户名等于输入参数的用户，用户对象进行转换和创建时间格式化，并赋值给返回参数的response."},
  {"task": "00165", "sql_prompt": "1. 表名t_exam_paper_answer; (id(int), exam_paper_id(int), paper_name(varchar), paper_type(int), subject_id(int), system_score(int), user_score(int), paper_score(int), question_correct(int), question_count(int), do_time(int), status(int), create_user(int), create_time(datetime), task_exam_id(int)).\n2. 表名t_user; (id(int), user_uuid(varchar), user_name(varchar), password(varchar), real_name(varchar), age(int), sex(int), birth_day(datetime), user_level(int), phone(varchar), role(int), status(int), image_path(varchar), create_time(datetime), modify_time(datetime), last_active_time(datetime), deleted(bit), wx_open_id(varchar)).", "logic_prompt": "1. 答卷列表接口: POST /api/wx/student/exampaper/answer/pageList; application/json; {\"pageIndex\":1,\"pageSize\":20}; ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":{\"total\":248,\"list\":[{\"id\":262,\"createTime\":\"2021-09-15 14:42:22\",\"userScore\":\"0\",\"subjectName\":\"语文\",\"subjectId\":4,\"questionCount\":2,\"questionCorrect\":1,\"paperScore\":\"1\",\"doTime\":\"2秒\",\"paperType\":7,\"paperTypeStr\":\"随机试卷\",\"systemScore\":\"0\",\"status\":2,\"paperName\":\"智能训练试卷 - 51\",\"userName\":null}]}}.\n2. 根据user_name获取当前用户id；根据输入参数和id信息获取试卷答案详细信息；返回{\"code\":1,\"message\":\"成功\",\"response\":{\"total\":248,\"list\":[{\"id\":262,\"createTime\":\"2021-09-15 14:42:22\",\"userScore\":\"0\",\"subjectName\":\"语文\",\"subjectId\":4,\"questionCount\":2,\"questionCorrect\":1,\"paperScore\":\"1\",\"doTime\":\"2秒\",\"paperType\":7,\"paperTypeStr\":\"随机试卷\",\"systemScore\":\"0\",\"status\":2,\"paperName\":\"智能训练试卷 - 51\",\"userName\":null}]}}."},
  {"task": "00166", "sql_prompt": "1. 表名t_question; (id(int), question_type(int), subject_id(int), score(int), grade_level(int), difficult(int), correct(text), info_text_content_id(int), create_user(int), status(int), create_time(datetime), deleted(bit)).\n2. 表名t_exam_paper_answer; (id(int), exam_paper_id(int), paper_name(varchar), paper_type(int), subject_id(int), system_score(int), user_score(int), paper_score(int), question_correct(int), question_count(int), do_time(int), status(int), create_user(int), create_time(datetime), task_exam_id(int)).\n3. 表名t_exam_paper; (id(int), name(varchar), subject_id(int), paper_type(int), grade_level(int), score(int), question_count(int), suggest_time(int), limit_start_time(datetime), limit_end_time(datetime), frame_text_content_id(int), create_user(int), create_time(datetime), deleted(bit), task_exam_id(int)).\n4. 表名t_user_event_log; (id(int), user_id(int), user_name(varchar), real_name(varchar), content(text), create_time(datetime)).\n5. 表名t_user; (id(int), user_uuid(varchar), user_name(varchar), password(varchar), real_name(varchar), age(int), sex(int), birth_day(datetime), user_level(int), phone(varchar), role(int), status(int), image_path(varchar), create_time(datetime), modify_time(datetime), last_active_time(datetime), deleted(bit), wx_open_id(varchar)).", "logic_prompt": "1. 试卷提交接口: POST /api/wx/student/exampaper/answer/answerSubmit; application/json; {\"1_42_1\": \"A\", \"id\": \"78\", \"doTime\": 3}; ApiResponse{\"code\": 1, \"message\": \"成功\", \"response\": \"0\"}.\n2. 根据输入参数在t_exam_paper表中查询试卷id判断试卷是否做过如果试卷做过则返回{\"code\":2,\"message\":\"试卷不能重复做\",\"response\":0}；如果没做过则通过输入的id从t_question表中获取所有题目的详细信息；根据所有题目id从t_exam_paper_answer表中保存所有题目的答案信息；自定义打分细则将试卷分数评出；获取当前用户id，根据用户id从t_user表中得到user_name、real_name和当前日期类创建一个用户日志对象，设置content为user_name + \"提交试卷\" + paper_name + \" 得分：\" + system_score + \" 耗时：\" + do_time，将这个对象更新到t_user_event_log表中；返回{\"code\":1,\"message\":\"成功\",\"response\":0}."},
  {"task": "00167", "sql_prompt": "1. 表名t_user; (id,user_uuid(varchar(36)),use_name,password,real_name,age,sex(int),birth_day,user_level(int),phone,role(int),status(int),image_path,create_time,modify_time,last_active_time,deleted(bit),wx_open_id).", "logic_prompt": "1.  获取当前用户信息接口: POST /api/wx/student/user/current; application/json; {\"username\": \"\"}; ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":{\"id\":66,\"userUuid\":\"d2d29da2-dcb3-4013-b874-727626236f47\",\"userName\":\"student\",\"realName\":\"学生\",\"age\":18,\"role\":1,\"sex\":1,\"birthDay\":\"2019-09-17\",\"phone\":\"158800882\",\"lastActiveTime\":\"\",\"createTime\":\"2019-09-07 18:55:02\",\"modifyTime\":\"2021-09-15 18:38:34\",\"status\":1,\"userLevel\":1,\"userLevelStr\":\"一年级\",\"classes\":\"1班\",\"imagePath\":\"\"}}.\n2. 根据输入参数获取当前用户生日信息birth_day并将其格式化处理；返回{\"code\":1,\"message\":\"成功\",\"response\":{\"id\":66,\"userUuid\":\"d2d29da2-dcb3-4013-b874-727626236f47\",\"userName\":\"student\",\"realName\":\"学生\",\"age\":18,\"role\":1,\"sex\":1,\"birthDay\":\"2019-09-17\",\"phone\":\"158800882\",\"lastActiveTime\":\"\",\"createTime\":\"2019-09-07 18:55:02\",\"modifyTime\":\"2021-09-15 18:38:34\",\"status\":1,\"userLevel\":1,\"userLevelStr\":\"一年级\",\"classes\":\"1班\",\"imagePath\":\"\"}}."},
  {"task": "00168", "sql_prompt": "1. 表名t_user; (id(int), user_uuid(varchar), user_name(varchar), password(varchar), real_name(varchar), age(int), sex(int), birth_day(datetime), user_level(int), phone(varchar), role(int), status(int), image_path(varchar), create_time(datetime), modify_time(datetime), last_active_time(datetime), deleted(bit), wx_open_id(varchar)).\n2 表名t_user_event_log; (id(int), user_id(int), user_name(varchar), real_name(varchar), content(text), create_time(datetime)).", "logic_prompt": "1. 用户信息更新接口: POST /api/wx/student/user/update; application/json; {\"realName\": \"学生\", \"age\": 18, \"sex\": \"1\", \"birthDay\": \"2019-09-17\", \"phone\": \"158800882\"}; ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":{\"id\":66,\"userUuid\":\"d2d29da2-dcb3-4013-b874-727626236f47\",\"userName\":\"student\",\"realName\":\"学生\",\"age\":18,\"role\":1,\"sex\":1,\"birthDay\":\"2019-09-17 00:00:00\",\"phone\":\"158800882\",\"lastActiveTime\":\"\",\"createTime\":\"2019-09-07 18:55:02\",\"modifyTime\":\"2021-09-23 21:20:34\",\"status\":1,\"userLevel\":1,\"userLevelStr\":null,\"classes\":null,\"imagePath\":\"\"}}.\n2. 根据输入参数在t_user表中修改输入信息；在t_user表中将modify_time改为当前日期；根据输入的用户id、user_name、real_name和当前日期类创建一个用户日志对象，设置content为user_name + \" 更新了个人资料\"，将这个对象更新到t_user_event_log表中；返回{\"code\":1,\"message\":\"成功\",\"response\":{\"id\":66,\"userUuid\":\"d2d29da2-dcb3-4013-b874-727626236f47\",\"userName\":\"student\",\"realName\":\"学生\",\"age\":18,\"role\":1,\"sex\":1,\"birthDay\":\"2019-09-17 00:00:00\",\"phone\":\"158800882\",\"lastActiveTime\":\"\",\"createTime\":\"2019-09-07 18:55:02\",\"modifyTime\":\"2021-09-23 21:20:34\",\"status\":1,\"userLevel\":1,\"userLevelStr\":null,\"classes\":null,\"imagePath\":\"\"}}."},
  {"task": "00169", "sql_prompt": "1. 表名t_user_event_log; (id(int), user_id(int), user_name(varchar), real_name(varchar), content(text), create_time(datetime)).", "logic_prompt": "1. 用户动态接口: POST /api/wx/student/user/log; application/json; {\"limit\":\"\"}; ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":[{\"id\":6136,\"userId\":1,\"userName\":\"student\",\"realName\":\"学生\",\"content\":\"student 登录了学之思开源考试系统\",\"createTime\":\"2021-09-24 21:52:05\"}]}.\n2. 根据输入参数在t_user_event_log表中查询事件日志数据，按照时间倒序排列，并限制只返回最新的10条记录；返回{\"code\":1,\"message\":\"成功\",\"response\":[{\"id\":6136,\"userId\":1,\"userName\":\"student\",\"realName\":\"学生\",\"content\":\"student 登录了学之思开源考试系统\",\"createTime\":\"2021-09-24 21:52:05\"}]}."},
  {"task": "00170", "sql_prompt": "1. 表名t_message_user; (id(int), message_id(int), receive_user_id(int), receive_user_name(varchar), receive_real_name(varchar), readed(bit), create_time(datetime), read_time(datetime)).\n2. 表名t_message; (id(int), title(varchar), content(varchar), create_time(datetime), send_user_id(int), send_user_name(varchar), send_real_name(varchar), receive_user_count(int), read_count(int)).", "logic_prompt": "1. 消息列表接口: POST /api/wx/student/user/message/page; application/json; {\"pageIndex\": \"1\", \"pageSize\": \"20\"}; ApiResponse{\"code\": 1, \"message\": \"成功\", \"response\": {\"total\": 7, \"list\": [{\"id\": 66, \"title\": \"国庆假说明\", \"messageId\": 17, \"content\": \"假期七天请注意安全。。。\", \"readed\": true, \"createTime\": \"2021-09-25 14:51:32\", \"sendUserName\": \"admin\"}]}}.\n2. 获取当前用户id，在t_message_user表中查询id为当前用户id的数据页；判断用户id是否存在于表t_message中；如果存在则将输入参数和用户id一起输出到页面中；返回{\"code\": 1, \"message\": \"成功\", \"response\": {\"total\": 7, \"list\": [{\"id\": 66, \"title\": \"国庆假说明\", \"messageId\": 17, \"content\": \"假期七天请注意安全。。。\", \"readed\": true, \"createTime\": \"2021-09-25 14:51:32\", \"sendUserName\": \"admin\"}]}}."},
  {"task": "00171", "sql_prompt": "1. 表名tb_good; (good_id(int(10),auto_increment),category_second_id(int(6)),good_name(varchar(20)),image(varchar(100)),price(double(10,2)),original_price(double(10,2)),inventory(int(6)),sold_count(int(10)),spec(varchar(20)),origin(varchar(10))).", "logic_prompt": "1. 分类商品获取: GET /user/v1/categories/{categoryId}/goods; application/json; (page, rows, good=Good);  ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 根据page和rows分页查询tb_good表，查询条件是category_second_id等于good.categorySecondId，返回data设置为{[tb_good记录]}."},
  {"task": "00172", "sql_prompt": "1. 表名tb_good; (good_id(int(10),auto_increment),category_second_id(int(6)),good_name(varchar(20)),image(varchar(100)),price(double(10,2)),original_price(double(10,2)),inventory(int(6)),sold_count(int(10)),spec(varchar(20)),origin(varchar(10))).\n2. 表名tb_category_second; (category_second_id(int(8),auto_increment),category_first_id(int(6)),category_name(varchar(10)),image(varchar(100))).", "logic_prompt": "1. 商品信息更新: PATCH /admin/v1/goods/{goodId}; application/json; (good=Good);  ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 根据goodId在tb_good表中查询记录，如果不存在返回(-1002, \"商品不存在\",null)；更新表中的字段，如果good.goodName不为空赋值给tb_good.good_name；如果good.categorySecondId不为空，根据good.categorySecondId在tb_category_second表中查询记录，如果记录不为空tb_good.category_second_id设置为good.categorySecondId；如果good.price不为空赋值给tb_good.price；如果good.originalPrice不为空赋值给tb_good.original_price；如果good.inventory不为空赋值给tb_good.inventory；如果good.origin不为空赋值给tb_good.origin；如果good.soldCount不为空赋值给tb_good.sold_count；如果good.spec不为空赋值给tb_good.spec；返回date设置为{tb_good新记录}."},
  {"task": "00173", "sql_prompt": "1. 表名tb_good; (good_id(int(10),auto_increment),category_second_id(int(6)),good_name(varchar(20)),image(varchar(100)),price(double(10,2)),original_price(double(10,2)),inventory(int(6)),sold_count(int(10)),spec(varchar(20)),origin(varchar(10))).", "logic_prompt": "1. 商品增加库存: PATCH /admin/v1/goods/{goodId}/inventory; x-www-form-urlencoded; (inventory); ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 根据goodId在tb_good表中查询记录，如果不存在返回(-1002, \"商品不存在\",null)；如果输入参数inventory小于0时tb_good.inventory小于inventory，返回(-1004, \"商品库存不足\",null)；更新表中的字段inventory等于(tb_good.inventory+inventory)；返回data设置为{tb_good新记录}."},
  {"task": "00174", "sql_prompt": "1. 表名tb_order; (order_id(bigint(12),auro_increment),user_id(int(8)),address_id(int(8)),amount(double(10,2)),create_time,remarks(varchar(100)),status(int(1))).\n2. 表名tb_user; (user_id(int(8),auto_increment),user_name(varchar(30)),pass_word(varchar(30)),phone(bigint(12)),sex(varchar(6)),avatar(varchar(100)),nick_name(varchar(10))).\n3. 表名tb_order_detail; (order_detail_id(bigint(12),auro_increment),order_id(bigint(12)),good_id(int(10)),`count`(int(10))).\n4. 表名tb_address; (address_id(int(10),auto_increment),user_id(int(8)),consignee(varchar(10)),phone(bigint(12)),city(varchar(20)),address(varcahr(30)),street_number(varchar(20)),is_default(tinyint(1))).", "logic_prompt": "1. 订单获取: GET /admin/v1/order; application/json; (page,rows,orderBy=\"\",order={Order},start=\"\",end=\"\",userName=\"\"); ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 在tb_user表中查询所有记录，查询条件是user_name等于userName，如果获取的记录列表不为空则获取第一条记录；根据page和rows分页查询tb_order表，查询条件是order.orderId不为空时判断tb_order.order_id与其是否相等，tb_user记录存在时判断tb_order.user_id是否与tb_user.user_id相等，order.status不为空时判断tb_order.status与其是否相等，start和end转换为Date类型，且查询到的记录必须在此范围内，所有记录按orderBy排序输出；遍历所有记录，根据tb_order.address_id在tb_address表中查询地址，根据tb_order.order_id在tb_order_detail表中查询所有记录，返回data设置为{[tb_order记录,\"address\"={tb_address记录},\"orderDetails\"=[{tb_order_detail记录}]]}."},
  {"task": "00175", "sql_prompt": "1. 表名tb_order; (order_id(bigint(12),auro_increment),user_id(int(8)),address_id(int(8)),amount(double(10,2)),create_time,remarks(varchar(100)),status(int(1))).\n2. 表名tb_cart_detail; (cart_detail_id(bigint(14),auto_increment),cart_id(bigint(12)),good_id(int(10)),'count'(int(5))).\n3. 表名tb_user; (user_id(int(8),auto_increment),user_name(varchar(30)),pass_word(varchar(30)),phone(bigint(12)),sex(varchar(6)),avatar(varchar(100)),nick_name(varchar(10))).", "logic_prompt": "1. 订单资讯: GET /admin/v1/statistics/order; ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 统计订单咨询，返回data设置为{\"oderSuccess\"=tb_order表中status等于2的记录数量,\"orderSuccessToday\"=tb_order表中status等于2且create_time发生在今日的记录数量,\"orderWaiting\"=tb_order表中status等于0的记录数量,\"orderWaitingToday\"=tb_order表中status等于0且create_time发生在今日的记录数量,\"orderDispatching\"=tb_order表中status等于1的记录数量,\"orderRefunding\"=tb_order表中status等于3的记录数量,\"totalSale\"=tb_order表中status等于2所有记录的amount的和,\"todaySale\"=tb_order表中status等于2且create_time发生在今日所有记录的amount的和,\"collection\"=tb_cart_detail表中记录的数量,\"userCount\"=tb_user表中记录的数量}."},
  {"task": "00176", "sql_prompt": "1. 表名tb_order; (order_id(bigint(12),auro_increment),user_id(int(8)),address_id(int(8)),amount(double(10,2)),create_time,remarks(varchar(100)),status(int(1))).", "logic_prompt": "1. 订单获取: GET /user/v1/order/{orderId}; ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 在tb_order表中查询订单记录，查询条件是order_id等于orderId，如果不存在返回(-1002, \"订单不存在\",null)；否则返回data设置为{tb_order记录}."},
  {"task": "00177", "sql_prompt": "1. 表名tb_order; (order_id(bigint(12),auro_increment),user_id(int(8)),address_id(int(8)),amount(double(10,2)),create_time,remarks(varchar(100)),status(int(1))).\n2. 表名tb_order_detail; (order_detail_id(bigint(12),auro_increment),order_id(bigint(12)),good_id(int(10)),`count`(int(10))).\n3. 表名tb_good; (good_id(int(10),auto_increment),category_second_id(int(6)),good_name(varchar(20)),image(varchar(100)),price(double(10,2)),original_price(double(10,2)),inventory(int(6)),sold_count(int(10)),spec(varchar(20)),origin(varchar(10))).", "logic_prompt": "1. 订单获取: GET /user/v1/user/{userId}/order; x-www-form-urlencoded; (status=Integer); ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 在tb_order表中查询所有订单记录，查询条件是user_id等于userId，当输入status不为null是判断与字段status是否相等，获取的列表按create_time降序排序；遍历订单列表，在tb_order_detail表中查询所有详情，查询条件是order_id等于tb_order.order_id，遍历详情列表，在tb_good表中查询商品，查询条件是good_id等于tb_order_detail.good_id；返回data设置为{[{tb_order记录},[{tb_order_detail记录},{tb_good记录}]]}."},
  {"task": "00178", "sql_prompt": "1. 表名tb_cart_detail; (cart_detail_id(bigint(14),auto_increment),cart_id(bigint(12)),good_id(int(10)),'count'(int(5))).\n2. 表名tb_cart; (cart_id(bigint(12),auto_increment),(user_id(int(8)),amount(double(14,2))).\n3. 表名tb_order; (order_id(bigint(12),auro_increment),user_id(int(8)),address_id(int(8)),amount(double(10,2)),create_time,remarks(varchar(100)),status(int(1))).\n4. 表名tb_order_detail; (order_detail_id(bigint(12),auro_increment),order_id(bigint(12)),good_id(int(10)),`count`(int(10))).\n5. 表名tb_good; (good_id(int(10),auto_increment),category_second_id(int(6)),good_name(varchar(20)),image(varchar(100)),price(double(10,2)),original_price(double(10,2)),inventory(int(6)),sold_count(int(10)),spec(varchar(20)),origin(varchar(10))).", "logic_prompt": "1. 订单创建: POST /user/v1/user/{userId}/order; x-www-form-urlencoded; (addressId, remarks=\"\",cartDetailIds=\"\"); ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 按,分割cartDetailIds获取序列，获取第一个cartDetailId，在tb_cart_detail表中查找记录，如果不为空根据tb_cart_detail.card_id在tb_cart表中查找用户购物车，如果为空创建一个新的用户购物车；在tb_order表中插入新的订单，字段user_id、address_id、remarks设置为输入参数，amount设置为0.0，create_time设置为当前时间，status设置为0；遍历cartDetailIds序列，在tb_cart_detail表中查找记录，如果为空在tb_order表中删除已插入的订单，返回(-1002, \"购物车不存在\",null)；否则根据tb_cart_detail.good_id在tb_good表中查找记录，如果tb_good.inventory小于tb_cart_detail.count，在tb_order表中删除已插入的订单，返回(-1004, \"商品库存不足\",null)；在tb_good表中更新字段，sold_count等于(tb_good.sold_count+tb_cart_detail.count)，inventory等于(tb_good.inventory-tb_cart_detail.count)；在tb_order_detail表中插入新的记录，字段order_id设置为tb_order.order_id，good_id设置为tb_cart_detail.good_id，count设置为tb_cart_detail.count；tb_order.amount设置为(tb_order.amount+good.price*tb_cart_detail.count)，tb_cart.amount设置为(tb_cart.amount-good.price*tb_cart_detail.count)；根据cartDetailId删除tb_cart_detail表中记录；结束cartDetailIds序列，更新tb_cart表和tb_order表，返回data设置为(100, \"成功\",null)."},
  {"task": "00179", "sql_prompt": "1. 表名tb_order; (order_id(bigint(12),auro_increment),user_id(int(8)),address_id(int(8)),amount(double(10,2)),create_time,remarks(varchar(100)),status(int(1))).", "logic_prompt": "1. 订单发货: PATCH /admin/v1/order/{orderId}/deliver; ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 在tb_order表中查询记录，查询条件是order_id等于orderId，如果为空返回(-1002, \"订单不存在\",null)，如果不为空更新表中字段status为1，返回(100, \"成功\",null)."},
  {"task": "00180", "sql_prompt": "1. 表名tb_order; (order_id(bigint(12),auro_increment),user_id(int(8)),address_id(int(8)),amount(double(10,2)),create_time,remarks(varchar(100)),status(int(1))).", "logic_prompt": "1. 订单配送: PATCH /admin/v1/order/{orderId}/confirm; ApiResponse{\"code\": 100,\"message\": \"成功\",\"data\": {}}.\n2. 在tb_order表中查询记录，查询条件是order_id等于orderId，如果为空返回(-1002, \"订单不存在\",null)，如果不为空更新表中字段status为2，返回(100, \"成功\",null)."},
  {"task": "00181", "sql_prompt": "1. 表名t_message_user; (id(int), message_id(int), receive_user_id(int), receive_user_name(varchar), receive_real_name(varchar), readed(bit), create_time(datetime), read_time(datetime)).\n2. 表名t_message; (id(int), title(varchar), content(varchar), create_time(datetime), send_user_id(int), send_user_name(varchar), send_real_name(varchar), receive_user_count(int), read_count(int)).", "logic_prompt": "1. 消息详情接口: POST /api/wx/student/user/message/read/{id}; application/json; {\"id\":\"\"}; ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":{\"id\":66,\"title\":\"国庆假说明\",\"content\":\"假期七天请注意安全。。。\",\"createTime\":\"2021-09-25 14:51:32\",\"sendUserId\":2,\"sendUserName\":\"admin\",\"sendRealName\":\"管理员\",\"receiveUserCount\":4,\"readCount\":1}}.\n2. 根据输入参数在t_message_user表中查询readed为false的数据设置该数据为true，更新read_time为当前日期，根据主键id更新表t_message_user，并在表t_message中的read_count上的值+1；返回{\"code\":1,\"message\":\"成功\",\"response\":{\"id\":66,\"title\":\"国庆假说明\",\"content\":\"假期七天请注意安全。。。\",\"createTime\":\"2021-09-25 14:51:32\",\"sendUserId\":2,\"sendUserName\":\"admin\",\"sendRealName\":\"管理员\",\"receiveUserCount\":4,\"readCount\":1}}."},
  {"task": "00182", "sql_prompt": "1. 表名t_message_user; (id(int), message_id(int), receive_user_id(int), receive_user_name(varchar), receive_real_name(varchar), readed(bit), create_time(datetime), read_time(datetime)).", "logic_prompt": "1. 消息未读数接口: POST /api/wx/student/user/message/unreadCount; application/json; {\"id\":\"\"}; ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":0}.\n2. 根据输入参数在t_message_user表中查询所有readed为false的数据数量；返回{\"code\":1,\"message\":\"成功\",\"response\":0}."},
  {"task": "00183", "sql_prompt": "1. 表名t_message_user; (id(int), message_id(int), receive_user_id(int), receive_user_name(varchar), receive_real_name(varchar), readed(bit), create_time(datetime), read_time(datetime)).\n2. 表名t_message; (id(int), title(varchar), content(varchar), create_time(datetime), send_user_id(int), send_user_name(varchar), send_real_name(varchar), receive_user_count(int), read_count(int)).", "logic_prompt": "1. 消息标记已读接口: POST /api/wx/student/user/message/read/{id}; application/json; {\"id\":\"\"}; ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":null}.\n2. 根据输入参数在t_message_user表中查询readed是否为true，如果readed为true则返回{\"code\":1,\"message\":\"成功\",\"response\":null}；如果readed不为true设置readed为true，read_time为当前日期，更新表t_message_user，并在表t_message中的read_count上的值+1；返回{\"code\":1,\"message\":\"成功\",\"response\":null}."},
  {"task": "00184", "sql_prompt": "1. 表名t_user; (id,user_uuid(varchar(36)),use_name,password,real_name,age,sex(int),birth_day,user_level(int),phone,role(int),status(int),image_path,create_time,modify_time,last_active_time,deleted(bit),wx_open_id).\n2. 表名t_user_event_log; (id,user_id,user_name,real_name,content(text),create_time).", "logic_prompt": "1. 修改用户信息: POST /api/student/user/update; application/json; {\"id\":14,\"userUuid\":\"\",\"userName\":\"\",\"realName\":\"\",\"age\":18,\"role\":1,\"sex\":1,\"birthDay\": \"\",\"phone\":\"\",\"lastActiveTime\":\"\",\"createTime\":\"\",\"modifyTime\":\"\",\"status\":1,\"userLevel\":1,\"classes\":\"\",  \"imagePath\": \"\"}; ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":null}.\n2. 检查输入参数中生日信息是否为空，如果为空则置为null；在t_user表中查询用户id等于输入参数中id的用户并赋值给user对象，用于更新t_user表，其中modifyTime置为当前时间；创建一个用户日志包括用户的ID、用户名、真实姓名，作发生的时间、用户的操作信息（用户名+\" 更新了个人资料\"），然后将这个用户插入到t_user_event_log表中."},
  {"task": "00185", "sql_prompt": "1. 表名t_user; (id,user_uuid(varchar(36)),use_name,password,real_name,age,sex(int),birth_day,user_level(int),phone,role(int),status(int),image_path,create_time,modify_time,last_active_time,deleted(bit),wx_open_id).\n2. 表名t_message_user; (id,message_id,receive_user_id,receive_user_name,receive_real_nam,readed(bit),create_time,read_time).\n3. 表名t_message; (id,title,content(varchar(500)),create_time,send_user_id,send_user_name,send_real_name,receive_user_count,read_count).", "logic_prompt": "1. 消息分页显示: POST /api/student/user/message/page; x-www-form-urlencoded; (userName=\"\", pageIndex=1, pageSize=10); ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":{}}.\n2. 在t_user表中查询用户名等于输入参数的用户，在t_message_user表中查询receive_user_id等于用户id的消息分页信息，存放在根据输入参数创建的分页对象中；从分页对象中获取消息ID列表，如果为空则response赋值为null，如果不为空，在在t_message表中查询对应的消息记录message，返回分页消息，其中title、content和send_user_name从message中获取，并对创建时间进行格式化；response的total属性等于分页消息的长度，list属性是分页消息."},
  {"task": "00186", "sql_prompt": "1. 表名oms_order；(id, memberId, couponId, orderSn, createTime, memberUsername, totalAmount, payAmount, freightAmount, promotionAmount, integrationAmount, couponAmount, discountAmount, payType, sourceType, status, orderType, deliveryCompany, deliverySn, autoConfirmDay, integration, growth, promotionInfo, billType, billHeader, billContent, billReceiverPhone, billReceiverEmail, receiverName, receiverPhone, receiverPostCode, receiverProvince, receiverCity, receiverRegion, receiverDetailAddress, note, confirmStatus, deleteStatus, useIntegration, paymentTime(TIMESTAMP), deliveryTime, receiveTime, commentTime, modifyTime).\n2. 表名oms_order_operate_history; (id(BIGINT), order_id(BIGINT), operate_man(VARCHAR(255), create_time, order_status(INTEGER), note(VARCHAR(255)).", "logic_prompt": "1. 修改订单费用信息接口：POST /order/update/moneyInfo; 请求格式application/json; {\"orderId\":\"订单ID\",\"freightAmount\":\"运费金额\",\"discountAmount\":\"管理员后台调整订单使用的折扣金额\",\"status\":\"订单状态：0->待付款；1->待发货；2->已发货；3->已完成；4->已关闭；5->无效订单\"}; ApiResponse{\"count\"}.\n2. 通过输入参数在oms_order表中，更新数据库中订单的费用信息其中修改时间为当前时间。并在数据库中记录订单操作历史，操作历史记录的当前的日期和时间，用于记录操作历史的时间戳用于追踪订单的费用修改记录，将操作历史记录的字段设置为\"后台管理员\"，将操作历史记录的note字段设置为字符串 \"修改费用信息\"。返回参数{\"count\"}."},
  {"task": "00187", "sql_prompt": "1. 表名oms_order；(id, memberId, couponId, orderSn, createTime, memberUsername, totalAmount, payAmount, freightAmount, promotionAmount, integrationAmount, couponAmount, discountAmount, payType, sourceType, status, orderType, deliveryCompany, deliverySn, autoConfirmDay, integration, growth, promotionInfo, billType, billHeader, billContent, billReceiverPhone, billReceiverEmail, receiverName, receiverPhone, receiverPostCode, receiverProvince, receiverCity, receiverRegion, receiverDetailAddress, note, confirmStatus, deleteStatus, useIntegration, paymentTime(TIMESTAMP), deliveryTime, receiveTime, commentTime, modifyTime).\n2. 表名oms_order_operate_history; (id(BIGINT), order_id(BIGINT), operate_man(VARCHAR(255), create_time, order_status(INTEGER), note(VARCHAR(255)).", "logic_prompt": "1. 备注订单接口：POST /order/update/note; 请求格式application/x-www-form-urlencoded; {\"id\",\"note\",\"status\"}; ApiResponse{\"count\"}.\n2. 实现更新订单表中对应订单的备注信息，同时更新订单的修改时间。记录这次备注信息的修改操作，包括操作时间、操作人、新的订单状态等信息。将操作历史记录插入数据库，以便日后查阅和审计。返回操作的结果，通常是成功更新的记录数。返回参数{\"count\"}."},
  {"task": "00188", "sql_prompt": "1. 表名oms_order_return_reason; (id(BIGINT), name(VARCHAR(255)), sort(INT), status(INT), create_time(DATE)).", "logic_prompt": "1. 添加退货原因接口：POST /returnReason/create; 请求格式application/json; {\"id\": \"\", \"name\": \"退货类型\", \"sort\": \"\", \"status\": \"状态：0->不启用；1->启用\", \"createTime\": \"Date\"};ApiResponse{\"count\"}.\n2. 添加退货原因接口：根据输入参数在表oms_order_return_reason中插入退货原因信息。返回参数{\"count\"}."},
  {"task": "00189", "sql_prompt": "1. 表名oms_order_return_reason; (id(BIGINT), name(VARCHAR(255)), sort(INT), status(INT), create_time(DATE)).", "logic_prompt": "1.  修改退货原因接口：POST /returnReason/update/{id}; 请求格式application/json; returnReason{name, sort:, status=int, createTime};ApiResponse{\"count\"}.\n2. 根据输入参数在表oms_order_return_reason中修改退货原因信息。返回参数{\"count\"}."},
  {"task": "00190", "sql_prompt": "1. 表名oms_order_return_reason; (id(BIGINT), name(VARCHAR(255)), sort(INT), status(INT), create_time(DATE)).", "logic_prompt": "1. 批量删除退货原因接口：POST /returnReason/delete; 请求格式application/x-www-form-urlencoded;{ids}; ApiResponse{\"count\"}.\n2. 根据输入参数在表oms_order_return_reason中批量删除退货原因信息。返回参数{\"count\"}."},
  {"task": "00191", "sql_prompt": "1. 表名t_user; (id(auto_increment),user_uuid(varchar(36)),user_name,password,real_name,age,sex(int),birth_day,user_level(int),phone,role(int),status(int),image_path,create_time,modify_time,last_active_time,deleted(bit),wx_open_id).\n2. 表名t_user_event_log; (id(auto_increment),user_id,user_name,real_name,content(text),create_time).", "logic_prompt": "1. 学生注册：POST /api/student/user/register; application/json; {\"userName\": \"\",\"password\": \"\",\"userLevel\": 1};  ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":null}. \n2. 在t_user表中查询已存在用户，查询条件是user_name等于userName，如果存在返回(2,\"用户已存在\",null)；在表中插入用户，字段user_uuid设置为随机生成的UUID字符串，user_name设置为userName，password设置为password采用哈希算法加密后的字符串，role和status设置为1，last_active_time和create_time设置为当前时间，deleted设置为false；在t_user_event_log表中插入用户日志，字段user_id设置为t_user.id，user_name设置为t_user.user_name，real_name设置为t_user.real_name，create_time设置为当前时间；返回(1,\"成功\",null)."},
  {"task": "00192", "sql_prompt": "1. 表名t_user; (id(auto_increment),user_uuid(varchar(36)),user_name,password,real_name,age,sex(int),birth_day,user_level(int),phone,role(int),status(int),image_path,create_time,modify_time,last_active_time,deleted(bit),wx_open_id).", "logic_prompt": "1. 学生登录: POST /api/student/user/login; application/json; {\"userName\": \"\",\"password\": \"\",\"remember\":false};  ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":null}. \n2. 检查输入参数是否为空，如果为空返回(2,\"用户名或密码为空\",null)；在t_user表中查询用户，查询条件是user_name等于userName，如果不存在返回(2,\"未注册\",null)；使用哈希算法加密password，如果与t_user.password不相等返回(2,\"密码错误\",null)；返回(1,\"成功\",null)."},
  {"task": "00193", "sql_prompt": "1. t_user; (id(auto_increment),user_uuid(varchar(36)),use_name,password,real_name,age,sex(int),birth_day,user_level(int),phone,role(int),status(int),image_path,create_time,modify_time,last_active_time,deleted(bit),wx_open_id).\n2. 表名t_exam_paper; (id(auto_increment),name,subject_id,paper_type,grade_level,score,question_count,suggest_time,limit_start_time,limit_end_time,frame_text_content_id,create_time,deleted(bit),task_exam_id).", "logic_prompt": "1. 试卷获取: POST /api/student/dashboard/index; x-www-form-urlencoded; (\"userName\": \"\"); ApiResponse{\"code\": 1,\"message\": \"成功\",\"response\": null}.\n2. 在t_user表中查询用户，查询条件是user_name等于userName，如果不存在返回(2,\"未注册\",null)；在t_exam_paper中查询fixedPaper试卷记录，查询条件是grade_level等于t_user.user_level，paper_type等于1，deleted等于0，记录最多返回5条且以id进行降序排序；在t_exam_paper中查询timeLimitPaper试卷记录，查询条件是grade_level等于t_user.user_level，paper_type等于4，deleted等于0，当前时间在limit_start_time和limit_end_time范围内，记录最多返回5条且以id进行降序排序；返回response设置为{\"fixedPaper\"=[fixedPaper试卷记录],\"timeLimitPaper\"=[timeLimitPaper试卷记录]}."},
  {"task": "00194", "sql_prompt": "1. 表名t_user; (id(auto_increment),user_uuid(varchar(36)),use_name,password,real_name,age,sex(int),birth_day,user_level(int),phone,role(int),status(int),image_path,create_time,modify_time,last_active_time,deleted(bit),wx_open_id).\n2. 表名t_task_exam; (id(auto_increment),title,grade_level,frame_text_content_id,create_user(int),create_time,deleted(bit),create_user_name).\n3. 表名t_task_exam_customer_answer; (id(auto_increment),task_exam_id,create_user(int),create_time,text_content_id).", "logic_prompt": "1. 任务获取: POST /api/student/dashboard/task; x-www-form-urlencoded; (\"userName\": \"\"); ApiResponse{\"code\": 1,\"message\": \"成功\",\"response\": null}.\n2. 在t_user表中查询用户，查询条件是user_name等于userName，如果不存在返回(2,\"未注册\",null)；在t_task_exam表中查询任务，查询条件是grade_level等于t_user.user_level，如果我为空返回(2,\"成功\",[])；遍历任务列表，在t_task_exam_customer_answer表中查询任务答案，查询条件是create_user等于t_user.id，task_exam_id等于t_task_exam.id；返回response设置为[{\"id\"=t_task_exam.id,\"title\"=t_task_exam.title,\"paperItems\"=[{t_task_exam_customer_answer记录}]}]."},
  {"task": "00195", "sql_prompt": "1. 表名t_user; (id(auto_increment),user_uuid(varchar(36)),use_name,password,real_name,age,sex(int),birth_day,user_level(int),phone,role(int),status(int),image_path,create_time,modify_time,last_active_time,deleted(bit),wx_open_id).\n2. 表名t_subject; (id(auto_increment), name,level(int),level_name,item_order(int),deleted(bit(1))).", "logic_prompt": "1. 学科获取: POST /api/student/education/subject/list; x-www-form-urlencoded; (\"userName\": \"\"); ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":null}.\n2. 在t_user表中查询用户，查询条件是user_name等于userName，如果不存在返回(2,\"未注册\",null)；在t_subject表中查询所有学科，查询条件是level等于t_user.user_level，返回response设置为[{\"id\"=t_subject.id,\"name\"=t_subject.name}]."},
  {"task": "00196", "sql_prompt": "1. 表名t_exam_paper; (id(auto_increment),name,subject_id,paper_type,grade_level,score,question_count,suggest_time,limit_start_time,limit_end_time,frame_text_content_id,create_time,deleted(bit),task_exam_id).", "logic_prompt": "1. 试卷分页: POST /api/student/exam/paper/pageList; application/json; Request{paperType,subjectId,pageIndex,pageSize}; ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":null}.\n2. 根据Request.pageIndex和Request.pageSize分页查询t_exam_paper表中记录，查询条件是paper_type等于Request.paperType，subject_id等于Request.subjectId，deleted等于0；返回response设置为{[t_exam_paper表记录]}."},
  {"task": "00197", "sql_prompt": "1. 表名t_exam_paper; (id(auto_increment),name,subject_id,paper_type,grade_level,score,question_count,suggest_time,limit_start_time,limit_end_time,frame_text_content_id,create_time,deleted(bit),task_exam_id).\n2. 表名t_question; (id(auto_increment),question_type,subject_id,score(int),grade_level,difficult(int),correct(text),info_text_content_id,create_user(int),status(int),create_time,deleted(bit(1))).\n3. 表名t_text_content; (id(auto_increment),content(text),create_time).", "logic_prompt": "1. 试卷查询: POST /api/student/education/subject/select/{id}; ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":null}.\n2. 在t_exam_paper表中查询试卷，查询条件是id等于id；在t_text_content表中查询文本内容，查询条件是id等于t_exam_paper.frame_text_content_id；在t_question表中查询问题列表，查询条件是t_question.info_text_content_id等于t_text_content.id；返回response设置为{id=t_exam_paper.id,level=t_exam_paper.grade_level,subjectId=t_exam_paper.subject_id,paperType=t_exam_paper.paper_type,name=t_exam_paper.name,suggestTime=t_exam_paper.suggest_time,titleItems={name=t_text_content.content,questionItems=[{t_question记录}]}}."},
  {"task": "00198", "sql_prompt": "1. 表名t_user; (id(auto_increment),user_uuid(varchar(36)),use_name,password,real_name,age,sex(int),birth_day,user_level(int),phone,role(int),status(int),image_path,create_time,modify_time,last_active_time,deleted(bit),wx_open_id).\n2. 表名t_exam_paper; (id(auto_increment),name,subject_id,paper_type,grade_level,score,question_count,suggest_time,limit_start_time,limit_end_time,frame_text_content_id,create_time,deleted(bit),task_exam_id).\n3. 表名t_text_content; (id(auto_increment),content(text),create_time).\n4. 表名t_question; (id(auto_increment),question_type,subject_id,score(int),grade_level,difficult(int),correct(text),info_text_content_id,create_user(int),status(int),create_time,deleted(bit(1))).\n5. 表名t_exam_paper_answer; (id(auto_increment),exam_paper_id,paper_name,paper_type,subject_id,system_score(int),user_score(int),paper_score(int),question_correct(int),question_count,do_time(int),status(int),create_user(int),create_time,task_exam_id).", "logic_prompt": "1. 试卷提交: POST /api/student/exampaper/answer/answerSubmit; x-www-form-urlencoded; (userName, id); ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":null}.\n2. 在t_user表中查询记录，查询条件是user_name等于userName；在t_exam_paper表中查询记录，查询条件是id等于id；如果paper_type等于6，在t_exam_paper_answer表中查询记录，查询条件是exam_paper_id等于t_exam_paper.id且create_user等于t_user.id，如果记录存在，返回(2,\"试卷不能重复做\",null)；在t_text_content表中查询记录，查询条件是id等于t_exam_paper.frame_text_content_id；在t_question表中查询记录列表，查询条件是info_text_content_id等于t_text_content.id；在t_exam_paper_answer表中插入记录，paper_name设置为t_exam_paper.name，exam_paper_id设置为t_exam_paper.id，create_user设置为t_user.id，create_time设置为当前时间，subject_id设置为t_exam_paper.subject_id，question_count设置为t_exam_paper.question_count，paper_score设置为t_exam_paper.score，paper_type设置为t_exam_paper.paper_type，task_exam_id设置为t_exam_paper.task_exam_id；返回(1,\"成功\",null)."},
  {"task": "00199", "sql_prompt": "1. 表名t_exam_paper_answer; (id(auto_increment),exam_paper_id,paper_name,paper_type,subject_id,system_score(int),user_score(int),paper_score(int),question_correct(int),question_count,do_time(int),status(int),create_user(int),create_time,task_exam_id).", "logic_prompt": "1. 考试记录分页: POST /api/student/exampaper/answer/pageList; x-www-form-urlencoded; (pageIndex, pageSize); ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":null}.\n2. 根据pageIndex和pageSize分页查询t_exam_paper_answer表中记录，返回ApiResponse设置为{[t_exam_paper_answer记录]}."},
  {"task": "00200", "sql_prompt": "1. 表名t_exam_paper_question_customer_answer; (id(auto_increment),question_id,exam_paper_id,exam_paper_answer_id,question_type,subject_id,customer_score(int),question_score(int),question_text_content_id,answer,text_content_id,do_right(bit(1)),create_user(int),create_time,item_order).\n2. 表名t_subject; (id(auto_increment), name,level(int),level_name,item_order(int),deleted(bit(1))).", "logic_prompt": "1. 错题本分页接口: POST /api/student/question/answer/page; x-www-form-urlencoded; (pageIndex, pageSize); ApiResponse{\"code\":1,\"message\":\"成功\",\"response\":null}.\n2. 根据pageIndex和pageSize分页查询t_exam_paper_question_customer_answer表中记录，查询条件do_right等于0；遍历记录列表，在t_subject表中查询记录，查询条件是id等于t_exam_paper_question_customer_answer.subject_id；返回response设置为[{\"examPaperId\"=t_exam_paper_question_customer_answer.exam_paper_id,\"questionId\"=t_exam_paper_question_customer_answer.question_id,\"questionType\"=t_exam_paper_question_customer_answer.question_type,\"subjectName\"=t_subject.name}]."},
  {"task": "00201", "sql_prompt": "1. 表名oms_order_return_reason; (id(BIGINT), name(VARCHAR(255)), sort(INT), status(INT), create_time(DATE)).", "logic_prompt": "1. 分页查询全部退货原因接口：GET /returnReason/list; 请求格式application/x-www-form-urlencoded;{pageSize, pageNum}; ApiResponse{reasonList{id, name, sort:, status=int, createTime}}.\n2. 根据输入参数在表oms_order_return_reason中分页查询全部退货原因信息。返回参数{reasonList{id, name, sort:, status=int, createTime}}."},
  {"task": "00202", "sql_prompt": "1. 表名oms_order_return_reason; (id(BIGINT), name(VARCHAR(255)), sort(INT), status(INT), create_time(DATE)).", "logic_prompt": "1. 获取单个退货原因详情信息接口：GET /returnReason/{id}; 请求格式application/json; {id}; ApiResponse{reason{id, name, sort:, status=int, createTime}}.\n2. 根据输入参数在表oms_order_return_reason中分页查询全部退货原因信息。返回参数reason{id, name, sort:, status=int, createTime}."},
  {"task": "00203", "sql_prompt": "1. 表名oms_order_return_reason; (id(BIGINT), name(VARCHAR(255)), sort(INT), status(INT), create_time(DATE)).", "logic_prompt": "1. 修改退货原因启用状态接口：POST /returnReason/update/status; 请求格式application/x-www-form-urlencoded; {status, ids=List<Long>}; ApiResponse{\"count\"}.\n2. 根据输入参数在表oms_order_return_reason中批量修改退货原因启用状态。返回参数{\"count\"}."},
  {"task": "00204", "sql_prompt": "1. 表名pms_brand; (id(BIGINT), name(VARCHAR(255)), first_letter(VARCHAR(1)), sort(INT), factory_status(INT), show_status(INT), product_count(INT), product_comment_count(INT), logo(VARCHAR(255)), big_pic(VARCHAR(255))).", "logic_prompt": "1. 获取全部品牌列表接口：GET /brand/listAll; 请求格式application/json; {}; ApiResponse{[PmsBrand记录]}.\n2. 在表pms_brand中获取全部品牌列表信息。返回参数{[PmsBrand记录]}."},
  {"task": "00205", "sql_prompt": "", "logic_prompt": ""},
  {"task": "00206", "sql_prompt": "", "logic_prompt": ""},
  {"task": "00207", "sql_prompt": "", "logic_prompt": ""},
  {"task": "00208", "sql_prompt": "", "logic_prompt": ""},
  {"task": "00209", "sql_prompt": "", "logic_prompt": ""},
  {"task": "00210", "sql_prompt": "", "logic_prompt": ""},
  {"task": "00211", "sql_prompt": "1. 表名wms_customer;(CUSTOMER_ID(int),CUSTOMER_NAME(string),CUSTOMER_PERSON(string),CUSTOMER_TEL(string),CUSTOMER_EMAIL(string),CUSTOMER_ADDRESS(string)).", "logic_prompt": "1. 检索所有客户接口:GET  /**/customerManage/getCustomerList ;URL参数传递;(offset:获取记录的起始位置,limit:检索的最大数量);ApiResponse:{\"code\":1,\"result\":\"success\",\"total\": 2,\"rows\": [{\n{\"customerId\":1,\"customerName\":\"\",\"personInCharge\":\"\",\"tel\":\"\",\"email\":\"\",\"address\"}}.\n2。 根据请求路径中的参数offset和limit从表wms_customer中获取客户分页信息，如果获取成功，返回ApiResponse."},
  {"task": "00212", "sql_prompt": "1. 表名wms_customer;(CUSTOMER_ID(int),CUSTOMER_NAME(string),CUSTOMER_PERSON(string),CUSTOMER_TEL(string),CUSTOMER_EMAIL(string),CUSTOMER_ADDRESS(string)).", "logic_prompt": "1. 按客户ID检索：GET  /**/customerManage/getCustomerInfo；application/json；{\"customerId\":1}；ApiResponse:{\"code\":1,\"result\":\"success\",\"data\":{\"customerId\":1,\"customerName\":\"\",\"personInCharge\":\"\",\"tel\":\"\",\"email\":\"\",\"address\"}}.\n2. 根据输入的参数customerId从表wms_customer获取指定customerId的客户信息，如果获取成功，返回ApiResponse."},
  {"task": "00213", "sql_prompt": "", "logic_prompt": ""},
  {"task": "00214", "sql_prompt": "", "logic_prompt": ""},
  {"task": "00215", "sql_prompt": "", "logic_prompt": ""},
  {"task": "00216", "sql_prompt": "", "logic_prompt": ""},
  {"task": "00217", "sql_prompt": "", "logic_prompt": ""},
  {"task": "00218", "sql_prompt": "", "logic_prompt": ""},
  {"task": "00219", "sql_prompt": "", "logic_prompt": ""},
  {"task": "00220", "sql_prompt": "", "logic_prompt": ""}
]
