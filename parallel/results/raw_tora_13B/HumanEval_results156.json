{"task_id": 156, "completion": "<s>\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    # Define the conversion dictionary\n    conversion_dict = {1:'i', 4:'iv', 5:'v', 9:'ix', 10:'x', 40:'xl', 50:'l', 90:'xc', 100:'c', 4000:'cd', 5000:'d', 9000:'cm', 10000:'m'}\n\n    # Convert the number to a string to iterate through its digits\n    number_str = str(number)\n\n    # Initialize the result\n    result = ''\n\n    # Iterate through the digits in reverse order\n    for i in range(len(number_str)-1, -1, -1):\n        # Get the current digit and the next one to the right\n        digit = int(number_str[i)\n        next_digit = int(number_str[i-1]) if i > 0 else 0\n\n        # Check if the current digit is 1-9 and the next one is 0-9\n        if 1 <= digit <= 9 and 0 <= next_digit <= 9:\n            # If the current digit is 1-5, add the corresponding roman numeral\n            if 1 <= digit <= 5:\n                result = conversion_dict[digit] + result\n            # If the current digit is 6-9, add the corresponding roman numeral and the next one\n            else:\n                result = conversion_dict[digit + 5] + conversion_dict[next_digit] + result\n        # If the current digit is 0, do nothing\n        else:\n            result = conversion_dict[digit] + result\n\n    return result.lower()\n\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 10000\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi"}