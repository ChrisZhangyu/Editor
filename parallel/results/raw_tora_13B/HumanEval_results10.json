{"task_id": 10, "completion": "<s> \n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    for i in range(len(string), 0, -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i-1][::-1]\n\n\ndef find_shortest_palindrome():\n    \"\"\" Find the shortest palindrome in a given text.\n    Algorithm idea is simple:\n    - Find all possible palindromes in a text.\n    - Find the shortest palindrome.\n    \"\"\"\n    text = \"\".join(open(sys.argv[1]).read().split())\n    palindromes = [make_palindrome(string) for string in text]\n    shortest_palindrome = min(palindromes, key=len)\n    return shortest_palindrome\n\n\nprint(find_shortest_palindrome())\n</s>"}