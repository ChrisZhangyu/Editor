{"task_id": 4, "completion": "<s> from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    mean_deviation = sum(deviations) / len(numbers)\n    return mean_deviation\n\n\n\ndef median_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the median of the absolute differences between each\n    element and a centerpoint (median in this case):\n    MAD = median | x - x_median |\n    >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    numbers.sort()\n    median = numbers[len(numbers) // 2]\n    deviations = [abs(x - median) for x in numbers]\n    median_deviation = deviations[len(deviations) // 2]\n    return median_deviation\n\n\n\ndef main():\n    numbers = [1.0, 2.0, 3.0, 4.0]\n    mean_deviation = mean_absolute_deviation(numbers)\n    median_deviation = median_absolute_deviation(numbers)\n    print(mean_deviation, median_deviation)\n\n\n\nif __name__ == \"__main__\":\n    main()\n</s>"}