{"task_id": 49, "completion": "<s>\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p, p)  # pow(x, y, z) computes (x**y) % z efficiently\n\n\ndef modp_inverse(n: int, p: int):\n    \"\"\"Return the multiplicative inverse of n modulo p.\n    >>> modp_inverse(3, 5)\n    2\n    >>> modp_inverse(101, 101)\n    49\n    >>> modp_inverse(0, 101)\n    1\n    >>> modp_inverse(3, 1)\n    2\n    >>> modp_inverse(10, 101)\n    99\n    \"\"\"\n    return pow(n, -1, p)  # pow(x, y, z) computes (x**y) % z efficiently\n\n\ndef modp_pow(n: int, k: int, p: int):\n    \"\"\"Return n^k modulo p (be aware of numerics).\n    >>> modp_pow(3, 5, 5)\n    1\n    >>> modp_pow(101, 10, 101)\n    1\n    >>> modp_pow(0, 10, 101)\n    1\n    \"\"\"\n    return pow(n, k, p)  # pow(x, y, z) computes (x**y) % z efficiently\n\n\ndef modp_div(n: int, m: int, p: int):\n    \"\"\"Return (n / m) modulo p (be aware of numerics).\n    >>> modp_div(3, 5, 5)\n    2\n    >>> modp_div(101, 10, 101)\n    49\n    >>> modp_div(0, 10, 101)\n    1\n    \"\"\"\n    return (n * modp_inverse(m, p)) % p\n\n\ndef modp_add(n: int, m: int, p: int):\n    \"\"\"Return (n + m) modulo p (be aware of numerics).\n    >>> modp_add(3, 5"}