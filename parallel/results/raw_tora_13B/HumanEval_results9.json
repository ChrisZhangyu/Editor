{"task_id": 9, "completion": "<s>from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list = []\n    current_max = numbers[0]\n    for num in numbers:\n        current_max = max(current_max, num)\n        rolling_max_list.append(current_max)\n    return rolling_max_list\n\n\ndef rolling_min(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\n    in the sequence.\n    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n    [1, 1, 2, 2, 2, 2]\n    \"\"\"\n    rolling_min_list = []\n    current_min = numbers[0]\n    for num in numbers:\n        current_min = min(current_min, num)\n        rolling_min_list.append(current_min)\n    return rolling_min_list\n\ndef find_extrema(numbers: List[int]) -> Tuple[List[int], List[int]]:\n    \"\"\" From a given list of integers, generate a tuple of lists, where the first list contains rolling maximums\n    and the second list contains rolling minimums.\n    >>> find_extrema([1, 2, 3, 2, 3, 4, 2])\n    ([1, 2, 3, 3, 3, 4, 4], [1, 1, 2, 2, 2, 2])\n    \"\"\"\n    return rolling_max(numbers), rolling_min(numbers)\n\ndef find_extrema_bounded(numbers: List[int], lower_bound: int, upper_bound: int) -> Tuple[List[int], List[int]]:\n    \"\"\" From a given list of integers, generate a tuple of lists, where the first list contains rolling maximums\n    and the second list contains rolling minimums. The values are bounded by lower_bound and upper_bound.\n    >>> find_extrema_bounded([1, 2, 3, 2, 3, 4, 2], 1, 3)\n    ([2, 2, 3, 3, "}