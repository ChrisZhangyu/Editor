{"task_id": 61, "completion": "<s>\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n    # We use a stack to keep track of the opening brackets.\n    stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        elif b == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n\ndef correct_bracketing_balanced(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket and the brackets are balanced.\n    >>> correct_bracketing_balanced(\"()\")\n    True\n    >>> correct_bracketing_balanced(\"(\"(\")\n    False\n    >>> correct_bracketing_balanced(\"()\")\n    True\n    >>> correct_bracketing_balanced(\"(()())\")\n    True\n    >>> correct_bracketing_balanced(\")(()\")\n    False\n    \"\"\"\n    # We use a stack to keep track of the opening brackets.\n    stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        elif b == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack and len(brackets) % 2 == 0\n\n\ndef correct_bracketing_count(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return the number of correctly matched brackets.\n    >>> correct_bracketing_count(\"()\")\n    2\n    >>> correct_bracketing_count(\"(\"(\")\n    0\n    >>> correct_bracketing_count(\"()\")\n    2\n    >>> correct_bracketing_count(\"(()())\")\n    4\n    >>> correct_bracketing_count(\")(()\")\n    2\n    \"\"\"\n    # We use a stack to keep track of the opening brackets.\n    stack = []\n    count = 0\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        elif b == \")\":\n            if stack:\n                stack.pop()\n                count += 1\n    return count\n\ndef correct_bracketing_strict("}