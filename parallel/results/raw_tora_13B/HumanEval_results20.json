{"task_id": 20, "completion": "<s>from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # The list is already sorted, so we can just look at the first two and last two elements\n    if numbers[1] - numbers[0] < numbers[-1] - numbers[-2]:\n        return numbers[0], numbers[1]\n    else:\n        return numbers[-2], numbers[-1]\n\n\n\ndef find_closest_elements_brute_force(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements_brute_force([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements_brute_force([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    # This is a brute force approach, not efficient for large lists\n    closest_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < abs(closest_pair[0] - closest_pair[1]:\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair\n\n\n\ndef test_find_closest_elements():\n    \"\"\"Tests for find_closest_elements function.\"\"\"\n    numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]\n    closest_pair = find_closest_elements(numbers)\n    assert closest_pair == (2.0, 2.2)\n\n    numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\n    closest_pair = find_closest_elements(numbers)\n"}