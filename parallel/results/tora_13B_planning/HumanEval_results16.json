{"task_id": 16, "completion": "<s>\ndef encrypt(s):\n    '''\n    Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being\n    rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.\n    For example:\n    encrypt(\u2019hi\u2019) returns \u2019lm\u2019\n    encrypt(\u2019asdfghjkl\u2019) returns \u2019ewhjklnop\u2019\n    encrypt(\u2019gf\u2019) returns \u2019kj\u2019\n    encrypt(\u2019et\u2019) returns \u2019ix\u2019\n    Let\u2019s think step by step.\n    1. Create a alphabet, bias two places multiplied by two.\n    2. Loop the input, find the latter bias letter in alphabet.\n    3. Return result.\n    '''\n\n\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    distinct_characters = set(string.lower())\n    return len(distinct_characters)\n\n\n\ndef count_vowels(string: str) -> int:\n    \"\"\" Given a string, count the number of vowels in it\n    >>> count_vowels('xyzXYZ')\n    0\n    >>> count_vowels('Jerry')\n    2\n    \"\"\"\n    vowels = 'aeiou'\n    return sum(string.lower().count(vowel) for vowel in vowels)\n\n\n\ndef count_consonants(string: str) -> int:\n    \"\"\" Given a string, count the number of consonants in it\n    >>> count_consonants('xyzXYZ')\n    3\n    >>> count_consonants('Jerry')\n    2\n    \"\"\"\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    return sum(string.lower().count(consonant) for consonant in consonants)\n\n\n\ndef count_punctuations(string: str) -> int:\n    \"\"\" Given a string, count the number of punctuations in it\n    >>> count_punctuations('xyzXYZ')\n    0\n    >>> count_punctuations('Jerry')\n    1\n    \"\"\"\n    punctuations = ',.!?;:'\n    return sum(string.count(punctuation) for punctuation in punctuations)\n\n\n\ndef count_digits(string: str) -> int:\n    \"\"\" Given a string, count the number of digits in it\n    >>> count_digits('xyzXYZ')\n    0\n    >>> count_digits('Jerry')\n    0\n    \"\"\"\n    digits = '0123456789'\n    return sum(string.count(digit) for digit in digits)\n\n\n\ndef count_whitespaces(string: str) -> int:\n    \"\"\" Given a string, count the number of whitespaces in it\n    >>> count_whitespaces('xyzXYZ')\n    0\n    >>> count_whitespaces('Jerry')\n    1\n    \"\"\"\n   "}