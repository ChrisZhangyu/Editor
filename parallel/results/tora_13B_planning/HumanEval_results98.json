{"task_id": 98, "completion": "<s>\ndef encrypt(s):\n    '''\n    Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being\n    rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.\n    For example:\n    encrypt(\u2019hi\u2019) returns \u2019lm\u2019\n    encrypt(\u2019asdfghjkl\u2019) returns \u2019ewhjklnop\u2019\n    encrypt(\u2019gf\u2019) returns \u2019kj\u2019\n    encrypt(\u2019et\u2019) returns \u2019ix\u2019\n    Let\u2019s think step by step.\n    1. Create a alphabet, bias two places multiplied by two.\n    2. Loop the input, find the latter bias letter in alphabet.\n    3. Return result.\n    '''\n\n\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i].isupper():\n            count += 1\n    return count\n\n\ndef count_lower(s):\n    \"\"\"\n    Given a string s, count the number of lowercase vowels in odd indices.\n    \n    For example:\n    count_lower('aBCdEf') returns 1\n    count_lower('abcdefg') returns 0\n    count_lower('dBBE') returns 2\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if i % 2 != 0 and s[i].islower():\n            count += 1\n    return count\n\ndef count_vowels():\n    \"\"\"\n    Given a string s, count the number of vowels in even indices and the number of vowels in odd indices.\n    \n    For example:\n    count_vowels('aBCdEf') returns (1, 1)\n    count_vowels('abcdefg') returns (0, 0)\n    count_vowels('dBBE') returns (0, 2)\n    \"\"\"\n    return count_upper(s), count_lower(s)\n\n\ndef count_consonants():\n    \"\"\"\n    Given a string s, count the number of consonants in even indices and the number of consonants in odd indices.\n    \n    For example:\n    count_consonants('aBCdEf') returns (1, 1)\n    count_consonants('abcdefg') returns (3, 3)\n    count_consonants('dBBE') returns (2, 0)\n    \"\"\"\n    return count_upper(s), count_lower(s)\n\ndef count_letters():\n    \"\"\"\n    Given a string s, count the total number of letters in even indices and the total number of letters in odd indices.\n    \n    For example:\n    count_letters('aBCdEf') returns (3, 3)\n    count_letters('abcdefg') returns (4, 4)\n    count_letters('d"}