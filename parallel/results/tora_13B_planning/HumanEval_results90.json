{"task_id": 90, "completion": "<s>\ndef encrypt(s):\n    '''\n    Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being\n    rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.\n    For example:\n    encrypt(\u2019hi\u2019) returns \u2019lm\u2019\n    encrypt(\u2019asdfghjkl\u2019) returns \u2019ewhjklnop\u2019\n    encrypt(\u2019gf\u2019) returns \u2019kj\u2019\n    encrypt(\u2019et\u2019) returns \u2019ix\u2019\n    Let\u2019s think step by step.\n    1. Create a alphabet, bias two places multiplied by two.\n    2. Loop the input, find the latter bias letter in alphabet.\n    3. Return result.\n    '''\n\n\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    # Your code here\n    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n\n\n\ndef next_largest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_largest() that returns the 2nd largest element of the list.\n    Return None if there is no such element.\n    \n    next_largest([1, 2, 3, 4, 5]) == 4\n    next_largest([5, 1, 4, 3, 2]) == 4\n    next_largest([]) == None\n    next_largest([1, 1]) == None\n    \"\"\"\n    # Your code here\n    if len(lst) < 2:\n        return None\n    else:\n        lst.sort(reverse=True)\n        return lst[1]\n\n\n\ndef next_smallest_and_largest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest_and_largest() that returns the 2nd smallest and 2nd largest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest_and_largest([1, 2, 3, 4, 5]) == (2, 4)\n    next_smallest_and_largest([5, 1, 4, 3, 2]) == (2, 4)\n    next_smallest_and_largest([]) == (None, None)\n    next_smallest_and_largest([1, 1]) == (None, None)\n    \"\"\"\n    # Your code here\n    if len(lst) < 2:\n        return (None, None)\n    else:\n        lst.sort()\n        return lst[1], lst[len(lst) - 2]\n\n\n\ndef main():\n    # Test next_smallest\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, "}