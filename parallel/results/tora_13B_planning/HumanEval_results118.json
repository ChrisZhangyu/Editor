{"task_id": 118, "completion": "<s>\ndef encrypt(s):\n    '''\n    Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being\n    rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.\n    For example:\n    encrypt(\u2019hi\u2019) returns \u2019lm\u2019\n    encrypt(\u2019asdfghjkl\u2019) returns \u2019ewhjklnop\u2019\n    encrypt(\u2019gf\u2019) returns \u2019kj\u2019\n    encrypt(\u2019et\u2019) returns \u2019ix\u2019\n    Let\u2019s think step by step.\n    1. Create a alphabet, bias two places multiplied by two.\n    2. Loop the input, find the latter bias letter in alphabet.\n    3. Return result.\n    '''\n\n\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXZ\"\n    word = word[::-1]  # reverse the word\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1] in consonants:\n            return word[i]\n    return \"\"\n\ndef decrypt(s):\n    \"\"\"\n    Create a function decrypt that takes a string as an argument and returns a string decrypted with the alphabet being\n    rotated. The alphabet should be rotated in a manner such that the letters shift up by two multiplied to two.\n    For example:\n    decrypt(\u2019lm\u2019) returns \u2019hi\u2019\n    decrypt(\u2019ewhjklnop\u2019) returns \u2019asdfghjkl\u2019\n    decrypt(\u2019kj\u2019) returns \u2019gf\u2019\n    decrypt(\u2019ix\u2019) returns \u2019et\u2019\n    Let\u2019s think step by step.\n    1. Create a alphabet, bias two places multiplied by two.\n    2. Loop the input, find the latter bias letter in alphabet.\n    3. Return result.\n    \"\"\"\n    # Create a alphabet, bias two places multiplied by two.\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\" * 2\n\n    # Loop the input, find the latter bias letter in alphabet.\n    result = \"\"\n    for letter in s:\n        index = alphabet.index(letter) - 2 * 2\n        if index < 0:\n            index += 26\n        result += alphabet[index]\n\n    return result\n\ndef decrypt_word(word):\n    \"\"\"You are given a word. Your task is to decrypt the word by the rules:\n    If the word contains \"encrypt\", replace it with \"decrypt\".\n    If the word contains \"are\", replace it with \"emotion\".\n    If the word contains \"you\", replace it with \"me\".\n    If the word contains \"my\", replace it with \"your\".\n    Vowels in the beginning and ending doesn't count. \n    You"}