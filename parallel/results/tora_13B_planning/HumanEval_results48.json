{"task_id": 48, "completion": "<s>\ndef encrypt(s):\n    '''\n    Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being\n    rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.\n    For example:\n    encrypt(\u2019hi\u2019) returns \u2019lm\u2019\n    encrypt(\u2019asdfghjkl\u2019) returns \u2019ewhjklnop\u2019\n    encrypt(\u2019gf\u2019) returns \u2019kj\u2019\n    encrypt(\u2019et\u2019) returns \u2019ix\u2019\n    Let\u2019s think step by step.\n    1. Create a alphabet, bias two places multiplied by two.\n    2. Loop the input, find the latter bias letter in alphabet.\n    3. Return result.\n    '''\n\n\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\n\ndef reverse_string(text: str):\n    \"\"\"\n    Reverses a string\n    >>> reverse_string('')\n    ''\n    >>> reverse_string('aba')\n    'baa'\n    >>> reverse_string('aaaaa')\n    'aaaaa'\n    >>> reverse_string('zbcd')\n    'dcba'\n    \"\"\"\n    return text[::-1]\n\n\n\ndef reverse_words(text: str):\n    \"\"\"\n    Reverses the order of words in a string\n    >>> reverse_words('')\n    ''\n    >>> reverse_words('aba')\n    'aba'\n    >>> reverse_words('aaaaa')\n    'aaaaa'\n    >>> reverse_words('zbcd')\n    'dcbz'\n    \"\"\"\n    return ' '.join(reverse_string(word) for word in text.split())\n\n\n\ndef is_anagram(text1: str, text2: str):\n    \"\"\"\n    Checks if two strings are anagrams\n    >>> is_anagram('', '')\n    True\n    >>> is_anagram('aba', 'bab')\n    True\n    >>> is_anagram('aaaaa', 'aaaa')\n    False\n    >>> is_anagram('zbcd', 'dcba')\n    True\n    \"\"\"\n    return sorted(text1) == sorted(text2)\n\n\n\ndef count_vowels(text: str):\n    \"\"\"\n    Counts the number of vowels in a string\n    >>> count_vowels('')\n    0\n    >>> count_vowels('aba')\n    2\n    >>> count_vowels('aaaaa')\n    4\n    >>> count_vowels('zbcd')\n    2\n    \"\"\"\n    vowels = 'aeiou'\n    return sum(text.count(vowel) for vowel in vowels)\n\n\n\ndef count_consonants(text: str):\n    \"\"\"\n    Counts the number of consonants in a string\n    >>> count_consonants('')\n    0\n    >>> count_consonants('aba')\n    2"}