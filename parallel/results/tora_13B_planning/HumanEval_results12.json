{"task_id": 12, "completion": "<s> \ndef encrypt(s):\n    '''\n    Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being\n    rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.\n    For example:\n    encrypt(\u2019hi\u2019) returns \u2019lm\u2019\n    encrypt(\u2019asdfghjkl\u2019) returns \u2019ewhjklnop\u2019\n    encrypt(\u2019gf\u2019) returns \u2019kj\u2019\n    encrypt(\u2019et\u2019) returns \u2019ix\u2019\n    Let\u2019s think step by step.\n    1. Create a alphabet, bias two places multiplied by two.\n    2. Loop the input, find the latter bias letter in alphabet.\n    3. Return result.\n    '''\n\nfrom typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    longest_string = [s for s in strings if len(s) == max_length][0]\n    return longest_string\n\n\n\ndef test_longest():\n    \"\"\"Test the longest function.\"\"\"\n    assert longest([]) is None\n    assert longest(['a', 'b', 'c']) == 'a'\n    assert longest(['a', 'bb', 'ccc']) == 'ccc'\n\n\n\ntest_longest()\n\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being\n    rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.\n    For example:\n    encrypt(\u2019hi\u2019) returns \u2019lm\u2019\n    encrypt(\u2019asdfghjkl\u2019) returns \u2019ewhjklnop\u2019\n    encrypt(\u2019gf\u2019) returns \u2019kj\u2019\n    encrypt(\u2019et\u2019) returns \u2019ix\u2019\n    Let\u2019s think step by step.\n    1. Create a alphabet, bias two places multiplied by two.\n    2. Loop the input, find the latter bias letter in alphabet.\n    3. Return result.\"\"\"\n    alphabet = list(\"abcdefghijklmnopqrstuvwxyz\")\n    shifted_alphabet = alphabet[2*2:] + alphabet[:2*2]\n    result = \"\"\n    for letter in s:\n        result += shifted_alphabet[alphabet.index(letter)]\n    return result\n\n\n\ndef test_encrypt():\n    \"\"\"Test the encrypt function.\"\"\"\n    assert encrypt(\"hi\") == \"lm\"\n    assert encrypt(\"asdfghjkl\") == \"ewhjklnop\"\n    assert encrypt(\"gf\") == \"kj\"\n    assert encrypt(\"et\") == \"ix\"\n\n\n\ntest_encrypt()\n</s>"}