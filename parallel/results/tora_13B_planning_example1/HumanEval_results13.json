{"task_id": 13, "completion": "<s>\ndef encrypt(s):\n    '''\n    Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being\n    rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.\n    For example:\n    encrypt(\u2019hi\u2019) returns \u2019lm\u2019\n    encrypt(\u2019asdfghjkl\u2019) returns \u2019ewhjklnop\u2019\n    encrypt(\u2019gf\u2019) returns \u2019kj\u2019\n    encrypt(\u2019et\u2019) returns \u2019ix\u2019\n    Let\u2019s think step by step.\n    1. Create a alphabet, bias two places multiplied by two.\n    2. Loop the input, find the latter bias letter in alphabet.\n    3. Return result.\n    '''\n\n\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    150\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\n\ndef gcd_lcm_test():\n    \"\"\"Test gcd and lcm functions\"\"\"\n    assert greatest_common_divisor(3, 5) == 1\n    assert least_common_multiple(3, 5) == 15\n    assert greatest_common_divisor(25, 15) == 5\n    assert least_common_multiple(25, 15) == 150\n\n\n\ngcd_lcm_test()\nprint(gcd_lcm_test())\n\n\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\n\ndef least_common_multiple(a: int, b: int) -> int:\n    \"\"\" Return a least common multiple of two integers a and b\n    >>> least_common_multiple(3, 5)\n    15\n    >>> least_common_multiple(25, 15)\n    150\n    \"\"\"\n    return a * b // greatest_common_divisor(a, b)\n\n\n\ndef gcd_lcm_test():\n    \"\"\"Test gcd and lcm functions\"\"\"\n    assert greatest_common_divisor(3, 5) == 1\n    assert least_common_multiple(3, 5) == 15\n    assert greatest_common_div"}