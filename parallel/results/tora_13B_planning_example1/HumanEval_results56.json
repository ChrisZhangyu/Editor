{"task_id": 56, "completion": "<s>\ndef encrypt(s):\n    '''\n    Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being\n    rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.\n    For example:\n    encrypt(\u2019hi\u2019) returns \u2019lm\u2019\n    encrypt(\u2019asdfghjkl\u2019) returns \u2019ewhjklnop\u2019\n    encrypt(\u2019gf\u2019) returns \u2019kj\u2019\n    encrypt(\u2019et\u2019) returns \u2019ix\u2019\n    Let\u2019s think step by step.\n    1. Create a alphabet, bias two places multiplied by two.\n    2. Loop the input, find the latter bias letter in alphabet.\n    3. Return result.\n    '''\n\n\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    # Your code here\n    return True\n\n\n\ndef count_brackets(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return the number of opening brackets (\"<\") minus the number of closing brackets (\">\").\n\n    >>> count_brackets(\"<>\")\n    1\n    >>> count_brackets(\"<<><>><><><><><>\")\n    5\n    >>> count_brackets(\"><<>\")\n    -3\n    \"\"\"\n    # Your code here\n    return 0\n\n\n\ndef bracket_depth(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return the current depth of the brackets.\n    >>> bracket_depth(\"<>\")\n    1\n    >>> bracket_depth(\"<<><>><><><>\")\n    3\n    >>> bracket_depth(\"><<>\")\n    -2\n    \"\"\"\n    # Your code here\n    return 0\n\n\n\ndef bracket_index(brackets: str, i: int):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return the index of the ith opening bracket.\n    >>> bracket_index(\"<>\", 0)\n    0\n    >>> bracket_index(\"<<><>><><><>\", 1)\n    2\n    >>> bracket_index(\"><<>\", 0)\n    -1\n    \"\"\"\n    # Your code here\n    return 0\n\n\n\ndef bracket_match(brackets: str, i: int):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return the index of the matching bracket to the ith closing bracket.\n    >>> bracket_match(\"<>\", 0)\n    1\n    >>> bracket_match(\"<<><>><><><>\", 2)\n    6\n    >>> bracket_match(\"><<>\", 1)\n    -2\n    \"\"\"\n    # Your code here\n    return 0\n\n\n\ndef within_brackets(brackets: str, i: int):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if the ith position is within brackets.\n    >>> within_brackets(\"<>"}