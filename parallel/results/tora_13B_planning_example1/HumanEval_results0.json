{"task_id": 0, "completion": "<s> \ndef encrypt(s):\n    '''\n    Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being\n    rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.\n    For example:\n    encrypt(\u2019hi\u2019) returns \u2019lm\u2019\n    encrypt(\u2019asdfghjkl\u2019) returns \u2019ewhjklnop\u2019\n    encrypt(\u2019gf\u2019) returns \u2019kj\u2019\n    encrypt(\u2019et\u2019) returns \u2019ix\u2019\n    Let\u2019s think step by step.\n    1. Create a alphabet, bias two places multiplied by two.\n    2. Loop the input, find the latter bias letter in alphabet.\n    3. Return result.\n    '''\n\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    numbers = sorted(numbers)\n    for i in range(len(numbers) - 1):\n        if numbers[i] + threshold >= numbers[i + 1]:\n            return True\n    return False\n\n\n\ndef main():\n    # Test has_close_elements\n    numbers = [1.0, 2.0, 3.0]\n    threshold = 0.5\n    assert has_close_elements(numbers, threshold) == False\n\n    numbers = [1.0, 2.8, 3.0, 4.0, 5.0, 2.0]\n    threshold = 0.3\n    assert has_close_elements(numbers, threshold) == True\n\n\n\nif __name__ == \"__main__\":\n    main()\n</s>"}