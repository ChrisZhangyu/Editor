{"task_id": 32, "completion": "<s> \ndef encrypt(s):\n    '''\n    Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being\n    rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.\n    For example:\n    encrypt(\u2019hi\u2019) returns \u2019lm\u2019\n    encrypt(\u2019asdfghjkl\u2019) returns \u2019ewhjklnop\u2019\n    encrypt(\u2019gf\u2019) returns \u2019kj\u2019\n    encrypt(\u2019et\u2019) returns \u2019ix\u2019\n    Let\u2019s think step by step.\n    1. Create a alphabet, bias two places multiplied by two.\n    2. Loop the input, find the latter bias letter in alphabet.\n    3. Return result.\n    '''\n\nimport math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    # Newtons method\n    x = 0\n    for _ in range(10):\n        x = x - poly(xs, x) / (poly(xs, x + 1) - poly(xs, x))\n        if abs(poly(xs, x)) < 1e-6:\n            return round(x, 2)\n\n\ndef decrypt(s):\n    \"\"\"\n    Decrypts a string encrypted with the alphabet being rotated.\n    \"\"\"\n    # Coefficients of the polynomial\n    coeffs = [1, -2, 1]\n    # Find x such that f(x) = 0\n    x = find_zero(coeffs)\n    # Decrypt\n    return ''.join([chr((ord(c) - x) % 26) for c in s])\n\n\ndef encrypt(s):\n    \"\"\"\n    Encrypts a string by the alphabet being rotated.\n    \"\"\"\n    # Coefficients of the polynomial\n    coeffs = [1, 2, 1]\n    # Find x such that f(x) = 0\n    x = find_zero(coeffs)\n    # Encrypt\n    return ''.join([chr((ord(c) + x) % 26) for c in s])\n\n\ndef main():\n    \"\"\"\n    Tests the functions\n    \"\"\"\n    s = \"hi\"\n    result = encrypt(s)\n    print(result)\n    result = decrypt(result)\n    print(result)\n\n    s = \"asdfghjkl\"\n    result = encrypt(s)\n    print(result)\n    result = decrypt(result)\n    print(result)\n\n    s = \"gf\"\n    result = encrypt(s)\n    print(result)\n    result = decrypt(result)\n    print(result)\n\n    s = \"et\"\n    result = encrypt(s)\n    print(result)\n    result = decrypt(result)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()\n</s>"}