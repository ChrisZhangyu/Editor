{"task_id": 60, "completion": "<s>\ndef encrypt(s):\n    '''\n    Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being\n    rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.\n    For example:\n    encrypt(\u2019hi\u2019) returns \u2019lm\u2019\n    encrypt(\u2019asdfghjkl\u2019) returns \u2019ewhjklnop\u2019\n    encrypt(\u2019gf\u2019) returns \u2019kj\u2019\n    encrypt(\u2019et\u2019) returns \u2019ix\u2019\n    Let\u2019s think step by step.\n    1. Create a alphabet, bias two places multiplied by two.\n    2. Loop the input, find the latter bias letter in alphabet.\n    3. Return result.\n    '''\n\n\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total\n\n\n\ndef sum_of_squares_to_n(n: int):\n    \"\"\"sum_of_squares_to_n is a function that sums the squares of numbers from 1 to n.\n    >>> sum_of_squares_to_n(30)\n    4650\n    >>> sum_of_squares_to_n(10)\n    385\n    >>> sum_of_squares_to_n(5)\n    35\n    >>> sum_of_squares_to_n(1)\n    1\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i**2\n    return total\n\n\n\ndef sum_of_cubes_to_n(n: int):\n    \"\"\"sum_of_cubes_to_n is a function that sums the cubes of numbers from 1 to n.\n    >>> sum_of_cubes_to_n(30)\n    4650\n    >>> sum_of_cubes_to_n(10)\n    385\n    >>> sum_of_cubes_to_n(5)\n    35\n    >>> sum_of_cubes_to_n(1)\n    1\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total\n\n\n\ndef sum_of_fifth_powers_to_n(n: int):\n    \"\"\"sum_of_fifth_powers_to_n is a function that sums the fifth powers of numbers from 1 to n.\n    >>> sum_of_fifth_powers_to_n(30)\n    4650\n    >>> sum_of_fifth_powers_to_n(10)\n    385\n    >>> sum_of_fifth_powers_to_n(5)\n    35\n    >>> sum_of_fifth_powers_to_n(1)"}