{"task_id": 120, "completion": "<s>\ndef encrypt(s):\n    '''\n    Create a function encrypt that takes a string as an argument and returns a string encrypted with the alphabet being\n    rotated. The alphabet should be rotated in a manner such that the letters shift down by two multiplied to two places.\n    For example:\n    encrypt(\u2019hi\u2019) returns \u2019lm\u2019\n    encrypt(\u2019asdfghjkl\u2019) returns \u2019ewhjklnop\u2019\n    encrypt(\u2019gf\u2019) returns \u2019kj\u2019\n    encrypt(\u2019et\u2019) returns \u2019ix\u2019\n    Let\u2019s think step by step.\n    1. Create a alphabet, bias two places multiplied by two.\n    2. Loop the input, find the latter bias letter in alphabet.\n    3. Return result.\n    '''\n\n\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # Use a heap to store the maximum k numbers\n    import heapq\n    heap = []\n    for num in arr:\n        heapq.heappush(heap, -num)\n    result = [-heapq.heappop(heap) for _ in range(k)]\n\n    return result\n\n\ndef maximum_numbers():\n    \"\"\"\n    Test the maximum function.\n    \"\"\"\n    arr1 = [-3, -4, 5]\n    k1 = 3\n    result1 = maximum(arr1, k1)\n    print(result1)\n\n    arr2 = [4, -4, 4]\n    k2 = 2\n    result2 = maximum(arr2, k2)\n    print(result2)\n\n    arr3 = [-3, 2, 1, 2, -1, -2, 1]\n    k3 = 1\n    result3 = maximum(arr3, k3)\n    print(result3)\n\n\n# maximum_numbers()\n\n\ndef decrypt(s):\n    '''\n    Create a function decrypt that takes a string as an argument and returns a string decrypted with the alphabet being\n    rotated. The alphabet should be rotated in a manner such that the letters shift up by two multiplied to two.\n    For example:\n    decrypt(\u2019lm\u2019) returns \u2019hi\u2019\n    decrypt(\u2019ewhjklnop\u2019) returns \u2019asdfghjkl\u2019\n    decrypt(\u2019kj\u2019) returns \u2019gf\u2019\n    decrypt(\u2019ix\u2019) returns \u2019et\u2019\n    Let\u2019s think step by step.\n    1. Create a alphabet, bias two places multiplied by two.\n    2. Loop the input, find the latter bias letter in alphabet.\n    3. Return result.\n    '''\n\ndef decrypt(s):\n    \"\"\"\n    Create a function decrypt that takes a string as an argument and returns a string decrypted with the alphabet being\n    rotated. The alphabet should be rotated in a manner such that the letters shift up by two multiplied to two.\n    For example:\n    decrypt(\u2019lm\u2019) returns \u2019hi\u2019\n    decrypt(\u2019ewhjklnop\u2019)"}